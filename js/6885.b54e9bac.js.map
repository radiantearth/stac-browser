{"version":3,"file":"js/6885.b54e9bac.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/lerc/LercDecode.js","webpack://@radiantearth/stac-browser/./node_modules/zstddec/dist/zstddec.modern.js","webpack://@radiantearth/stac-browser/./node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["LercDecode","CntZImage","input","options","skipMask","encodedMaskData","parsedData","parse","inputOffset","noDataValue","defaultNoDataValue","uncompressedData","uncompressPixelValues","pixelType","Float32Array","returnMask","result","width","height","pixelData","resultPixels","minValue","maxValue","pixels","resultMask","maskData","returnEncodedMask","mask","bitset","returnFileInfo","fileInfo","formatFileInfo","computeUsedBitDepths","bitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","currentValue","blockIdx","numX","numBlocksX","numY","numBlocksY","blockWidth","Math","floor","blockHeight","scale","maxZError","Number","MAX_VALUE","Uint8Array","xx","yy","blockDataBuffer","y","thisBlockHeight","x","thisBlockWidth","blockData","blockPtr","constValue","maskByte","outPtr","outStride","block","blocks","encoding","rawData","unstuff","stuffedData","bitsPerPixel","numValidPixels","offset","fileIdentifierString","fileVersion","imageType","eofOffset","numBytes","numBlocks","i","float32","Object","keys","fp","fileIdView","String","fromCharCode","apply","trim","view","DataView","getInt32","getUint32","getFloat64","getFloat32","ceil","cnt","getInt16","ip","op","getUint8","val","length","actualNumBlocksX","actualNumBlocksY","Array","blockI","blockY","blockX","size","bytesLeft","byteLength","min","headerByte","offsetType","getInt8","numValidPixelsType","getUint16","arrayBuf","store8","numPixels","ArrayBuffer","set","dataBytes","dataWords","Uint32Array","src","dest","o","n","buffer","bitMask","bitsLeft","nmax","numInvalidTailBytes","missingBits","Lerc2Decode","BitStuffer","lutArr","unstuffLUT","unshift","unstuff2","bitPos","unstuffLUT2","originalUnstuff","originalUnstuff2","Lerc2Helpers","HUFFMAN_LUT_BITS_MAX","computeChecksumFletcher32","sum1","sum2","len","words","tlen","readHeaderInfo","ptr","headerInfo","lastIndexOf","checksum","keyLength","numDims","numValidPixel","microBlockSize","blobSize","zMin","zMax","this","checkMinMaxRanges","OutPixelTypeArray","getDataTypeArray","rangeBytes","getDataTypeSize","minValues","readSubArray","maxValues","equal","readMask","mb","k","readDataOneSweep","useBSQForOutputDim","swapDimensionOrder","z","nStart","readHuffmanTree","BITS_MAX","version","i0","i1","decodeBits","j","codeTable","first","second","word","srcPtr","numBitsLUT","numBitsLUTQick","tree","TreeNode","undefined","max","entry","code","numEntries","jj","currentBit","node","decodeLut","right","left","readHuffman","delta","valTmp","valTmpQuick","ii","huffmanInfo","prevVal","iDim","deltaEncode","encodeMode","resultPixelsAllDim","viewByteLength","bits67","doLut","numBits","numElements","lutData","lutBytes","counter","lut","bitstuffer","readTiles","dataTypeSize","blockEncoding","isDiffEncoding","resultPixelsPrevDim","row","col","testCode","bytesleft","lastBlockHeight","lastBlockWidth","fileVersionCheckNum","uncompressed","getDataTypeUsed","getOnePixel","constantoffset","constant","getPixelType","constructConstantSurface","valMin","t","tp","Int8Array","Int16Array","Uint16Array","Int32Array","Float64Array","isValidPixelValue","isValid","s","dt","tc","temp","getUInt32","inputIsBIP","swap","decode","onesweep","diff","returnPixelInterleavedDims","bReadDataOneSweep","abs","flagHuffman","validPixelCount","dimCount","dimStats","getBandCount","count","isPlatformLittleEndian","a","b","c","Lerc","encodedData","lerc","majorVersion","substring","bandMask","iPlane","eof","bandMasks","decodedPixelBlock","statistics","uniqueBandMaskCount","push","init","instance","heap","IMPORT_OBJECT","env","emscripten_notify_memory_growth","index","exports","memory","ZSTDDecoder","fetch","wasm","then","response","arrayBuffer","WebAssembly","instantiate","_init","Buffer","from","array","uncompressedSize","Error","compressedSize","compressedPtr","malloc","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","slice","free","zstd","LercDecoder","constructor","fileDirectory","super","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","AddCompression","decodeBlock","None","Deflate","Zstandard","lercResult","lercData"],"sourceRoot":""}