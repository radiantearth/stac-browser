{"version":3,"file":"js/372.dccebcbb.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/structs/LRUCache.js","webpack://@radiantearth/stac-browser/./node_modules/ol/DataTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/ImageCanvas.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Raster.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  deleteOldest() {\n    const entry = this.pop();\n    if (entry instanceof Disposable) {\n      entry.dispose();\n    }\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    while (this.oldest_) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already',\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/DataTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike\n */\n\n/**\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\n */\n\n/**\n * Data that can be used with a DataTile.\n * @typedef {ArrayLike|ImageLike} Data\n */\n\n/**\n * @param {Data} data Tile data.\n * @return {ImageLike|null} The image-like data.\n */\nexport function asImageLike(data) {\n  return data instanceof Image ||\n    data instanceof HTMLCanvasElement ||\n    data instanceof HTMLVideoElement ||\n    data instanceof ImageBitmap\n    ? data\n    : null;\n}\n\n/**\n * @param {Data} data Tile data.\n * @return {ArrayLike|null} The array-like data.\n */\nexport function asArrayLike(data) {\n  return data instanceof Uint8Array ||\n    data instanceof Uint8ClampedArray ||\n    data instanceof Float32Array ||\n    data instanceof DataView\n    ? data\n    : null;\n}\n\n/**\n * This is set as the cancellation reason when a tile is disposed.\n */\nexport const disposedError = new Error('disposed');\n\n/**\n * @type {CanvasRenderingContext2D|null}\n */\nlet sharedContext = null;\n\n/**\n * @param {ImageLike} image The image.\n * @return {Uint8ClampedArray} The data.\n */\nexport function toArray(image) {\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(\n      image.width,\n      image.height,\n      undefined,\n      {willReadFrequently: true},\n    );\n  }\n  const canvas = sharedContext.canvas;\n  const width = image.width;\n  if (canvas.width !== width) {\n    canvas.width = width;\n  }\n  const height = image.height;\n  if (canvas.height !== height) {\n    canvas.height = height;\n  }\n  sharedContext.clearRect(0, 0, width, height);\n  sharedContext.drawImage(image, 0, 0);\n  return sharedContext.getImageData(0, 0, width, height).data;\n}\n\n/**\n * @type {import('./size.js').Size}\n */\nconst defaultSize = [256, 256];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @property {AbortController} [controller] An abort controller.\n * @api\n */\n\nclass DataTile extends Tile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    const state = TileState.IDLE;\n\n    super(options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @type {Data}\n     * @private\n     */\n    this.data_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */\n    this.size_ = options.size || null;\n\n    /**\n     * @type {AbortController|null}\n     * @private\n     */\n    this.controller_ = options.controller || null;\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */\n  getSize() {\n    if (this.size_) {\n      return this.size_;\n    }\n    const imageData = asImageLike(this.data_);\n    if (imageData) {\n      return [imageData.width, imageData.height];\n    }\n    return defaultSize;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n  getData() {\n    return this.data_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Load the tile data.\n   * @api\n   * @override\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    const self = this;\n    this.loader_()\n      .then(function (data) {\n        self.data_ = data;\n        self.state = TileState.LOADED;\n        self.changed();\n      })\n      .catch(function (error) {\n        self.error_ = error;\n        self.state = TileState.ERROR;\n        self.changed();\n      });\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.controller_) {\n      this.controller_.abort(disposedError);\n      this.controller_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default DataTile;\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/ImageCanvas\n */\nimport ImageWrapper from './Image.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageWrapper {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n","/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport TileQueue from '../TileQueue.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\nimport ImageLayer from '../layer/Image.js';\nimport TileLayer from '../layer/Tile.js';\nimport {create as createTransform} from '../transform.js';\nimport {getUid} from '../util.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport TileSource from './Tile.js';\n\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  return function (data) {\n    // bracket notation for minification support\n    const buffers = data['buffers'];\n    const meta = data['meta'];\n    const imageOps = data['imageOps'];\n    const width = data['width'];\n    const height = data['height'];\n\n    const numBuffers = buffers.length;\n    const numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      const images = new Array(numBuffers);\n      for (let b = 0; b < numBuffers; ++b) {\n        images[b] = new ImageData(\n          new Uint8ClampedArray(buffers[b]),\n          width,\n          height,\n        );\n      }\n      const output = operation(images, meta).data;\n      return output.buffer;\n    }\n\n    const output = new Uint8ClampedArray(numBytes);\n    const arrays = new Array(numBuffers);\n    const pixels = new Array(numBuffers);\n    for (let b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n    for (let i = 0; i < numBytes; i += 4) {\n      for (let j = 0; j < numBuffers; ++j) {\n        const array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n      const pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  const lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  const lines = lib.concat([\n    'const __minion__ = (' + createMinion.toString() + ')(',\n    config.operation.toString(),\n    ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  const buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});',\n  ]);\n\n  const worker = new Worker(\n    typeof Blob === 'undefined'\n      ? 'data:text/javascript;base64,' +\n        Buffer.from(lines.join('\\n'), 'binary').toString('base64')\n      : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'})),\n  );\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  const minion = createMinion(config.operation);\n  let terminated = false;\n  return {\n    postMessage: function (data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n        onMessage({data: {buffer: minion(data), meta: data['meta']}});\n      }, 0);\n    },\n    terminate: function () {\n      terminated = true;\n    },\n  };\n}\n\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nexport class Processor extends Disposable {\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n  constructor(config) {\n    super();\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.imageOps_ = !!config.imageOps;\n    let threads;\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (this.imageOps_) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    /**\n     * @type {Array<Worker>}\n     */\n    const workers = new Array(threads);\n    if (threads) {\n      for (let i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, this.onWorkerMessage_.bind(this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(\n        config,\n        this.onWorkerMessage_.bind(this, 0),\n      );\n    }\n    /**\n     * @type {Array<Worker>}\n     * @private\n     */\n    this.workers_ = workers;\n\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n    this.queue_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxQueueLength_ = config.queue || Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    this.running_ = 0;\n\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n    this.dataLookup_ = {};\n\n    /**\n     * @type {Job|null}\n     * @private\n     */\n    this.job_ = null;\n  }\n\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n  process(inputs, meta, callback) {\n    this.enqueue_({\n      inputs: inputs,\n      meta: meta,\n      callback: callback,\n    });\n    this.dispatch_();\n  }\n\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n  enqueue_(job) {\n    this.queue_.push(job);\n    while (this.queue_.length > this.maxQueueLength_) {\n      this.queue_.shift().callback(null, null);\n    }\n  }\n\n  /**\n   * Dispatch a job.\n   */\n  dispatch_() {\n    if (this.running_ || this.queue_.length === 0) {\n      return;\n    }\n\n    const job = this.queue_.shift();\n    this.job_ = job;\n    const width = job.inputs[0].width;\n    const height = job.inputs[0].height;\n    const buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    const threads = this.workers_.length;\n    this.running_ = threads;\n    if (threads === 1) {\n      this.workers_[0].postMessage(\n        {\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this.imageOps_,\n          width: width,\n          height: height,\n        },\n        buffers,\n      );\n      return;\n    }\n\n    const length = job.inputs[0].data.length;\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (let i = 0; i < threads; ++i) {\n      const offset = i * segmentLength;\n      const slices = [];\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n      this.workers_[i].postMessage(\n        {\n          buffers: slices,\n          meta: job.meta,\n          imageOps: this.imageOps_,\n          width: width,\n          height: height,\n        },\n        slices,\n      );\n    }\n  }\n\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n  onWorkerMessage_(index, event) {\n    if (this.disposed) {\n      return;\n    }\n    this.dataLookup_[index] = event.data;\n    --this.running_;\n    if (this.running_ === 0) {\n      this.resolveJob_();\n    }\n  }\n\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n  resolveJob_() {\n    const job = this.job_;\n    const threads = this.workers_.length;\n    let data, meta;\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this.dataLookup_[0]['buffer']);\n      meta = this.dataLookup_[0]['meta'];\n    } else {\n      const length = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length);\n      meta = new Array(threads);\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (let i = 0; i < threads; ++i) {\n        const buffer = this.dataLookup_[i]['buffer'];\n        const offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this.dataLookup_[i]['meta'];\n      }\n    }\n    this.job_ = null;\n    this.dataLookup_ = {};\n    job.callback(\n      null,\n      new ImageData(data, job.inputs[0].width, job.inputs[0].height),\n      meta,\n    );\n    this.dispatch_();\n  }\n\n  /**\n   * Terminate all workers associated with the processor.\n   * @override\n   */\n  disposeInternal() {\n    for (let i = 0; i < this.workers_.length; ++i) {\n      this.workers_[i].terminate();\n    }\n    this.workers_.length = 0;\n  }\n}\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations',\n};\n\n/**\n * @typedef {'pixel' | 'image'} RasterOperationType\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n */\n\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\nexport class RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    this.data = data;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only\n * be run at the given resolutions.  By default, the resolutions of the first source with resolutions\n * specified will be used, if any. Set to `null` to use any view resolution instead.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null,\n    });\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Processor}\n     */\n    this.processor_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    this.operationType_ =\n      options.operationType !== undefined ? options.operationType : 'pixel';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    this.layers_ = createLayers(options.sources);\n\n    const changed = this.changed.bind(this);\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useResolutions_ = options.resolutions !== null;\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, this.processSources_.bind(this));\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../Map.js\").FrameState}\n     * @private\n     */\n    this.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    this.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     * @private\n     */\n    this.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").FrameState}\n     */\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutter: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */ ({\n        rotation: 0,\n      }),\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(this),\n      renderTargets: {},\n    };\n\n    this.setAttributions(function (frameState) {\n      /** @type {Array<string>} */\n      const attributions = [];\n      for (let i = 0, iMax = options.sources.length; i < iMax; ++i) {\n        const sourceOrLayer = options.sources[i];\n        const source =\n          sourceOrLayer instanceof Source\n            ? sourceOrLayer\n            : sourceOrLayer.getSource();\n        if (!source) {\n          continue;\n        }\n        const sourceAttributions = source.getAttributions()?.(frameState);\n        if (typeof sourceAttributions === 'string') {\n          attributions.push(sourceAttributions);\n        } else if (sourceAttributions !== undefined) {\n          attributions.push(...sourceAttributions);\n        }\n      }\n      return attributions;\n    });\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  setOperation(operation, lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === 'image',\n      queue: 1,\n      lib: lib,\n      threads: this.threads_,\n    });\n    this.changed();\n  }\n\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\n   * @private\n   */\n  updateFrameState_(extent, resolution, projection) {\n    const frameState = /** @type {import(\"../Map.js\").FrameState} */ (\n      Object.assign({}, this.frameState_)\n    );\n\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (\n      Object.assign({}, frameState.viewState)\n    );\n\n    const center = getCenter(extent);\n\n    frameState.size[0] = Math.ceil(getWidth(extent) / resolution);\n    frameState.size[1] = Math.ceil(getHeight(extent) / resolution);\n    frameState.extent = [\n      center[0] - (frameState.size[0] * resolution) / 2,\n      center[1] - (frameState.size[1] * resolution) / 2,\n      center[0] + (frameState.size[0] * resolution) / 2,\n      center[1] + (frameState.size[1] * resolution) / 2,\n    ];\n    frameState.time = Date.now();\n\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (!source || source.getState() !== 'ready') {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   * @override\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    this.tileQueue_.loadMoreTiles(16, 16);\n\n    resolution = this.findNearestResolution(resolution);\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (\n        resolution !== renderedResolution ||\n        !equals(frameState.extent, renderedExtent)\n      ) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (\n      !this.renderedImageCanvas_ ||\n      this.getRevision() !== this.renderedRevision_\n    ) {\n      this.processSources_();\n    }\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n\n  /**\n   * Start processing source data.\n   * @private\n   */\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.layers_.length;\n    const imageDatas = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      frameState.renderTargets = {};\n      const imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data),\n    );\n    this.processor_.process(\n      imageDatas,\n      data,\n      this.onWorkerComplete_.bind(this, frameState),\n    );\n  }\n\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n\n    // do nothing if extent or resolution changed\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    if (\n      resolution !== this.requestedFrameState_.viewState.resolution ||\n      !equals(extent, this.requestedFrameState_.extent)\n    ) {\n      return;\n    }\n\n    let context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(\n        extent,\n        resolution,\n        1,\n        context.canvas,\n      );\n    }\n    context.putImageData(output, 0, 0);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    } else {\n      this.changed();\n    }\n    this.renderedRevision_ = this.getRevision();\n\n    this.dispatchEvent(\n      new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data),\n    );\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions(projection) {\n    if (!this.useResolutions_) {\n      return null;\n    }\n    let resolutions = super.getResolutions();\n    if (!resolutions) {\n      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\n        const source = this.layers_[i].getSource();\n        resolutions = source.getResolutions(projection);\n        if (resolutions) {\n          break;\n        }\n      }\n    }\n    return resolutions;\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n    super.disposeInternal();\n  }\n}\n\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nlet sharedContext = null;\n\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  const renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n  if (width === 0 || height === 0) {\n    return null;\n  }\n  const container = renderer.renderFrame(frameState, null);\n  let element;\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n      const context = element.getContext('2d');\n      return context.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height, undefined, {\n      willReadFrequently: true,\n    });\n  } else {\n    const canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height, undefined, {\n        willReadFrequently: true,\n      });\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  const len = sources.length;\n  const layers = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  let layer;\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({source: layerOrSource});\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({source: layerOrSource});\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\n\nexport default RasterSource;\n"],"names":["LRUCache","constructor","highWaterMark","this","undefined","count_","entries_","oldest_","newest_","deleteOldest","entry","pop","dispose","canExpireCache","getCount","expireCache","keep","clear","containsKey","key","hasOwnProperty","forEach","f","value_","key_","newer","get","options","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","set","setSize","size","asImageLike","data","Image","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","asArrayLike","Uint8Array","Uint8ClampedArray","Float32Array","DataView","disposedError","Error","sharedContext","toArray","image","width","height","willReadFrequently","canvas","clearRect","drawImage","getImageData","defaultSize","DataTile","state","IDLE","super","tileCoord","transition","interpolate","loader_","loader","data_","error_","size_","controller_","controller","getSize","imageData","getData","getError","load","ERROR","LOADING","changed","self","then","LOADED","catch","error","disposeInternal","abort","fromResolutionLike","resolution","isArray","Math","min","DEFAULT_WMS_VERSION","DECIMALS","ImageCanvas","extent","pixelRatio","canvas_","handleLoad_","err","bind","getImage","ReprojImage","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","ImageState","EMPTY","sourcePixelRatio","getPixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","sourceListenerKey_","unlistenSource_","getProjection","reproject_","sourceState","getState","getResolution","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","attributions","projection","on","once","un","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","length","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getImageInternal","getRevision","getInterpolate","requestExtent","getRequestExtent","requestResolution","addEventListener","handleImageChange","event","loading","hasListener","dispatchEvent","defaultImageLoadFunction","src","ratio","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight","createMinion","operation","buffers","meta","imageOps","numBuffers","numBytes","byteLength","images","b","ImageData","output","buffer","arrays","pixels","j","array","pixel","createWorker","config","onMessage","lib","Object","map","name","toString","lines","concat","worker","Worker","Blob","Buffer","from","join","URL","createObjectURL","createFauxWorker","minion","terminated","postMessage","setTimeout","terminate","Processor","threads","imageOps_","workers","onWorkerMessage_","workers_","queue_","maxQueueLength_","queue","running_","dataLookup_","job_","process","inputs","callback","enqueue_","dispatch_","job","push","shift","input","segmentLength","ceil","offset","slices","jj","index","disposed","resolveJob_","RasterEventType","BEFOREOPERATIONS","AFTEROPERATIONS","RasterSourceEvent","frameState","viewState","RasterSource","processor_","operationType_","operationType","threads_","layers_","createLayers","sources","ii","useResolutions_","tileQueue_","processSources_","requestedFrameState_","renderedImageCanvas_","renderedRevision_","frameState_","animate","coordinateToPixelTransform","declutter","layerIndex","layerStatesArray","getLayerStatesArray","pixelToCoordinateTransform","postRenderFunctions","tileQueue","time","Date","now","usedTiles","rotation","viewHints","wantedTiles","mapId","renderTargets","setAttributions","iMax","sourceOrLayer","source","getSource","sourceAttributions","getAttributions","setOperation","updateFrameState_","assign","allSourcesReady_","ready","loadMoreTiles","renderedResolution","renderedExtent","requestAnimationFrame","len","imageDatas","onWorkerComplete_","context","getContext","round","putImageData","prototype","layer","renderer","getRenderer","prepareFrame","container","renderFrame","element","firstElementChild","layers","getLayerState","createLayer","layerOrSource"],"sourceRoot":""}