{"version":3,"file":"js/8056.4c0a92c8.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/layer/WebGLTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/BaseTile.js"],"sourcesContent":["/**\n * @module ol/layer/WebGLTile\n */\nimport {ColorType, NumberType} from '../expr/expression.js';\nimport {\n  PALETTE_TEXTURE_ARRAY,\n  getStringNumberEquivalent,\n  newCompilationContext,\n  uniformNameForVariable,\n} from '../expr/gpu.js';\nimport LayerProperty from '../layer/Property.js';\nimport {expressionToGlsl} from '../render/webgl/compileUtil.js';\nimport WebGLTileLayerRenderer, {\n  Attributes,\n  Uniforms,\n} from '../renderer/webgl/TileLayer.js';\nimport BaseTileLayer from './BaseTile.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default<import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default>} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    bandCount: bandCount,\n  };\n\n  const pipeline = [];\n\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\n      `Missing variables in style (expected ${context.variables})`,\n    );\n  }\n\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`,\n  );\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`,\n    );\n  }\n\n  const functionDefintions = Object.keys(context.functions).map(\n    function (name) {\n      return context.functions[name];\n    },\n  );\n\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${\n        Uniforms.TILE_TEXTURE_ARRAY\n      }[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures,\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n\n    const style = options.style || {};\n    delete options.style;\n\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n\n    this.handleSourceUpdate_();\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_\n      ? typeof this.sources_ === 'function'\n        ? this.sources_(extent, resolution)\n        : this.sources_\n      : source\n        ? [source]\n        : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   * @override\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    const source = this.getSource();\n    if (source) {\n      if (source.getState() === 'loading') {\n        const onChange = () => {\n          if (source.getState() === 'ready') {\n            source.removeEventListener('change', onChange);\n            this.setStyle(this.style_);\n          }\n        };\n        source.addEventListener('change', onChange);\n      } else {\n        this.setStyle(this.style_);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0]\n      ? sources[0].bandCount\n      : 4;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.getCacheSize(),\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(\n        frameState.extent,\n        this.renderedResolution_,\n      ).filter((source) => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    if (this.hasRenderer()) {\n      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n      const renderer = this.getRenderer();\n      renderer.reset({\n        vertexShader: parsedStyle.vertexShader,\n        fragmentShader: parsedStyle.fragmentShader,\n        uniforms: parsedStyle.uniforms,\n        paletteTextures: parsedStyle.paletteTextures,\n      });\n      this.changed();\n    }\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\n\nexport default WebGLTileLayer;\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true,\n    );\n  }\n\n  /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */\n  getCacheSize() {\n    return this.cacheSize_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n"],"names":["parseStyle","style","bandCount","vertexShader","TEXTURE_COORD","TILE_TRANSFORM","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","TEXTURE_RESOLUTION","TEXTURE_ORIGIN_X","TEXTURE_ORIGIN_Y","DEPTH","context","pipeline","undefined","color","push","contrast","exposure","saturation","gamma","brightness","uniforms","numVariables","Object","keys","variables","length","Error","i","variable","name","uniformName","value","uniformDeclarations","map","textureCount","Math","ceil","TILE_TEXTURE_ARRAY","paletteTextures","functionDefintions","functions","fragmentShader","RENDER_EXTENT","TRANSITION_ALPHA","RESOLUTION","ZOOM","join","WebGLTileLayer","constructor","options","assign","super","this","sources_","sources","renderedSource_","renderedResolution_","NaN","style_","styleVariables_","handleSourceUpdate_","addChangeListener","SOURCE","getSources","extent","resolution","source","getSource","getRenderSource","getSourceState","getState","hasRenderer","getRenderer","clearCache","onChange","removeEventListener","setStyle","addEventListener","getSourceBandCount_","max","Number","MAX_SAFE_INTEGER","createRenderer","parsedStyle","cacheSize","getCacheSize","renderSources","frameState","layerRenderer","canvas","ii","prepareFrame","renderFrame","render","target","rendered","viewState","ready","sourceState","changed","renderComplete","altSources","filter","includes","renderer","reset","updateStyleVariables","prototype","dispose","BaseTileLayer","baseOptions","preload","useInterimTilesOnError","on","once","un","cacheSize_","setPreload","setUseInterimTilesOnError","getPreload","get","PRELOAD","set","getUseInterimTilesOnError","USE_INTERIM_TILES_ON_ERROR","getData","pixel"],"sourceRoot":""}