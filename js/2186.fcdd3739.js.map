{"version":3,"file":"js/2186.fcdd3739.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/OGCMapTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/ogcTileUtil.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/net.js"],"sourcesContent":["/**\n * @module ol/source/OGCMapTile\n */\nimport {error as logError} from '../console.js';\nimport TileImage from './TileImage.js';\nimport {getTileSetInfo} from './ogcTileUtil.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} url URL to the OGC Map Tileset endpoint.\n * @property {Object} [context] A lookup of values to use in the tile URL template.  The `{tileMatrix}`\n * (zoom level), `{tileRow}`, and `{tileCol}` variables in the URL will always be provided by the source.\n * @property {string} [mediaType] The content type for the tiles (e.g. \"image/png\").  If not provided,\n * the source will try to find a link with rel=\"item\" that uses a supported image type.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. By default, the projection\n * will be derived from the `crs` of the `tileMatrixSet`.  You can override this by supplying\n * a projection to the constructor.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(tile, src) {\n *   tile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {Array<string>} [collections] A list of geospatial data sub-resources to include. If not provided, the entire dataset will\n * be included. This option is not applicable when requesting the tileset for a single collection.\n */\n\n/**\n * @classdesc\n * Layer source for map tiles from an [OGC API - Tiles](https://ogcapi.ogc.org/tiles/) service that provides \"map\" type tiles.\n * The service must conform to at least the core (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core)\n * and tileset (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset) conformance classes. For supporting the `collections`\n * option, the service must conform to the collections selection\n * (http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/collections-selection) conformance class.\n * @api\n */\nclass OGCMapTile extends TileImage {\n  /**\n   * @param {Options} options OGC map tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n    });\n\n    const sourceInfo = {\n      url: options.url,\n      projection: this.getProjection(),\n      mediaType: options.mediaType,\n      context: options.context || null,\n      collections: options.collections,\n    };\n\n    getTileSetInfo(sourceInfo)\n      .then(this.handleTileSetInfo_.bind(this))\n      .catch(this.handleError_.bind(this));\n  }\n\n  /**\n   * @param {import(\"./ogcTileUtil.js\").TileSetInfo} tileSetInfo Tile set info.\n   * @private\n   */\n  handleTileSetInfo_(tileSetInfo) {\n    this.tileGrid = tileSetInfo.grid;\n    this.projection = tileSetInfo.projection;\n    this.setTileUrlFunction(tileSetInfo.urlFunction, tileSetInfo.urlTemplate);\n    this.setState('ready');\n  }\n\n  /**\n   * @private\n   * @param {Error} error The error.\n   */\n  handleError_(error) {\n    logError(error);\n    this.setState('error');\n  }\n}\n\nexport default OGCMapTile;\n","/**\n * @module ol/source/ogcTileUtil\n */\n\nimport {error as logError} from '../console.js';\nimport {getIntersection as intersectExtents} from '../extent.js';\nimport {getJSON, resolveUrl} from '../net.js';\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\n\n/**\n * See https://ogcapi.ogc.org/tiles/.\n */\n\n/**\n * @typedef {'map' | 'vector'} TileType\n */\n\n/**\n * @typedef {'topLeft' | 'bottomLeft'} CornerOfOrigin\n */\n\n/**\n * @typedef {Object} TileSet\n * @property {TileType} dataType Type of data represented in the tileset.\n * @property {string} [tileMatrixSetDefinition] Reference to a tile matrix set definition.\n * @property {TileMatrixSet} [tileMatrixSet] Tile matrix set definition.\n * @property {Array<TileMatrixSetLimit>} [tileMatrixSetLimits] Tile matrix set limits.\n * @property {Array<Link>} links Tileset links.\n */\n\n/**\n * @typedef {Object} Link\n * @property {string} rel The link rel attribute.\n * @property {string} href The link URL.\n * @property {string} type The link type.\n */\n\n/**\n * @typedef {Object} TileMatrixSetLimit\n * @property {string} tileMatrix The tile matrix id.\n * @property {number} minTileRow The minimum tile row.\n * @property {number} maxTileRow The maximum tile row.\n * @property {number} minTileCol The minimum tile column.\n * @property {number} maxTileCol The maximum tile column.\n */\n\n/**\n * @typedef {Object} TileMatrixSet\n * @property {string} id The tile matrix set identifier.\n * @property {string|CrsUri|CrsWkt|CrsReferenceSystem} crs The coordinate reference system.\n * @property {Array<string>} [orderedAxes] Axis order.\n * @property {Array<TileMatrix>} tileMatrices Array of tile matrices.\n */\n\n/**\n * @typedef {Object} CrsUri\n * @property {string} uri Reference to one coordinate reference system (CRS).\n */\n\n/**\n * @typedef {Object} CrsWkt\n * @property {Object} wkt JSON encoding for WKT representation of CRS 2.0.\n */\n\n/**\n * @typedef {Object} CrsReferenceSystem\n * @property {Object} referenceSystem Data structure as defined in the MD_ReferenceSystem of the ISO 19115.\n */\n\n/**\n * @typedef {Object} TileMatrix\n * @property {string} id The tile matrix identifier.\n * @property {number} cellSize The pixel resolution (map units per pixel).\n * @property {Array<number>} pointOfOrigin The map location of the matrix origin.\n * @property {CornerOfOrigin} [cornerOfOrigin='topLeft'] The corner of the matrix that represents the origin ('topLeft' or 'bottomLeft').\n * @property {number} matrixWidth The number of columns.\n * @property {number} matrixHeight The number of rows.\n * @property {number} tileWidth The pixel width of a tile.\n * @property {number} tileHeight The pixel height of a tile.\n */\n\n/**\n * @type {Object<string, boolean>}\n */\nconst knownMapMediaTypes = {\n  'image/png': true,\n  'image/jpeg': true,\n  'image/gif': true,\n  'image/webp': true,\n};\n\n/**\n * @type {Object<string, boolean>}\n */\nconst knownVectorMediaTypes = {\n  'application/vnd.mapbox-vector-tile': true,\n  'application/geo+json': true,\n};\n\n/**\n * @typedef {Object} TileSetInfo\n * @property {string} urlTemplate The tile URL template.\n * @property {import(\"../proj/Projection.js\").default} projection The source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid The tile grid.\n * @property {import(\"../Tile.js\").UrlFunction} urlFunction The tile URL function.\n */\n\n/**\n * @typedef {Object} SourceInfo\n * @property {string} url The tile set URL.\n * @property {string} mediaType The preferred tile media type.\n * @property {Array<string>} [supportedMediaTypes] The supported media types.\n * @property {import(\"../proj/Projection.js\").default} projection The source projection.\n * @property {Object} [context] Optional context for constructing the URL.\n * @property {Array<string>} [collections] Optional collections to append the URL with.\n */\n\n/**\n * @param {string} tileUrlTemplate Tile URL template.\n * @param {Array<string>} collections List of collections to include as query parameter.\n * @return {string} The tile URL template with appended collections query parameter.\n */\nexport function appendCollectionsQueryParam(tileUrlTemplate, collections) {\n  if (!collections.length) {\n    return tileUrlTemplate;\n  }\n\n  // making sure we can always construct a URL instance.\n  const url = new URL(tileUrlTemplate, 'file:/');\n\n  if (url.pathname.split('/').includes('collections')) {\n    logError(\n      'The \"collections\" query parameter cannot be added to collection endpoints',\n    );\n    return tileUrlTemplate;\n  }\n  // According to conformance class\n  // http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/collections-selection\n  // commata in the identifiers of the `collections` query parameter\n  // need to be URLEncoded, while the commata separating the identifiers\n  // should not.\n  const encodedCollections = collections\n    .map((c) => encodeURIComponent(c))\n    .join(',');\n\n  url.searchParams.append('collections', encodedCollections);\n  const baseUrl = tileUrlTemplate.split('?')[0];\n  const queryParams = decodeURIComponent(url.searchParams.toString());\n  return `${baseUrl}?${queryParams}`;\n}\n\n/**\n * @param {Array<Link>} links Tileset links.\n * @param {string} [mediaType] The preferred media type.\n * @param {Array<string>} [collections] Optional collections to append the URL with.\n * @return {string} The tile URL template.\n */\nexport function getMapTileUrlTemplate(links, mediaType, collections) {\n  let tileUrlTemplate;\n  let fallbackUrlTemplate;\n  for (let i = 0; i < links.length; ++i) {\n    const link = links[i];\n    if (link.rel === 'item') {\n      if (link.type === mediaType) {\n        tileUrlTemplate = link.href;\n        break;\n      }\n      if (knownMapMediaTypes[link.type]) {\n        fallbackUrlTemplate = link.href;\n      } else if (!fallbackUrlTemplate && link.type.startsWith('image/')) {\n        fallbackUrlTemplate = link.href;\n      }\n    }\n  }\n\n  if (!tileUrlTemplate) {\n    if (fallbackUrlTemplate) {\n      tileUrlTemplate = fallbackUrlTemplate;\n    } else {\n      throw new Error('Could not find \"item\" link');\n    }\n  }\n\n  if (collections) {\n    tileUrlTemplate = appendCollectionsQueryParam(tileUrlTemplate, collections);\n  }\n\n  return tileUrlTemplate;\n}\n\n/**\n * @param {Array<Link>} links Tileset links.\n * @param {string} [mediaType] The preferred media type.\n * @param {Array<string>} [supportedMediaTypes] The media types supported by the parser.\n * @param {Array<string>} [collections] Optional collections to append the URL with.\n * @return {string} The tile URL template.\n */\nexport function getVectorTileUrlTemplate(\n  links,\n  mediaType,\n  supportedMediaTypes,\n  collections,\n) {\n  let tileUrlTemplate;\n  let fallbackUrlTemplate;\n\n  /**\n   * Lookup of URL by media type.\n   * @type {Object<string, string>}\n   */\n  const hrefLookup = {};\n\n  for (let i = 0; i < links.length; ++i) {\n    const link = links[i];\n    hrefLookup[link.type] = link.href;\n    if (link.rel === 'item') {\n      if (link.type === mediaType) {\n        tileUrlTemplate = link.href;\n        break;\n      }\n      if (knownVectorMediaTypes[link.type]) {\n        fallbackUrlTemplate = link.href;\n      }\n    }\n  }\n\n  if (!tileUrlTemplate && supportedMediaTypes) {\n    for (let i = 0; i < supportedMediaTypes.length; ++i) {\n      const supportedMediaType = supportedMediaTypes[i];\n      if (hrefLookup[supportedMediaType]) {\n        tileUrlTemplate = hrefLookup[supportedMediaType];\n        break;\n      }\n    }\n  }\n\n  if (!tileUrlTemplate) {\n    if (fallbackUrlTemplate) {\n      tileUrlTemplate = fallbackUrlTemplate;\n    } else {\n      throw new Error('Could not find \"item\" link');\n    }\n  }\n\n  if (collections) {\n    tileUrlTemplate = appendCollectionsQueryParam(tileUrlTemplate, collections);\n  }\n\n  return tileUrlTemplate;\n}\n\n/**\n * @param {SourceInfo} sourceInfo The source info.\n * @param {TileMatrixSet} tileMatrixSet Tile matrix set.\n * @param {string} tileUrlTemplate Tile URL template.\n * @param {Array<TileMatrixSetLimit>} [tileMatrixSetLimits] Tile matrix set limits.\n * @return {TileSetInfo} Tile set info.\n */\nfunction parseTileMatrixSet(\n  sourceInfo,\n  tileMatrixSet,\n  tileUrlTemplate,\n  tileMatrixSetLimits,\n) {\n  let projection = sourceInfo.projection;\n  if (!projection) {\n    if (typeof tileMatrixSet.crs === 'string') {\n      projection = getProjection(tileMatrixSet.crs);\n    } else if ('uri' in tileMatrixSet.crs) {\n      projection = getProjection(tileMatrixSet.crs.uri);\n    }\n    if (!projection) {\n      throw new Error(`Unsupported CRS: ${JSON.stringify(tileMatrixSet.crs)}`);\n    }\n  }\n  const orderedAxes = tileMatrixSet.orderedAxes;\n  const axisOrientation = orderedAxes\n    ? orderedAxes\n        .slice(0, 2)\n        .map((s) => s.replace(/E|X|Lon/i, 'e').replace(/N|Y|Lat/i, 'n'))\n        .join('')\n    : projection.getAxisOrientation();\n  const backwards = !axisOrientation.startsWith('en');\n\n  const matrices = tileMatrixSet.tileMatrices;\n\n  /**\n   * @type {Object<string, TileMatrix>}\n   */\n  const matrixLookup = {};\n  for (let i = 0; i < matrices.length; ++i) {\n    const matrix = matrices[i];\n    matrixLookup[matrix.id] = matrix;\n  }\n\n  /**\n   * @type {Object<string, TileMatrixSetLimit>}\n   */\n  const limitLookup = {};\n\n  /**\n   * @type {Array<string>}\n   */\n  const matrixIds = [];\n\n  if (tileMatrixSetLimits) {\n    for (let i = 0; i < tileMatrixSetLimits.length; ++i) {\n      const limit = tileMatrixSetLimits[i];\n      const id = limit.tileMatrix;\n      matrixIds.push(id);\n      limitLookup[id] = limit;\n    }\n  } else {\n    for (let i = 0; i < matrices.length; ++i) {\n      const id = matrices[i].id;\n      matrixIds.push(id);\n    }\n  }\n\n  const length = matrixIds.length;\n  const origins = new Array(length);\n  const resolutions = new Array(length);\n  const sizes = new Array(length);\n  const tileSizes = new Array(length);\n  const extent = [-Infinity, -Infinity, Infinity, Infinity];\n\n  for (let i = 0; i < length; ++i) {\n    const id = matrixIds[i];\n    const matrix = matrixLookup[id];\n    const origin = matrix.pointOfOrigin;\n    if (backwards) {\n      origins[i] = [origin[1], origin[0]];\n    } else {\n      origins[i] = origin;\n    }\n    resolutions[i] = matrix.cellSize;\n    sizes[i] = [matrix.matrixWidth, matrix.matrixHeight];\n    tileSizes[i] = [matrix.tileWidth, matrix.tileHeight];\n    const limit = limitLookup[id];\n    if (limit) {\n      const tileMapWidth = matrix.cellSize * matrix.tileWidth;\n      const minX = origins[i][0] + limit.minTileCol * tileMapWidth;\n      const maxX = origins[i][0] + (limit.maxTileCol + 1) * tileMapWidth;\n\n      const tileMapHeight = matrix.cellSize * matrix.tileHeight;\n      const upsideDown = matrix.cornerOfOrigin === 'bottomLeft';\n\n      let minY;\n      let maxY;\n      if (upsideDown) {\n        minY = origins[i][1] + limit.minTileRow * tileMapHeight;\n        maxY = origins[i][1] + (limit.maxTileRow + 1) * tileMapHeight;\n      } else {\n        minY = origins[i][1] - (limit.maxTileRow + 1) * tileMapHeight;\n        maxY = origins[i][1] - limit.minTileRow * tileMapHeight;\n      }\n\n      intersectExtents(extent, [minX, minY, maxX, maxY], extent);\n    }\n  }\n\n  const tileGrid = new TileGrid({\n    origins: origins,\n    resolutions: resolutions,\n    sizes: sizes,\n    tileSizes: tileSizes,\n    extent: tileMatrixSetLimits ? extent : undefined,\n  });\n\n  const context = sourceInfo.context;\n  const base = sourceInfo.url;\n\n  /** @type {import('../Tile.js').UrlFunction} */\n  function tileUrlFunction(tileCoord, pixelRatio, projection) {\n    if (!tileCoord) {\n      return undefined;\n    }\n\n    const id = matrixIds[tileCoord[0]];\n    const matrix = matrixLookup[id];\n    const upsideDown = matrix.cornerOfOrigin === 'bottomLeft';\n\n    const localContext = {\n      tileMatrix: id,\n      tileCol: tileCoord[1],\n      tileRow: upsideDown ? -tileCoord[2] - 1 : tileCoord[2],\n    };\n\n    if (tileMatrixSetLimits) {\n      const limit = limitLookup[matrix.id];\n      if (\n        localContext.tileCol < limit.minTileCol ||\n        localContext.tileCol > limit.maxTileCol ||\n        localContext.tileRow < limit.minTileRow ||\n        localContext.tileRow > limit.maxTileRow\n      ) {\n        return undefined;\n      }\n    }\n\n    Object.assign(localContext, context);\n\n    const url = tileUrlTemplate.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return localContext[p];\n    });\n\n    return resolveUrl(base, url);\n  }\n\n  return {\n    grid: tileGrid,\n    projection: projection,\n    urlTemplate: tileUrlTemplate,\n    urlFunction: tileUrlFunction,\n  };\n}\n\n/**\n * @param {SourceInfo} sourceInfo The source info.\n * @param {TileSet} tileSet Tile set.\n * @return {TileSetInfo|Promise<TileSetInfo>} Tile set info.\n */\nfunction parseTileSetMetadata(sourceInfo, tileSet) {\n  const tileMatrixSetLimits = tileSet.tileMatrixSetLimits;\n  /** @type {string} */\n  let tileUrlTemplate;\n\n  if (tileSet.dataType === 'map') {\n    tileUrlTemplate = getMapTileUrlTemplate(\n      tileSet.links,\n      sourceInfo.mediaType,\n      sourceInfo.collections,\n    );\n  } else if (tileSet.dataType === 'vector') {\n    tileUrlTemplate = getVectorTileUrlTemplate(\n      tileSet.links,\n      sourceInfo.mediaType,\n      sourceInfo.supportedMediaTypes,\n      sourceInfo.collections,\n    );\n  } else {\n    throw new Error('Expected tileset data type to be \"map\" or \"vector\"');\n  }\n\n  if (tileSet.tileMatrixSet) {\n    return parseTileMatrixSet(\n      sourceInfo,\n      tileSet.tileMatrixSet,\n      tileUrlTemplate,\n      tileMatrixSetLimits,\n    );\n  }\n\n  const tileMatrixSetLink = tileSet.links.find(\n    (link) =>\n      link.rel === 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme',\n  );\n  if (!tileMatrixSetLink) {\n    throw new Error(\n      'Expected http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme link or tileMatrixSet',\n    );\n  }\n  const tileMatrixSetDefinition = tileMatrixSetLink.href;\n\n  const url = resolveUrl(sourceInfo.url, tileMatrixSetDefinition);\n  return getJSON(url).then(function (tileMatrixSet) {\n    return parseTileMatrixSet(\n      sourceInfo,\n      tileMatrixSet,\n      tileUrlTemplate,\n      tileMatrixSetLimits,\n    );\n  });\n}\n\n/**\n * @param {SourceInfo} sourceInfo Source info.\n * @return {Promise<TileSetInfo>} Tile set info.\n */\nexport function getTileSetInfo(sourceInfo) {\n  return getJSON(sourceInfo.url).then(function (tileSet) {\n    return parseTileSetMetadata(sourceInfo, tileSet);\n  });\n}\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/net\n */\nimport {getUid} from './util.js';\n\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n  script.async = true;\n  script.src =\n    url +\n    (url.includes('?') ? '&' : '?') +\n    (callbackParam || 'callback') +\n    '=' +\n    key;\n  const timer = setTimeout(function () {\n    cleanup();\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n  document.head.appendChild(script);\n}\n\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ResponseError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.response = response;\n  }\n}\n\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ClientError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.client = client;\n  }\n}\n\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\n        let data;\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n  return new URL(url, base).href;\n}\n\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n  global.XMLHttpRequest = xhr;\n}\n\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}\n"],"names":["OGCMapTile","constructor","options","super","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","wrapX","undefined","transition","sourceInfo","url","this","getProjection","mediaType","context","collections","getTileSetInfo","then","handleTileSetInfo_","bind","catch","handleError_","tileSetInfo","tileGrid","grid","setTileUrlFunction","urlFunction","urlTemplate","setState","error","knownMapMediaTypes","knownVectorMediaTypes","appendCollectionsQueryParam","tileUrlTemplate","length","URL","pathname","split","includes","encodedCollections","map","c","encodeURIComponent","join","searchParams","append","baseUrl","queryParams","decodeURIComponent","toString","getMapTileUrlTemplate","links","fallbackUrlTemplate","i","link","rel","type","href","startsWith","Error","getVectorTileUrlTemplate","supportedMediaTypes","hrefLookup","supportedMediaType","parseTileMatrixSet","tileMatrixSet","tileMatrixSetLimits","crs","uri","JSON","stringify","orderedAxes","axisOrientation","slice","s","replace","getAxisOrientation","backwards","matrices","tileMatrices","matrixLookup","matrix","id","limitLookup","matrixIds","limit","tileMatrix","push","origins","Array","resolutions","sizes","tileSizes","extent","Infinity","origin","pointOfOrigin","cellSize","matrixWidth","matrixHeight","tileWidth","tileHeight","tileMapWidth","minX","minTileCol","maxX","maxTileCol","tileMapHeight","upsideDown","cornerOfOrigin","minY","maxY","minTileRow","maxTileRow","base","tileUrlFunction","tileCoord","pixelRatio","localContext","tileCol","tileRow","Object","assign","m","p","parseTileSetMetadata","tileSet","dataType","tileMatrixSetLink","find","tileMatrixSetDefinition","TILELOADSTART","TILELOADEND","TILELOADERROR","TileImage","defaultTileLoadFunction","tilePixelRatio","urls","key","attributionsCollapsible","zDirection","tileClass","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","getGutterForProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","z","x","y","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","getTile","sourceProjection","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","event","uid","tileState","getState","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setKey","jsonp","callback","errback","callbackParam","script","document","createElement","cleanup","window","parentNode","removeChild","async","timer","setTimeout","data","clearTimeout","head","appendChild","ResponseError","response","message","status","name","ClientError","client","getJSON","Promise","resolve","reject","onLoad","target","parse","responseText","err","onError","XMLHttpRequest","open","setRequestHeader","send","resolveUrl"],"sourceRoot":""}