{"version":3,"file":"js/702.8172ec52.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/XYZ.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/XYZ\n */\n\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\n * instead.  Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Not used if `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\n * may be used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\n * url option instead.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case\n * a `tileUrlFunction` can be used, such as:\n * ```js\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\n *  }\n * ```\n * @api\n */\nclass XYZ extends TileImage {\n  /**\n   * @param {Options} [options] XYZ options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    const projection =\n      options.projection !== undefined ? options.projection : 'EPSG:3857';\n\n    const tileGrid =\n      options.tileGrid !== undefined\n        ? options.tileGrid\n        : createXYZ({\n            extent: extentFromProjection(projection),\n            maxResolution: options.maxResolution,\n            maxZoom: options.maxZoom,\n            minZoom: options.minZoom,\n            tileSize: options.tileSize,\n          });\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n  }\n\n  /**\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n}\n\nexport default XYZ;\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n"],"names":["XYZ","constructor","options","projection","undefined","tileGrid","extent","maxResolution","maxZoom","minZoom","tileSize","super","attributions","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","attributionsCollapsible","zDirection","this","gutter_","gutter","getGutter","TileImage","state","defaultTileLoadFunction","key","tileClass","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","getGutterForProjection","getProjection","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","event","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey","join"],"sourceRoot":""}