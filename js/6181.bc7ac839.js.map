{"version":3,"file":"js/6181.bc7ac839.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/tilegrid/WMTS.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/WMTS.js"],"sourcesContent":["/**\n * @module ol/tilegrid/WMTS\n */\n\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from './TileGrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits,\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().startsWith('ne');\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight],\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","/**\n * @module ol/source/WMTS\n */\n\nimport {containsExtent} from '../extent.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {appendParams, expandUrl} from '../uri.js';\nimport TileImage from './TileImage.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   * @override\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this)),\n      ),\n      key,\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return encodeURIComponent(localContext[p]);\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers?.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().startsWith('ne');\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix,\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326',\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits,\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n"],"names":["WMTSTileGrid","TileGrid","constructor","options","super","extent","origin","origins","resolutions","tileSize","tileSizes","sizes","this","matrixIds_","matrixIds","getMatrixId","z","getMatrixIds","createFromCapabilitiesMatrixSet","matrixSet","matrixLimits","undefined","supportedCRSPropName","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","tileWidthPropName","tileHeightPropName","code","projection","metersPerUnit","getMetersPerUnit","switchOriginXY","getAxisOrientation","startsWith","sort","a","b","forEach","elt","matrixAvailable","length","find","elt_ml","includes","push","resolution","tileWidth","tileHeight","TileImage","requestEncoding","tileGrid","urls","url","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","style_","style","requestEncoding_","setKey","getKeyForDimensions_","tileUrlFunction","map","createFromWMTSTemplate","bind","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","res","slice","updateDimensions","Object","assign","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext","encodeURIComponent","optionsFromCapabilities","wmtsCap","config","layers","l","tileMatrixSets","idx","findIndex","tileMatrixSet","el","supportedCRS","proj1","proj2","index","array","value","matrixSets","matrixSetObj","projConfig","switchXY","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","ScaleDenominator","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","wgs84BoundingBox","wgs84ProjectionExtent","getExtent","wgs84MatrixSetExtent","gets","i","ii","constraint","element","encodings"],"sourceRoot":""}