{"version":3,"file":"js/1789.9a7d11b3.js","mappings":"sNA6CA,MAAMA,EAAW,CACfC,KAAM,OACNC,SAAU,WACVC,OAAQ,UAOJC,EAAmB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAgB1D,MAAMC,UAAgB,aAIpB,WAAAC,CAAYC,GACVA,EAAUA,GAAoB,CAAC,EAE/B,MAAMC,EAAcC,OAAOC,OAAO,CAAC,EAAGH,UAE/BC,EAAYG,gBACZH,EAAYI,cACZJ,EAAYK,YACZL,EAAYM,OACnBC,MAAMP,GAMNQ,KAAKC,UAAY,KAEjBD,KAAKE,kBAAkBlB,EAASE,SAAUc,KAAKG,wBAE/CH,KAAKI,YAAYb,EAAQI,SAAWJ,EAAQI,SAAWP,GAEvDY,KAAKK,aAAyBC,IAAjBf,EAAQM,KAAqBN,EAAQM,KAAO,IAEzDG,KAAKO,eAA6BD,IAAnBf,EAAQK,OAAuBL,EAAQK,OAAS,GAE/D,MAAME,EAASP,EAAQO,OAASP,EAAQO,OAAS,SAKjDE,KAAKQ,gBACe,kBAAXV,EAKFW,GAAYA,EAAQC,IAAIZ,GACzBA,EAINE,KAAKW,eAAe,KACtB,CAQA,OAAAC,GACE,OAA8BZ,KAAKU,IAAI1B,EAASC,KAClD,CAQA,WAAA4B,GACE,OAAqCb,KAAKU,IAAI1B,EAASE,SACzD,CAQA,SAAA4B,GACE,OAA8Bd,KAAKU,IAAI1B,EAASG,OAClD,CAKA,sBAAAgB,GACEH,KAAKC,UAAYc,EAAef,KAAKa,cACvC,CAQA,OAAAR,CAAQR,GACNG,KAAKgB,IAAIhC,EAASC,KAAMY,EAC1B,CAQA,WAAAO,CAAYa,GACVjB,KAAKgB,IAAIhC,EAASE,SAAU+B,EAC9B,CAQA,SAAAV,CAAUX,GACRI,KAAKgB,IAAIhC,EAASG,OAAQS,EAC5B,CAKA,cAAAsB,GACE,MAAMC,GAAU,IAAI,KACjBC,aAAa,kBACbC,WAAW,WAAY,QAAS,YAChCC,WAAW,gBACXA,WAAW,qBACXC,wBAAwB,gBACxBC,yBACC,kGAGJ,OAAO,IAAI,IAAyBxB,KAAM,CACxCyB,UAAWzB,KAAK0B,eAChBC,WAAY,CACV,CACEC,KAAM,SACNC,SAAWpB,IACT,MAAMX,EAASE,KAAKQ,gBAAgBC,GACpC,YAAkBH,IAAXR,GAAuB,QAAMA,EAAQ,EAAG,GAAK,KAI1DgC,SAAU,CACRC,OAAQ,IACyD,GAAvD/B,KAAKU,IAAI1B,EAASG,QAAUa,KAAKU,IAAI1B,EAASC,OAExD+C,YAAa,IAEThC,KAAKU,IAAI1B,EAASG,QAAU8C,KAAKC,IAAI,EAAGlC,KAAKU,IAAI1B,EAASC,QAIhEkD,qBAAqB,EACrBC,aAAcjB,EAAQkB,wBACtBC,eAAgBnB,EAAQoB,0BACxBC,cAAe,CACb,CACEF,eAAgB,2fAehBR,SAAU,CACRW,kBAAmB,IAAMzC,KAAKC,UAC9ByC,UAAW,IAAM1C,KAAK2C,iBAKhC,CAKA,eAAAC,GAAmB,EAOrB,SAAS7B,EAAeE,GACtB,MAAM4B,EAAQ,EACRC,EAAS,IACTC,GAAU,OAAsBF,EAAOC,GAEvCnD,EAAWoD,EAAQC,qBAAqB,EAAG,EAAGH,EAAOC,GACrDG,EAAO,GAAKhC,EAAOiC,OAAS,GAClC,IAAK,IAAIC,EAAI,EAAGC,EAAKnC,EAAOiC,OAAQC,EAAIC,IAAMD,EAC5CxD,EAAS0D,aAAaF,EAAIF,EAAMhC,EAAOkC,IAMzC,OAHAJ,EAAQO,UAAY3D,EACpBoD,EAAQQ,SAAS,EAAG,EAAGV,EAAOC,GAEvBC,EAAQS,MACjB,CAEA,c","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/layer/Heatmap.js"],"sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport {createCanvasContext2D} from '../dom.js';\nimport {clamp} from '../math.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {ShaderBuilder} from '../webgl/ShaderBuilder.js';\nimport BaseVector from './BaseVector.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {VectorSourceType} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius',\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\n * @extends {BaseVector<FeatureType, VectorSourceType, WebGLPointsLayerRenderer>}\n * @api\n */\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options<FeatureType, VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n\n    /**\n     * @private\n     */\n    this.weightFunction_ =\n      typeof weight === 'string'\n        ? /**\n           * @param {import('../Feature.js').default} feature Feature\n           * @return {any} weight\n           */\n          (feature) => feature.get(weight)\n        : weight;\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const builder = new ShaderBuilder()\n      .addAttribute('float a_weight')\n      .addVarying('v_weight', 'float', 'a_weight')\n      .addUniform('float u_size')\n      .addUniform('float u_blurSlope')\n      .setSymbolSizeExpression('vec2(u_size)')\n      .setSymbolColorExpression(\n        'vec4(smoothstep(0., 1., (1. - length(coordsPx * 2. / v_quadSizePx)) * u_blurSlope) * v_weight)',\n      );\n\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [\n        {\n          name: 'weight',\n          callback: (feature) => {\n            const weight = this.weightFunction_(feature);\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\n          },\n        },\n      ],\n      uniforms: {\n        u_size: () => {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        },\n        u_blurSlope: () => {\n          return (\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\n          );\n        },\n      },\n      hitDetectionEnabled: true,\n      vertexShader: builder.getSymbolVertexShader(),\n      fragmentShader: builder.getSymbolFragmentShader(),\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: () => this.gradient_,\n            u_opacity: () => this.getOpacity(),\n          },\n        },\n      ],\n    });\n  }\n\n  /**\n   * @override\n   */\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\nexport default Heatmap;\n"],"names":["Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","Heatmap","constructor","options","baseOptions","Object","assign","gradient","radius","blur","weight","super","this","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","getBlur","getGradient","getRadius","createGradient","set","colors","createRenderer","builder","addAttribute","addVarying","addUniform","setSymbolSizeExpression","setSymbolColorExpression","className","getClassName","attributes","name","callback","uniforms","u_size","u_blurSlope","Math","max","hitDetectionEnabled","vertexShader","getSymbolVertexShader","fragmentShader","getSymbolFragmentShader","postProcesses","u_gradientTexture","u_opacity","getOpacity","renderDeclutter","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas"],"sourceRoot":""}