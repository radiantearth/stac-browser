{"version":3,"file":"js/2364.84d1b7de.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/layer/BaseTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/TileProperty.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/TileGeometry.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/VectorTileLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/WebGLVectorTile.js"],"sourcesContent":["/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true,\n    );\n  }\n\n  /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */\n  getCacheSize() {\n    return this.cacheSize_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/webgl/TileGeometry\n */\n\nimport MixedGeometryBatch from '../render/webgl/MixedGeometryBatch.js';\nimport {\n  create as createTransform,\n  translate as translateTransform,\n} from '../transform.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport WebGLArrayBuffer from './Buffer.js';\n\n/**\n * @typedef {import(\"../VectorRenderTile\").default} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileGeometry extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   * @param {Array<import(\"../render/webgl/VectorStyleRenderer.js\").default>} styleRenderers Array of vector style renderers\n   */\n  constructor(options, styleRenderers) {\n    super(options);\n\n    /**\n     * @private\n     */\n    this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     */\n    this.styleRenderers_ = styleRenderers;\n\n    /**\n     * @type {Array<import(\"../render/webgl/VectorStyleRenderer.js\").WebGLBuffers>}\n     */\n    this.buffers = [];\n\n    /**\n     * Each geometry tile also has a mask which consisted of a quad (two triangles); this mask is intended to\n     * be rendered to an offscreen buffer, and be used to correctly mask tiles according to their zoom level\n     * during rendering\n     */\n    this.maskVertices = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @private\n   */\n  generateMaskBuffer_() {\n    const extent = this.tile.getSourceTiles()[0].extent;\n    this.maskVertices.fromArray([\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ]);\n    this.helper.flushBufferData(this.maskVertices);\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    this.generateMaskBuffer_();\n\n    this.batch_.clear();\n    const sourceTiles = this.tile.getSourceTiles();\n    const features = sourceTiles.reduce(\n      (accumulator, sourceTile) => accumulator.concat(sourceTile.getFeatures()),\n      [],\n    );\n    this.batch_.addFeatures(features);\n\n    const tileOriginX = sourceTiles[0].extent[0];\n    const tileOriginY = sourceTiles[0].extent[1];\n    const transform = translateTransform(\n      createTransform(),\n      -tileOriginX,\n      -tileOriginY,\n    );\n\n    const generatePromises = this.styleRenderers_.map((renderer, i) =>\n      renderer.generateBuffers(this.batch_, transform).then((buffers) => {\n        this.buffers[i] = buffers;\n      }),\n    );\n    Promise.all(generatePromises).then(() => {\n      this.setReady();\n    });\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.buffers.forEach((buffers) => {\n      this.disposeBuffers(buffers);\n    });\n    super.disposeInternal();\n  }\n\n  /**\n   * Will release a set of Webgl buffers\n   * @param {import('../render/webgl/VectorStyleRenderer.js').WebGLBuffers|null} buffers Buffers\n   */\n  disposeBuffers(buffers) {\n    if (!buffers) {\n      return;\n    }\n    /**\n     * @param {Array<WebGLArrayBuffer>} typeBuffers Buffers\n     */\n    const disposeBuffersOfType = (typeBuffers) => {\n      for (const buffer of typeBuffers) {\n        if (buffer) {\n          this.helper.deleteBuffer(buffer);\n        }\n      }\n    };\n    if (buffers.pointBuffers) {\n      disposeBuffersOfType(buffers.pointBuffers);\n    }\n    if (buffers.lineStringBuffers) {\n      disposeBuffersOfType(buffers.lineStringBuffers);\n    }\n    if (buffers.polygonBuffers) {\n      disposeBuffersOfType(buffers.polygonBuffers);\n    }\n  }\n}\n\nexport default TileGeometry;\n","/**\n * @module ol/renderer/webgl/VectorTileLayer\n */\nimport EventType from '../../events/EventType.js';\nimport {getIntersection} from '../../extent.js';\nimport {ShaderBuilder} from '../../render/webgl/ShaderBuilder.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport {\n  breakDownFlatStyle,\n  parseLiteralStyle,\n} from '../../render/webgl/style.js';\nimport {\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  setFromArray as setFromTransform,\n} from '../../transform.js';\nimport {\n  create as createMat4,\n  fromTransform as mat4FromTransform,\n} from '../../vec/mat4.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport TileGeometry from '../../webgl/TileGeometry.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport WebGLBaseTileLayerRenderer, {\n  Uniforms as BaseUniforms,\n} from './TileLayerBase.js';\n\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_MASK_TEXTURE: 'u_depthMask',\n  TILE_ZOOM_LEVEL: 'u_tileZoomLevel',\n};\n\nexport const Attributes = {\n  POSITION: 'a_position',\n};\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsShaders} StyleAsShaders\n */\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsRule} StyleAsRule\n */\n\n/**\n * @typedef {Object} Options\n * @property {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat vector style; also accepts shaders\n * @property {import('../../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {number} [cacheSize=512] The vector tile cache size.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} LayerType\n */\n\n/**\n * @classdesc\n * WebGL renderer for vector tile layers. Experimental.\n * @extends {WebGLBaseTileLayerRenderer<LayerType>}\n */\nclass WebGLVectorTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      cacheSize: options.cacheSize,\n      uniforms: {\n        [Uniforms.PATTERN_ORIGIN]: [0, 0],\n        [Uniforms.TILE_MASK_TEXTURE]: () => this.tileMaskTarget_.getTexture(),\n      },\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {Array<StyleAsRule | StyleAsShaders>}\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {import('../../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    this.styleRenderers_ = [];\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.tmpTransform_ = createTransform();\n    /**\n     * @private\n     */\n    this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.tileMaskTarget_ = null;\n\n    /**\n     * @private\n     */\n    this.tileMaskIndices_ = new WebGLArrayBuffer(\n      ELEMENT_ARRAY_BUFFER,\n      STATIC_DRAW,\n    );\n    this.tileMaskIndices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.tileMaskAttributes_ = [\n      {\n        name: Attributes.POSITION,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n    ];\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.tileMaskProgram_;\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n\n    this.applyOptions_(options);\n    if (this.helper) {\n      this.createRenderers_();\n      this.initTileMask_();\n    }\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @private\n   */\n  applyOptions_(options) {\n    this.styles_ = breakDownFlatStyle(options.style);\n  }\n\n  /**\n   * @private\n   */\n  createRenderers_() {\n    function addBuilderParams(builder) {\n      const exisitingDiscard = builder.getFragmentDiscardExpression();\n      const discardFromMask = `texture2D(${Uniforms.TILE_MASK_TEXTURE}, gl_FragCoord.xy / u_pixelRatio / u_viewportSizePx).r * 50. > ${Uniforms.TILE_ZOOM_LEVEL} + 0.5`;\n      builder.setFragmentDiscardExpression(\n        exisitingDiscard !== 'false'\n          ? `(${exisitingDiscard}) || (${discardFromMask})`\n          : discardFromMask,\n      );\n      builder.addUniform(Uniforms.TILE_MASK_TEXTURE, 'sampler2D');\n      builder.addUniform(Uniforms.TILE_ZOOM_LEVEL, 'float');\n    }\n\n    this.styleRenderers_ = this.styles_.map((style) => {\n      const isShaders = 'builder' in style;\n      /** @type {StyleAsShaders} */\n      let shaders;\n      if (!isShaders) {\n        const parseResult = parseLiteralStyle(\n          style.style,\n          this.styleVariables_,\n          style.filter,\n        );\n        addBuilderParams(parseResult.builder);\n        shaders = {\n          builder: parseResult.builder,\n          attributes: parseResult.attributes,\n          uniforms: parseResult.uniforms,\n        };\n      } else {\n        addBuilderParams(style.builder);\n        shaders = style;\n      }\n      return new VectorStyleRenderer(\n        shaders,\n        this.styleVariables_,\n        this.helper,\n        this.hitDetectionEnabled_,\n        'filter' in style ? style.filter : null,\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  initTileMask_() {\n    this.tileMaskTarget_ = new WebGLRenderTarget(this.helper);\n    const builder = new ShaderBuilder()\n      .setFillColorExpression(\n        `vec4(${Uniforms.TILE_ZOOM_LEVEL} / 50., 0., 0., 1.)`,\n      )\n      .addUniform(Uniforms.TILE_ZOOM_LEVEL, 'float');\n    this.tileMaskProgram_ = this.helper.getProgram(\n      builder.getFillFragmentShader(),\n      builder.getFillVertexShader(),\n    );\n    this.helper.flushBufferData(this.tileMaskIndices_);\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    this.createRenderers_();\n    this.initTileMask_();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    const tileRep = new TileGeometry(options, this.styleRenderers_);\n    // redraw the layer when the tile is ready\n    const listener = () => {\n      if (tileRep.ready) {\n        this.getLayer().changed();\n        tileRep.removeEventListener(EventType.CHANGE, listener);\n      }\n    };\n    tileRep.addEventListener(EventType.CHANGE, listener);\n    return tileRep;\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, true); // always consider that tiles need alpha blending\n    this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_,\n    );\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesMaskRender(frameState) {\n    this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_,\n    );\n    const pixelRatio = frameState.pixelRatio;\n    const size = frameState.size;\n    this.tileMaskTarget_.setSize([size[0] * pixelRatio, size[1] * pixelRatio]);\n    this.helper.prepareDrawToRenderTarget(\n      frameState,\n      this.tileMaskTarget_,\n      true,\n      true,\n    );\n    this.helper.useProgram(this.tileMaskProgram_, frameState);\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n    makeInverseTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n    this.helper.setUniformFloatValue(Uniforms.TILE_ZOOM_LEVEL, tileZ);\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, extent);\n    this.helper.setUniformFloatValue(Uniforms.GLOBAL_ALPHA, 1);\n    this.helper.bindBuffer(\n      /** @type {TileGeometry} */ (tileRepresentation).maskVertices,\n    );\n    this.helper.bindBuffer(this.tileMaskIndices_);\n    this.helper.enableAttributes(this.tileMaskAttributes_);\n    const renderCount = this.tileMaskIndices_.getSize();\n    this.helper.drawElements(0, renderCount);\n  }\n\n  /**\n   * @param {number} alpha Alpha value of the tile\n   * @param {import(\"../../extent.js\").Extent} renderExtent Which extent to restrict drawing to\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which tile geometries are expressed\n   * @param {number} tileZ Tile zoom level\n   * @param {number} depth Depth of the tile\n   * @private\n   */\n  applyUniforms_(alpha, renderExtent, batchInvertTransform, tileZ, depth) {\n    // world to screen matrix\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n\n    // screen to world matrix\n    makeInverseTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\n    );\n\n    this.helper.setUniformFloatValue(Uniforms.GLOBAL_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n    this.helper.setUniformFloatValue(Uniforms.TILE_ZOOM_LEVEL, tileZ);\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, renderExtent);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(\n    tileRepresentation,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {\n    const gutterExtent = getIntersection(tileExtent, renderExtent, tileExtent);\n    const tileZ = tileRepresentation.tile.getTileCoord()[0];\n    for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n      const renderer = this.styleRenderers_[i];\n      const buffers = tileRepresentation.buffers[i];\n      if (!buffers) {\n        continue;\n      }\n      renderer.render(buffers, frameState, () => {\n        this.applyUniforms_(\n          alpha,\n          gutterExtent,\n          buffers.invertVerticesTransform,\n          tileZ,\n          depth,\n        );\n      });\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLVectorTileLayerRenderer;\n","/**\n * @module ol/layer/WebGLVectorTile\n */\nimport WebGLVectorTileLayerRenderer from '../renderer/webgl/VectorTileLayer.js';\nimport BaseTileLayer from './BaseTile.js';\n\n/***\n * @template T\n * @typedef {T extends import(\"../source/Vector.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\n */\n\n/**\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * FIXME: not supported yet\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorTileSourceType} [source] Source.\n * @property {import('../style/flat.js').FlatStyleLike} style Layer style.\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLVector.js\").default#updateStyleVariables} method.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * FIXME: not supported yet\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large vector datasets.\n *\n * **Important: a `WebGLVector` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\n * @extends {BaseTileLayer<VectorTileSourceType, WebGLVectorTileLayerRenderer>}\n */\nclass WebGLVectorTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options<VectorTileSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n\n    super(baseOptions);\n\n    /**\n     * @type {import('../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @private\n     */\n    this.style_ = options.style;\n\n    /**\n     * @private\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new WebGLVectorTileLayerRenderer(this, {\n      style: this.style_,\n      variables: this.styleVariables_,\n      disableHitDetection: this.hitDetectionDisabled_,\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {import('../style/flat.js').StyleVariables} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n\n  /**\n   * Set the layer style.\n   * @param {import('../style/flat.js').FlatStyleLike} style Layer style.\n   */\n  setStyle(style) {\n    this.style_ = style;\n    this.clearRenderer();\n    this.changed();\n  }\n}\n\nexport default WebGLVectorTileLayer;\n"],"names":["BaseTileLayer","constructor","options","baseOptions","Object","assign","cacheSize","preload","useInterimTilesOnError","super","this","on","once","un","cacheSize_","setPreload","undefined","setUseInterimTilesOnError","getCacheSize","getPreload","get","PRELOAD","set","getUseInterimTilesOnError","USE_INTERIM_TILES_ON_ERROR","getData","pixel","TileGeometry","BaseTileRepresentation","styleRenderers","batch_","MixedGeometryBatch","styleRenderers_","buffers","maskVertices","setTile","tile","generateMaskBuffer_","extent","getSourceTiles","fromArray","helper","flushBufferData","uploadTile","clear","sourceTiles","features","reduce","accumulator","sourceTile","concat","getFeatures","addFeatures","tileOriginX","tileOriginY","transform","generatePromises","map","renderer","i","generateBuffers","then","Promise","all","setReady","disposeInternal","forEach","disposeBuffers","disposeBuffersOfType","typeBuffers","buffer","deleteBuffer","pointBuffers","lineStringBuffers","polygonBuffers","Uniforms","TILE_MASK_TEXTURE","TILE_ZOOM_LEVEL","Attributes","POSITION","WebGLVectorTileLayerRenderer","tileLayer","uniforms","PATTERN_ORIGIN","tileMaskTarget_","getTexture","hitDetectionEnabled_","disableHitDetection","styles_","styleVariables_","variables","currentFrameStateTransform_","tmpTransform_","tmpMat4_","tileMaskIndices_","tileMaskAttributes_","name","size","type","FLOAT","tileMaskProgram_","applyOptions_","reset","createRenderers_","initTileMask_","style","addBuilderParams","builder","exisitingDiscard","getFragmentDiscardExpression","discardFromMask","setFragmentDiscardExpression","addUniform","isShaders","shaders","parseResult","filter","attributes","VectorStyleRenderer","ShaderBuilder","setFillColorExpression","getProgram","getFillFragmentShader","getFillVertexShader","afterHelperCreated","createTileRepresentation","tileRep","listener","ready","getLayer","changed","removeEventListener","EventType","CHANGE","addEventListener","beforeTilesRender","frameState","tilesWithAlpha","makeProjectionTransform","beforeTilesMaskRender","pixelRatio","setSize","prepareDrawToRenderTarget","useProgram","setUniformMatrixValue","PROJECTION_MATRIX","mat4","SCREEN_TO_WORLD_MATRIX","renderTileMask","tileRepresentation","tileZ","depth","setUniformFloatValue","DEPTH","setUniformFloatVec4","RENDER_EXTENT","GLOBAL_ALPHA","bindBuffer","enableAttributes","renderCount","getSize","drawElements","applyUniforms_","alpha","renderExtent","batchInvertTransform","renderTile","tileTransform","tileResolution","tileSize","tileOrigin","tileExtent","gutter","gutterExtent","getTileCoord","ii","length","render","invertVerticesTransform","renderDeclutter","WebGLVectorTileLayer","BaseTile","style_","hitDetectionDisabled_","createRenderer","updateStyleVariables","setStyle","clearRenderer"],"sourceRoot":""}