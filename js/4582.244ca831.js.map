{"version":3,"file":"js/4582.244ca831.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/uri.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/ImageMapGuide.js","webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/mapguide.js"],"sourcesContent":["/**\n * @module ol/uri\n */\n\nimport {modulo} from './math.js';\nimport {hashZXY} from './tilecoord.js';\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {number} [maxY] The maximum y coordinate at the given z level.\n * @return {string} The URL.\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template\n    .replace(zRegEx, z.toString())\n    .replace(xRegEx, x.toString())\n    .replace(yRegEx, y.toString())\n    .replace(dashYRegEx, function () {\n      if (maxY === undefined) {\n        throw new Error(\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\n        );\n      }\n      return (maxY - y).toString();\n    });\n}\n\n/**\n * @param {Array<string>} urls List of URLs.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {string} The chosen URL.\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/source/ImageMapGuide\n */\n\nimport {decode} from '../Image.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './mapguide.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        hidpi: this.hidpi_,\n        metersPerUnit: this.metersPerUnit_,\n        url: this.url_,\n        useOverlay: this.useOverlay_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageMapGuide;\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n","/**\n * @module ol/source/mapguide\n */\n\nimport {decode} from '../Image.js';\nimport {getCenter, getHeight, getWidth} from '../extent.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  }\n  return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n}\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {boolean} useOverlay If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} displayDpi The display resolution.\n * @return {string} The mapagent map image request URL.\n */\nfunction getUrl(\n  baseUrl,\n  params,\n  extent,\n  size,\n  useOverlay,\n  metersPerUnit,\n  displayDpi,\n) {\n  const scale = getScale(extent, size, metersPerUnit, displayDpi);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': useOverlay ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': displayDpi,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1],\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapGuide images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const useOverlay = options.useOverlay ?? false;\n  const metersPerUnit = options.metersPerUnit || 1;\n  const displayDpi = options.displayDpi || 96;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(\n      options.url,\n      options.params,\n      extent,\n      size,\n      useOverlay,\n      metersPerUnit,\n      displayDpi,\n    );\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n"],"names":["appendParams","uri","params","keyParams","Object","keys","forEach","k","undefined","push","encodeURIComponent","qs","join","replace","includes","zRegEx","xRegEx","yRegEx","dashYRegEx","renderXYZTemplate","template","z","x","y","maxY","toString","Error","pickUrl","urls","hash","index","length","expandUrl","url","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","String","fromCharCode","stop","parseInt","i","ImageMapGuide","constructor","options","super","interpolate","projection","resolutions","this","crossOrigin_","crossOrigin","displayDpi_","displayDpi","params_","assign","url_","imageLoadFunction_","imageLoadFunction","defaultImageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","renderedRevision_","loaderProjection_","getParams","getImageInternal","extent","resolution","pixelRatio","loader","createLoader","load","image","src","setImage","getImageLoadFunction","updateParams","changed","setImageLoadFunction","fromResolutionLike","Array","isArray","Math","min","createOrUpdate","tileCoord","getKeyZXY","getKey","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY","DEFAULT_WMS_VERSION","DECIMALS","ReprojImage","Image","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","ImageState","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","width","height","getResolution","ERROR","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","attributions","on","once","un","resolutions_","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getRevision","dispose","getInterpolate","requestExtent","getRequestExtent","requestResolution","addEventListener","handleImageChange","bind","event","loading","hasListener","dispatchEvent","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight","getScale","size","dpi","mcsW","mcsH","devW","devH","mpp","getUrl","baseUrl","scale","baseParams","round","then"],"sourceRoot":""}