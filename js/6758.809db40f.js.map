{"version":3,"file":"js/6758.809db40f.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js","webpack://@radiantearth/stac-browser/./node_modules/ol/tilegrid/TileGrid.js","webpack://@radiantearth/stac-browser/./node_modules/ol/TileRange.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {toSize} from '../size.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        /**\n         * @param {number} a First resolution\n         * @param {number} b Second resolution\n         * @return {number} Comparison result\n         */\n        (a, b) => b - a,\n        true,\n      ),\n      '`resolutions` must be sorted in descending order',\n    );\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(\n        this.origins_.length == this.resolutions_.length,\n        'Number of `origins` and `resolutions` must be equal',\n      );\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      'Either `origin` or `origins` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(\n        this.tileSizes_.length == this.resolutions_.length,\n        'Number of `tileSizes` and `resolutions` must be equal',\n      );\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n          ? DEFAULT_TILE_SIZE\n          : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      'Either `tileSize` or `tileSizes` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1),\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      });\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    tempTileRange,\n    tempExtent,\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (x !== undefined && y !== undefined) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          tempTileRange,\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          tempTileRange,\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        tempExtent || this.tmpExtent_,\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        tempTileRange,\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        tempTileRange,\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord,\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0,\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord),\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n"],"names":["createOrUpdate","z","x","y","tileCoord","undefined","getKeyZXY","getKey","hash","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY","tmpTileCoord","DECIMALS","TileGrid","constructor","options","zoomFactor","this","minZoom","resolutions_","resolutions","a","b","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","size","Math","min","max","restrictedTileRange","getTileRangeForExtentAndZ","minX","maxX","minY","maxY","calculateTileRanges_","forEachTileCoord","zoom","callback","j","jj","forEachTileCoordParentTileRange","tempTileRange","tempExtent","tileCoordExtent","getTileCoordExtent","floor","getExtent","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","factor","pow","getTileCoordForXYAndZ_","getTileCoordCenter","resolution","getTileSize","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","getTileCoordForCoordAndZ","getTileCoordResolution","opt_direction","tileCoordIntersectsViewport","viewport","fullTileRanges","Array","TileRange","contains","containsTileRange","equals","extend","getHeight","getSize","getWidth","intersects"],"sourceRoot":""}