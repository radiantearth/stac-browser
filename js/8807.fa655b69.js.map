{"version":3,"file":"js/8807.fa655b69.js","mappings":"iOA2BO,SAASA,EAAaC,GAC3B,MAAMC,EAAOD,EAAQC,MAAQ,KACvBC,EAASF,EAAQG,YACjBC,EAAcJ,EAAQI,aAAe,KAE3C,MAAO,KACL,MAAMC,EAAQ,IAAIC,MAElB,OADAD,EAAMD,YAAcA,EACbH,EAAKI,EAAOL,EAAQO,KAAKC,KAAMH,IACpC,MAAMI,GAAc,QAASP,GAAUG,EAAMK,MACvCC,GAAc,QAAUT,GAAUG,EAAMO,OACxCC,EACJJ,IAAgBE,EAAc,CAACF,EAAaE,GAAeA,EAC7D,MAAO,CAACN,QAAOH,SAAQW,aAAYC,WAAY,KAGrD,C","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/static.js"],"sourcesContent":["/**\n * @module ol/source/static\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return () => {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, options.url).then((image) => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution =\n        resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {image, extent, resolution, pixelRatio: 1};\n    });\n  };\n}\n"],"names":["createLoader","options","load","extent","imageExtent","crossOrigin","image","Image","url","then","resolutionX","width","resolutionY","height","resolution","pixelRatio"],"sourceRoot":""}