{"version":3,"file":"js/2728.94a3021c.js","mappings":"oLAOA,cAMEA,cAAe,gBAQfC,YAAa,cASbC,cAAe,gB,wHCiCjB,MAAMC,UAAkB,aAItB,WAAAC,CAAYC,GACVC,MAAM,CACJC,aAAcF,EAAQE,aACtBC,UAAWH,EAAQG,UACnBC,WAAYJ,EAAQI,WACpBC,MAAOL,EAAQK,MACfC,SAAUN,EAAQM,SAClBC,iBAAkBP,EAAQO,iBACtBP,EAAQO,iBACRC,EACJC,eAAgBT,EAAQS,eACxBC,gBAAiBV,EAAQU,gBACzBC,IAAKX,EAAQW,IACbC,KAAMZ,EAAQY,KACdC,MAAOb,EAAQa,MACfC,WAAYd,EAAQc,WACpBC,iBAC0BC,IAAxBhB,EAAQe,aAA4Bf,EAAQe,YAC9CE,IAAKjB,EAAQiB,IACbC,wBAAyBlB,EAAQkB,wBACjCC,WAAYnB,EAAQmB,aAOtBC,KAAKC,iBACqBL,IAAxBhB,EAAQqB,YAA4BrB,EAAQqB,YAAc,KAM5DD,KAAKE,eACmBN,IAAtBhB,EAAQsB,UAA0BtB,EAAQsB,UAAY,IAMxDF,KAAKG,sBAAwB,CAAC,EAM9BH,KAAKI,4BAA8BxB,EAAQyB,2BAM3CL,KAAKM,0BAA2B,CAClC,CAOA,sBAAAC,CAAuBvB,GACrB,OACEgB,KAAKQ,iBACLxB,KACC,QAAWgB,KAAKQ,gBAAiBxB,GAE3B,EAEFgB,KAAKS,WACd,CAKA,SAAAA,GACE,OAAO,CACT,CAOA,MAAAC,GACE,IAAIb,EAAMhB,MAAM6B,SAIhB,OAHKV,KAAKW,mBACRd,GAAO,0BAEFA,CACT,CAOA,wBAAAe,CAAyB5B,GACvB,MAAM6B,EAAWb,KAAKQ,gBACtB,GAAIR,KAAKd,YAAc2B,IAAY,QAAWA,EAAU7B,IACtD,OAAOgB,KAAKd,SAEd,MAAM4B,GAAU,QAAO9B,GAKvB,OAJM8B,KAAWd,KAAKG,wBACpBH,KAAKG,sBAAsBW,IACzB,QAAyB9B,IAEtBgB,KAAKG,sBAAsBW,EACpC,CAYA,WAAAC,CAAYC,EAAGC,EAAGC,EAAGC,EAAYnC,EAAYa,GAC3C,MAAMuB,EAAY,CAACJ,EAAGC,EAAGC,GACnBG,EAAerB,KAAKsB,+BACxBF,EACApC,GAEIuC,EAAUF,EACZrB,KAAKV,gBAAgB+B,EAAcF,EAAYnC,QAC/CY,EACE4B,EAAO,IAAIxB,KAAKE,UACpBkB,OACYxB,IAAZ2B,EAAwB,IAAUE,KAAO,IAAUC,WACvC9B,IAAZ2B,EAAwBA,EAAU,GAClCvB,KAAKC,YACLD,KAAKb,iBACLa,KAAK2B,aAIP,OAFAH,EAAK3B,IAAMA,EACX2B,EAAKI,iBAAiB,IAAUC,OAAQ7B,KAAK8B,iBAAiBC,KAAK/B,OAC5DwB,CACT,CAWA,OAAAQ,CAAQhB,EAAGC,EAAGC,EAAGC,EAAYnC,GAC3B,MAAMiD,EAAmBjC,KAAKQ,gBAC9B,IACGyB,IACAjD,IACD,QAAWiD,EAAkBjD,GAE7B,OAAOgB,KAAKkC,gBACVlB,EACAC,EACAC,EACAC,EACAc,GAAoBjD,GAGxB,MAAMoC,EAAY,CAACJ,EAAGC,EAAGC,GACnBrB,EAAMG,KAAKU,SACXyB,EAAiBnC,KAAKY,yBAAyBqB,GAC/CG,EAAiBpC,KAAKY,yBAAyB5B,GAC/CqD,EAAmBrC,KAAKsB,+BAC5BF,EACApC,GAEIwC,EAAO,IAAI,IACfS,EACAE,EACAnD,EACAoD,EACAhB,EACAiB,EACArC,KAAKsC,kBAAkBnB,GACvBnB,KAAKS,YACL,CAACO,EAAGC,EAAGC,EAAGC,IACRnB,KAAKkC,gBAAgBlB,EAAGC,EAAGC,EAAGC,EAAYc,GAC5CjC,KAAKI,4BACLJ,KAAKM,yBACLN,KAAK2B,aAGP,OADAH,EAAK3B,IAAMA,EACJ2B,CACT,CAWA,eAAAU,CAAgBlB,EAAGC,EAAGC,EAAGC,EAAYnC,GACnC,MAAMa,EAAMG,KAAKU,SACjB,OAAOV,KAAKe,YAAYC,EAAGC,EAAGC,EAAGC,EAAYnC,EAAYa,EAC3D,CAOA,0BAAA0C,CAA2BC,GACrBxC,KAAKM,0BAA4BkC,IAGrCxC,KAAKM,yBAA2BkC,EAChCxC,KAAKyC,UACP,CAcA,wBAAAC,CAAyB1D,EAAY2D,GACnC,MAAMC,GAAO,QAAc5D,GAC3B,GAAI4D,EAAM,CACR,MAAM9B,GAAU,QAAO8B,GACjB9B,KAAWd,KAAKG,wBACpBH,KAAKG,sBAAsBW,GAAW6B,EAE1C,CACF,EAOF,SAASvD,EAAwByD,EAAWC,GACQD,EAAUE,WAAYD,IACtEA,CACJ,CAEA,c,oGC1RA,MAAME,UAAgB,aAIpB,WAAArE,CAAYC,GACVC,MAAM,CACJC,aAAcF,EAAQE,aACtBC,UAAWH,EAAQG,UACnBC,WAAYJ,EAAQI,WACpBC,MAAOL,EAAQK,MACfC,SAAUN,EAAQM,SAClBG,eAAgBT,EAAQS,eACxBI,MAAOb,EAAQa,MACfC,WAAYd,EAAQc,WACpBC,YAAaf,EAAQe,YACrBE,IAAKjB,EAAQiB,IACbC,wBAAyBlB,EAAQkB,wBACjCC,WAAYnB,EAAQmB,aAOtBC,KAAKiD,yBACHjD,KAAKV,kBAAoB0D,EAAQE,UAAU5D,gBAM7CU,KAAKb,iBAAmBP,EAAQO,iBAE5BP,EAAQU,kBACVU,KAAKV,gBAAkBV,EAAQU,iBAOjCU,KAAKR,KAAO,KAERZ,EAAQY,KACVQ,KAAKmD,QAAQvE,EAAQY,MACZZ,EAAQW,KACjBS,KAAKoD,OAAOxE,EAAQW,KAOtBS,KAAKqD,iBAAmB,CAAC,CAC3B,CAQA,mBAAAC,GACE,OAAOtD,KAAKb,gBACd,CAQA,kBAAAoE,GACE,OAAOC,OAAOC,eAAezD,MAAMV,kBAAoBU,KAAKV,gBACxDU,KAAKV,gBAAgByC,KAAK/B,MAC1BA,KAAKV,eACX,CAUA,OAAAoE,GACE,OAAO1D,KAAKR,IACd,CAOA,gBAAAsC,CAAiB6B,GACf,MAAMnC,EAAoDmC,EAAY,OAChEC,GAAM,QAAOpC,GACbqC,EAAYrC,EAAKsC,WACvB,IAAIC,EACAF,GAAa,IAAUG,SACzBhE,KAAKqD,iBAAiBO,IAAO,EAC7BG,EAAO,aAAcxF,eACZqF,KAAO5D,KAAKqD,0BACdrD,KAAKqD,iBAAiBO,GAC7BG,EACEF,GAAa,IAAUI,MACnB,aAAcxF,cACdoF,GAAa,IAAUK,OACrB,aAAc1F,iBACdoB,QAEEA,GAARmE,GACF/D,KAAKmE,cAAc,IAAI,EAAAC,gBAAgBL,EAAMvC,GAEjD,CAQA,mBAAA6C,CAAoBlF,GAClBa,KAAKb,iBAAmBA,EACxBa,KAAKyC,SACP,CASA,kBAAA6B,CAAmBhF,EAAiBO,GAClCG,KAAKV,gBAAkBA,EACJ,qBAARO,EACTG,KAAKuE,OAAO1E,GAEZG,KAAKyC,SAET,CAOA,MAAAW,CAAO7D,GACL,MAAMC,GAAO,QAAUD,GACvBS,KAAKR,KAAOA,EACZQ,KAAKmD,QAAQ3D,EACf,CAQA,OAAA2D,CAAQ3D,GACNQ,KAAKR,KAAOA,EACZ,MAAMK,EAAML,EAAKgF,KAAK,MAClBxE,KAAKiD,yBACPjD,KAAKsE,oBAAmB,QAAoB9E,EAAMQ,KAAKd,UAAWW,GAElEG,KAAKuE,OAAO1E,EAEhB,CAQA,eAAAP,CAAgB8B,EAAWD,EAAYnC,GAEvC,EAGF,c,qIC9IA,MAAMyF,UAAgB,aAIpB,WAAA9F,CAAYC,GACVA,EAAUA,GAA2C,CAAG,EAExD,MAAM8F,EAASlB,OAAOmB,OAAO,CAAC,EAAG/F,EAAQ8F,QAEzC7F,MAAM,CACJC,aAAcF,EAAQE,aACtBgB,wBAAyBlB,EAAQkB,wBACjCf,UAAWH,EAAQG,UACnBkB,YAAarB,EAAQqB,YACrBN,YAAaf,EAAQe,YACrBX,WAAYJ,EAAQI,WACpBqB,2BAA4BzB,EAAQyB,2BACpCH,UAAWtB,EAAQsB,UACnBhB,SAAUN,EAAQM,SAClBC,iBAAkBP,EAAQO,iBAC1BI,IAAKX,EAAQW,IACbC,KAAMZ,EAAQY,KACdC,WAAyBG,IAAlBhB,EAAQa,OAAsBb,EAAQa,MAC7CC,WAAYd,EAAQc,WACpBK,WAAYnB,EAAQmB,aAOtBC,KAAK4E,aAA6BhF,IAAnBhB,EAAQiG,OAAuBjG,EAAQiG,OAAS,EAM/D7E,KAAK8E,QAAUJ,EAMf1E,KAAK+E,MAAO,EAMZ/E,KAAKgF,YAAcpG,EAAQqG,WAM3BjF,KAAKkF,YAA2BtF,IAAlBhB,EAAQuG,OAAsBvG,EAAQuG,MAMpDnF,KAAKoF,YAAa,UAElBpF,KAAKqF,aACLrF,KAAKuE,OAAOvE,KAAKsF,mBACnB,CAgBA,iBAAAC,CAAkBC,EAAYC,EAAYzG,EAAY0F,GACpD,MAAMgB,GAAgB,QAAc1G,GAC9B2G,EAAsB3F,KAAKQ,iBAAmBkF,EAEpD,IAAIxG,EAAWc,KAAK4F,cACf1G,IACHA,EAAWc,KAAKY,yBAAyB+E,IAG3C,MAAME,GAAkB,QACtBL,EACAE,EACAC,GAEIG,GAAmB,QACvBH,EACAD,EACAF,EACAC,GAGIzE,EAAI9B,EAAS6G,kBAAkBD,EAAkB9F,KAAKD,YACtDiG,EAAiB9G,EAAS+G,cAAcjF,GACxCI,EAAYlC,EAASgH,yBAAyBL,EAAiB7E,GAErE,GAAI9B,EAASiH,iBAAiBC,QAAUhF,EAAU,GAChD,OAGF,IAAIiF,EAAanH,EAASoH,mBAAmBlF,EAAWpB,KAAKoF,YAE7D,MAAMP,EAAS7E,KAAK4E,QACL,IAAXC,IACFwB,GAAa,OAAOA,EAAYL,EAAiBnB,EAAQwB,IAG3D,MAAME,EAAa,CACjB,aAAgBvG,KAAK8E,QAAQ,WAE/BtB,OAAOmB,OACL4B,GACA,IAAAC,kBAAiBxG,KAAK8E,QAAS,kBAC/BJ,GAGF,MAAMzD,EAAIwF,KAAKC,OAAOb,EAAgB,GAAKQ,EAAW,IAAML,GACtD9E,EAAIuF,KAAKC,OAAOL,EAAW,GAAKR,EAAgB,IAAMG,GAK5D,OAHAO,EAAWvG,KAAK+E,KAAO,IAAM,KAAO9D,EACpCsF,EAAWvG,KAAK+E,KAAO,IAAM,KAAO7D,EAE7BlB,KAAK2G,eACVvF,EACAiF,EACA,EACAV,GAAuBD,EACvBa,EAEJ,CAgBA,YAAAK,CAAanB,EAAYf,GACvB,QAAqB9E,IAAjBI,KAAKR,KAAK,GACZ,OAGF,MAAM+G,EAAa,CACjB,QAAW,MACX,QAAW,EAAAM,gBACX,QAAW,mBACX,OAAU,aAGZ,QAAejH,IAAX8E,QAA4C9E,IAApB8E,EAAO,SAAwB,CACzD,MAAMoC,EAAS9G,KAAK8E,QAAQiC,OACtBC,GAAiBC,MAAMC,QAAQJ,IAA6B,IAAlBA,EAAOV,OACvD,IAAKY,EACH,OAEFT,EAAW,SAAWO,CACxB,CAEA,QAAmBlH,IAAf6F,EAA0B,CAC5B,MAAM0B,EAAMnH,KAAKQ,gBACbR,KAAKQ,gBAAgB4G,mBACrB,EACEC,EAAY,MAClBd,EAAW,SAAYd,EAAa0B,EAAOE,CAC7C,CAIA,OAFA7D,OAAOmB,OAAO4B,EAAY7B,IAEnB,QAAoC1E,KAAKR,KAAK,GAAK+G,EAC5D,CAMA,SAAA9F,GACE,OAAOT,KAAK4E,OACd,CAQA,SAAA0C,GACE,OAAOtH,KAAK8E,OACd,CAWA,cAAA6B,CAAevF,EAAWiF,EAAYlF,EAAYnC,EAAY0F,GAC5D,MAAMlF,EAAOQ,KAAKR,KAClB,IAAKA,EACH,OAEF,IAAID,EACJ,GAAmB,GAAfC,EAAK4G,OACP7G,EAAMC,EAAK,OACN,CACL,MAAM+H,GAAQ,SAAO,QAAcnG,GAAY5B,EAAK4G,QACpD7G,EAAMC,EAAK+H,EACb,CAEA,OAAO,IAAAC,aACLnB,GAEErG,KAAKd,UAAYc,KAAKY,yBAAyB5B,IAC/CiH,cAAc7E,EAAU,IAC1BD,EACAnC,EACAO,EACAmF,EACA1E,KAAKgF,YAET,CAQA,iBAAA1C,CAAkBnB,GAChB,OAAQnB,KAAKkF,aAA+BtF,IAArBI,KAAKgF,YAAgC7D,EAAJ,CAC1D,CAMA,gBAAAmE,GACE,IAAImC,EAAI,EACR,MAAMC,EAAM,GACZ,IAAK,MAAM7H,KAAOG,KAAK8E,QACrB4C,EAAID,KAAO5H,EAAM,IAAMG,KAAK8E,QAAQjF,GAEtC,OAAO6H,EAAIlD,KAAK,IAClB,CAMA,UAAAmD,CAAWjD,GACT1E,KAAK8E,QAAUJ,EACf1E,KAAKqF,aACLrF,KAAKuE,OAAOvE,KAAKsF,mBACnB,CAOA,SAAAsC,CAAUlD,GACR1E,KAAK2H,WAAWnE,OAAOmB,OAAO,CAAC,EAAGD,GACpC,CAQA,YAAAmD,CAAanD,GACX1E,KAAK2H,WAAWnE,OAAOmB,OAAO3E,KAAK8E,QAASJ,GAC9C,CAKA,UAAAW,GACE,MAAMyC,EAAU9H,KAAK8E,QAAQ,YAAc,EAAA+B,gBAC3C7G,KAAK+E,MAAO,OAAgB+C,EAAS,QAAU,CACjD,CASA,eAAAxI,CAAgB8B,EAAWD,EAAYnC,GACrC,IAAIE,EAAWc,KAAK4F,cAKpB,GAJK1G,IACHA,EAAWc,KAAKY,yBAAyB5B,IAGvCE,EAASiH,iBAAiBC,QAAUhF,EAAU,GAChD,OAGgB,GAAdD,GAAqBnB,KAAKkF,aAA+BtF,IAArBI,KAAKgF,cAC3C7D,EAAa,GAGf,MAAM6E,EAAiB9G,EAAS+G,cAAc7E,EAAU,IACxD,IAAIiF,EAAanH,EAASoH,mBAAmBlF,EAAWpB,KAAKoF,YAE7D,MAAMP,EAAS7E,KAAK4E,QACL,IAAXC,IACFwB,GAAa,OAAOA,EAAYL,EAAiBnB,EAAQwB,IAG3D,MAAME,EAAa/C,OAAOmB,OACxB,CAAC,GACD,IAAA6B,kBAAiBxG,KAAK8E,QAAS,WAGjC,OAAO9E,KAAK2G,eACVvF,EACAiF,EACAlF,EACAnC,EACAuH,EAEJ,EAGF,c","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/TileWMS\n */\n\nimport {buffer, createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {appendParams} from '../uri.js';\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION, getImageSrc, getRequestParams} from './wms.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection() || projectionObj;\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(sourceProjectionObj);\n    }\n\n    const sourceProjCoord = transform(\n      coordinate,\n      projectionObj,\n      sourceProjectionObj,\n    );\n    const sourceResolution = calculateSourceResolution(\n      sourceProjectionObj,\n      projectionObj,\n      coordinate,\n      resolution,\n    );\n\n    const z = tileGrid.getZForResolution(sourceResolution, this.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(\n      baseParams,\n      getRequestParams(this.params_, 'GetFeatureInfo'),\n      params,\n    );\n\n    const x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams,\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return getImageSrc(\n      tileExtent,\n      (\n        this.tileGrid || this.getTileGridForProjection(projection)\n      ).getResolution(tileCoord[0]),\n      pixelRatio,\n      projection,\n      url,\n      params,\n      this.serverType_,\n    );\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * @param {Object} params New URL paremeters.\n   * @private\n   */\n  setParams_(params) {\n    this.params_ = params;\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Set the URL parameters passed to the WMS source.\n   * @param {Object} params New URL paremeters.\n   * @api\n   */\n  setParams(params) {\n    this.setParams_(Object.assign({}, params));\n  }\n\n  /**\n   * Update the URL parameters. This method can be used to update a subset of the WMS\n   * parameters. Call `setParams` to set all of the parameters.\n   * @param {Object} params Updated URL parameters.\n   * @api\n   */\n  updateParams(params) {\n    this.setParams_(Object.assign(this.params_, params));\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = Object.assign(\n      {},\n      getRequestParams(this.params_, 'GetMap'),\n    );\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams,\n    );\n  }\n}\n\nexport default TileWMS;\n"],"names":["TILELOADSTART","TILELOADEND","TILELOADERROR","TileImage","constructor","options","super","attributions","cacheSize","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","interpolate","undefined","key","attributionsCollapsible","zDirection","this","crossOrigin","tileClass","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","getGutterForProjection","getProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","event","uid","tileState","getState","type","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey","join","TileWMS","params","assign","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","getKeyForParams_","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","sourceProjCoord","sourceResolution","getZForResolution","tileResolution","getResolution","getTileCoordForCoordAndZ","getResolutions","length","tileExtent","getTileCoordExtent","baseParams","getRequestParams","Math","floor","getRequestUrl_","getLegendUrl","DEFAULT_VERSION","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","pixelSize","getParams","index","getImageSrc","i","res","setParams_","setParams","updateParams","version"],"sourceRoot":""}