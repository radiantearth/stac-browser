{"version":3,"file":"js/3614.3ad01f41.js","mappings":"0JAkBO,SAASA,EAAeC,EAAGC,EAAGC,EAAGC,GACtC,YAAkBC,IAAdD,GACFA,EAAU,GAAKH,EACfG,EAAU,GAAKF,EACfE,EAAU,GAAKD,EACRC,GAEF,CAACH,EAAGC,EAAGC,EAChB,CAQO,SAASG,EAAUL,EAAGC,EAAGC,GAC9B,OAAOF,EAAI,IAAMC,EAAI,IAAMC,CAC7B,CAOO,SAASI,EAAOH,GACrB,OAAOE,EAAUF,EAAU,GAAIA,EAAU,GAAIA,EAAU,GACzD,CA4BO,SAASI,EAAKJ,GACnB,OAAOK,EAAQL,EAAU,GAAIA,EAAU,GAAIA,EAAU,GACvD,CAQO,SAASK,EAAQR,EAAGC,EAAGC,GAC5B,OAAQD,GAAKD,GAAKE,CACpB,CAOO,SAASO,EAAiBN,EAAWO,GAC1C,MAAMV,EAAIG,EAAU,GACdF,EAAIE,EAAU,GACdD,EAAIC,EAAU,GAEpB,GAAIO,EAASC,aAAeX,GAAKA,EAAIU,EAASE,aAC5C,OAAO,EAET,MAAMC,EAAYH,EAASI,iBAAiBd,GAC5C,OAAKa,GAGEA,EAAUE,WAAWd,EAAGC,EACjC,C,sLClGA,cACEc,QAAS,UACTC,2BAA4B,yB,wDCD9B,MAAMC,EAOJ,WAAAC,CAAYC,EAAMC,EAAMC,EAAMC,GAI5BC,KAAKJ,KAAOA,EAKZI,KAAKH,KAAOA,EAKZG,KAAKF,KAAOA,EAKZE,KAAKD,KAAOA,CACd,CAMA,QAAAE,CAAStB,GACP,OAAOqB,KAAKT,WAAWZ,EAAU,GAAIA,EAAU,GACjD,CAMA,iBAAAuB,CAAkBb,GAChB,OACEW,KAAKJ,MAAQP,EAAUO,MACvBP,EAAUQ,MAAQG,KAAKH,MACvBG,KAAKF,MAAQT,EAAUS,MACvBT,EAAUU,MAAQC,KAAKD,IAE3B,CAOA,UAAAR,CAAWd,EAAGC,GACZ,OAAOsB,KAAKJ,MAAQnB,GAAKA,GAAKuB,KAAKH,MAAQG,KAAKF,MAAQpB,GAAKA,GAAKsB,KAAKD,IACzE,CAMA,MAAAI,CAAOd,GACL,OACEW,KAAKJ,MAAQP,EAAUO,MACvBI,KAAKF,MAAQT,EAAUS,MACvBE,KAAKH,MAAQR,EAAUQ,MACvBG,KAAKD,MAAQV,EAAUU,IAE3B,CAKA,MAAAK,CAAOf,GACDA,EAAUO,KAAOI,KAAKJ,OACxBI,KAAKJ,KAAOP,EAAUO,MAEpBP,EAAUQ,KAAOG,KAAKH,OACxBG,KAAKH,KAAOR,EAAUQ,MAEpBR,EAAUS,KAAOE,KAAKF,OACxBE,KAAKF,KAAOT,EAAUS,MAEpBT,EAAUU,KAAOC,KAAKD,OACxBC,KAAKD,KAAOV,EAAUU,KAE1B,CAKA,SAAAM,GACE,OAAOL,KAAKD,KAAOC,KAAKF,KAAO,CACjC,CAKA,OAAAQ,GACE,MAAO,CAACN,KAAKO,WAAYP,KAAKK,YAChC,CAKA,QAAAE,GACE,OAAOP,KAAKH,KAAOG,KAAKJ,KAAO,CACjC,CAMA,UAAAY,CAAWnB,GACT,OACEW,KAAKJ,MAAQP,EAAUQ,MACvBG,KAAKH,MAAQR,EAAUO,MACvBI,KAAKF,MAAQT,EAAUU,MACvBC,KAAKD,MAAQV,EAAUS,IAE3B,EAWK,SAASvB,EAAeqB,EAAMC,EAAMC,EAAMC,EAAMV,GACrD,YAAkBT,IAAdS,GACFA,EAAUO,KAAOA,EACjBP,EAAUQ,KAAOA,EACjBR,EAAUS,KAAOA,EACjBT,EAAUU,KAAOA,EACVV,GAEF,IAAIK,EAAUE,EAAMC,EAAMC,EAAMC,EACzC,CAEA,K","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/TileProperty.js","webpack://@radiantearth/stac-browser/./node_modules/ol/TileRange.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n"],"names":["createOrUpdate","z","x","y","tileCoord","undefined","getKeyZXY","getKey","hash","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY","PRELOAD","USE_INTERIM_TILES_ON_ERROR","TileRange","constructor","minX","maxX","minY","maxY","this","contains","containsTileRange","equals","extend","getHeight","getSize","getWidth","intersects"],"sourceRoot":""}