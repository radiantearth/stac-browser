{"version":3,"file":"js/2610.073abe8b.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/arcgisRest.js","webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/arcgisRest\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\nimport {round} from '../math.js';\nimport {get as getProjection} from '../proj.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @param {string} baseUrl Base URL for the ArcGIS Rest service.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(\n  baseUrl,\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  params,\n) {\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  // (if there is no numeric portion the entire projection code must\n  // form a valid ArcGIS SpatialReference definition).\n  const srid = projection\n    .getCode()\n    .split(/:(?=\\d+$)/)\n    .pop();\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  params['SIZE'] = imageSize[0] + ',' + imageSize[1];\n  params['BBOX'] = extent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(\n    params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio,\n  );\n\n  const modifiedUrl = baseUrl\n    .replace(/MapServer\\/?$/, 'MapServer/export')\n    .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  return appendParams(modifiedUrl, params);\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {string} url ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for ArcGIS Rest images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load ? options.load : decode;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio ?? 1.5;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return function (extent, resolution, pixelRatio) {\n    pixelRatio = options.hidpi ? pixelRatio : 1;\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, options.params);\n\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n\n    const src = getRequestUrl(\n      options.url,\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      params,\n    );\n\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n\n    return load(image, src).then((image) => {\n      // Update resolution, because the server may return a smaller size than requested\n      const resolution = (getWidth(extent) / image.width) * pixelRatio;\n      return {image, extent, resolution, pixelRatio};\n    });\n  };\n}\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"names":["getRequestUrl","baseUrl","extent","resolution","pixelRatio","projection","params","srid","getCode","split","pop","imageResolution","imageSize","DECIMALS","join","Math","round","modifiedUrl","replace","createLoader","options","load","ratio","crossOrigin","hidpi","Object","assign","getRequestExtent","src","url","image","Image","then","width","fromResolutionLike","Array","isArray","min","DEFAULT_WMS_VERSION","ReprojImage","constructor","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","interpolate","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","ImageState","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","super","this","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","height","getResolution","undefined","changed","ERROR","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","attributions","on","once","un","loader","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","length","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getImageInternal","getRevision","dispose","getInterpolate","requestExtent","requestResolution","addEventListener","handleImageChange","bind","event","loading","hasListener","dispatchEvent","defaultImageLoadFunction","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sourceRoot":""}