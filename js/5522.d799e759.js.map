{"version":3,"file":"js/5522.d799e759.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/VectorRenderTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/VectorTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/VectorTile.js"],"sourcesContent":["/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getUid} from './util.js';\n\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nconst canvasPool = [];\n\nclass VectorRenderTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function.\n   * @param {function(VectorRenderTile):void} removeSourceTiles Function.\n   */\n  constructor(\n    tileCoord,\n    state,\n    urlTileCoord,\n    getSourceTiles,\n    removeSourceTiles,\n  ) {\n    super(tileCoord, state, {transition: 0});\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D|null}\n     */\n    this.context_ = null;\n\n    /**\n     * Executor groups. Read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    this.executorGroups = {};\n\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    this.loadingSourceTiles = 0;\n\n    /**\n     * @type {Object<string, ImageData>}\n     */\n    this.hitDetectionImageData = {};\n\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    this.replayState_ = {};\n\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    this.sourceTiles = [];\n\n    /**\n     * @type {Object<string, boolean>}\n     */\n    this.errorTileKeys = {};\n\n    /**\n     * @type {number}\n     */\n    this.wantedResolution;\n\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n\n    /**\n     * @type {!function(VectorRenderTile):void}\n     * @private\n     */\n    this.removeSourceTiles_ = removeSourceTiles;\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord = urlTileCoord;\n  }\n\n  /**\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  getContext() {\n    if (!this.context_) {\n      this.context_ = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_;\n  }\n\n  /**\n   * @return {boolean} Tile has a rendering context.\n   */\n  hasContext() {\n    return !!this.context_;\n  }\n\n  /**\n   * Get the Canvas for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.hasContext() ? this.getContext().canvas : null;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n  getReplayState(layer) {\n    const key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1,\n      };\n    }\n    return this.replayState_[key];\n  }\n\n  /**\n   * Load the tile.\n   * @override\n   */\n  load() {\n    this.getSourceTiles();\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   * @override\n   */\n  release() {\n    if (this.context_) {\n      releaseCanvas(this.context_);\n      canvasPool.push(this.context_.canvas);\n      this.context_ = null;\n    }\n    this.removeSourceTiles_(this);\n    this.sourceTiles.length = 0;\n    super.release();\n  }\n}\n\nexport default VectorRenderTile;\n","/**\n * @module ol/source/VectorTile\n */\n\nimport TileState from '../TileState.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport Tile from '../VectorTile.js';\nimport {assert} from '../asserts.js';\nimport EventType from '../events/EventType.js';\nimport {\n  buffer as bufferExtent,\n  getIntersection,\n  intersects,\n} from '../extent.js';\nimport {loadFeaturesXhr} from '../featureloader.js';\nimport {isEmpty} from '../obj.js';\nimport {equivalent} from '../proj.js';\nimport {toSize} from '../size.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM} from '../tilegrid/common.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n */\nclass VectorTile extends UrlTile {\n  /**\n   * @param {!Options<FeatureType>} options Vector tile options.\n   */\n  constructor(options) {\n    const projection = options.projection || 'EPSG:3857';\n\n    const extent = options.extent || extentFromProjection(projection);\n\n    const tileGrid =\n      options.tileGrid ||\n      createXYZ({\n        extent: extent,\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize || 512,\n      });\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\n     */\n    this.format_ = options.format ? options.format : null;\n\n    /**\n     * @type {Object<string, Array<string>>}\n     * @private\n     */\n    this.tileKeysBySourceTileUrl_ = {};\n\n    /**\n     @type {Object<string, Tile<FeatureType>>}\n     */\n    this.sourceTiles_ = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGrids_ = {};\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector render tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  getSourceTiles(pixelRatio, projection, tile) {\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      const urlTileCoord = tile.wrappedTileCoord;\n      const tileGrid = this.getTileGridForProjection(projection);\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      const z = urlTileCoord[0];\n      const resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      const sourceTileGrid = this.tileGrid;\n      const sourceExtent = sourceTileGrid.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      const sourceZ = sourceTileGrid.getZForResolution(\n        resolution,\n        this.zDirection,\n      );\n\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        const tileUrl = this.tileUrlFunction(\n          sourceTileCoord,\n          pixelRatio,\n          projection,\n        );\n        if (!this.sourceTiles_[tileUrl]) {\n          this.sourceTiles_[tileUrl] = new this.tileClass(\n            sourceTileCoord,\n            tileUrl ? TileState.IDLE : TileState.EMPTY,\n            tileUrl,\n            this.format_,\n            this.tileLoadFunction,\n          );\n        }\n        const sourceTile = this.sourceTiles_[tileUrl];\n        tile.sourceTiles.push(sourceTile);\n        if (!this.tileKeysBySourceTileUrl_[tileUrl]) {\n          this.tileKeysBySourceTileUrl_[tileUrl] = [];\n        }\n        this.tileKeysBySourceTileUrl_[tileUrl].push(tile.getKey());\n        const sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          const listenChange = (event) => {\n            this.handleTileChange(event);\n            const state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              const sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(\n                  isEmpty(tile.errorTileKeys)\n                    ? TileState.LOADED\n                    : TileState.ERROR,\n                );\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent =\n            sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid.getResolution(\n            sourceTileCoord[0],\n          );\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(\n          tile.sourceTiles.some(\n            (sourceTile) => sourceTile.getState() === TileState.ERROR,\n          )\n            ? TileState.ERROR\n            : TileState.LOADED,\n        );\n      }\n    }\n\n    return tile.sourceTiles;\n  }\n\n  /**\n   * @param {VectorRenderTile} tile Vector render tile.\n   */\n  removeSourceTiles(tile) {\n    const tileKey = tile.getKey();\n    const sourceTiles = tile.sourceTiles;\n    for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n      const sourceTileUrl = sourceTiles[i].getTileUrl();\n      if (!this.tileKeysBySourceTileUrl_[sourceTileUrl]) {\n        return;\n      }\n      const index =\n        this.tileKeysBySourceTileUrl_[sourceTileUrl].indexOf(tileKey);\n      if (index === -1) {\n        continue;\n      }\n      this.tileKeysBySourceTileUrl_[sourceTileUrl].splice(index, 1);\n      if (this.tileKeysBySourceTileUrl_[sourceTileUrl].length === 0) {\n        delete this.tileKeysBySourceTileUrl_[sourceTileUrl];\n        delete this.sourceTiles_[sourceTileUrl];\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoord = [z, x, y];\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const sourceExtent = this.getTileGrid().getExtent();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    let empty = true;\n    if (urlTileCoord !== null) {\n      const sourceTileGrid = this.tileGrid;\n      const resolution = tileGrid.getResolution(z);\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        empty =\n          empty &&\n          !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      });\n    }\n    const newTile = new VectorRenderTile(\n      tileCoord,\n      empty ? TileState.EMPTY : TileState.IDLE,\n      urlTileCoord,\n      this.getSourceTiles.bind(this, pixelRatio, projection),\n      this.removeSourceTiles.bind(this),\n    );\n    newTile.key = this.getKey();\n    return newTile;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const code = projection.getCode();\n    let tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      const sourceProjection = this.getProjection();\n      assert(\n        sourceProjection === null || equivalent(sourceProjection, projection),\n        'A VectorTile source can only be rendered if it has a projection compatible with the view projection.',\n      );\n\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      const sourceTileGrid = this.tileGrid;\n      const resolutions = sourceTileGrid.getResolutions().slice();\n      const origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getOrigin(z);\n      });\n      const tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getTileSize(z);\n      });\n      const length = DEFAULT_MAX_ZOOM + 1;\n      for (let z = resolutions.length; z < length; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes,\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   * @override\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [\n      Math.round(tileSize[0] * pixelRatio),\n      Math.round(tileSize[1] * pixelRatio),\n    ];\n  }\n\n  /**\n   * @param {boolean} overlaps The source has overlapping geometries.\n   */\n  setOverlaps(overlaps) {\n    this.overlaps_ = overlaps;\n    this.changed();\n  }\n}\n\nexport default VectorTile;\n\n/**\n * Sets the loader for a tile.\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @param {import(\"../VectorTile.js\").default<FeatureType>} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    function (extent, resolution, projection) {\n      loadFeaturesXhr(\n        url,\n        tile.getFormat(),\n        extent,\n        resolution,\n        projection,\n        tile.onLoad.bind(tile),\n        tile.onError.bind(tile),\n      );\n    },\n  );\n}\n","/**\n * @module ol/VectorTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n\n/**\n * @template {import('./Feature.js').FeatureLike} FeatureType\n */\nclass VectorTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Data source url.\n   * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\n     * Extent of this tile; set by the source.\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = null;\n\n    /**\n     * @private\n     * @type {import(\"./format/Feature.js\").default<FeatureType>}\n     */\n    this.format_ = format;\n\n    /**\n     * @private\n     * @type {Array<FeatureType>}\n     */\n    this.features_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./featureloader.js\").FeatureLoader}\n     */\n    this.loader_;\n\n    /**\n     * Feature projection of this tile; set by the source.\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection = null;\n\n    /**\n     * Resolution of this tile; set by the source.\n     * @type {number}\n     */\n    this.resolution;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = src;\n\n    this.key = src;\n  }\n\n  /**\n   * @return {string} Tile url.\n   */\n  getTileUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Get the feature format assigned for reading this tile's features.\n   * @return {import(\"./format/Feature.js\").default<FeatureType>} Feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Get the features for this tile. Geometries will be in the view projection.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n  getFeatures() {\n    return this.features_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n      if (this.loader_) {\n        this.loader_(this.extent, this.resolution, this.projection);\n      }\n    }\n  }\n\n  /**\n   * Handler for successful tile load.\n   * @param {Array<FeatureType>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\n   */\n  onLoad(features, dataProjection) {\n    this.setFeatures(features);\n  }\n\n  /**\n   * Handler for tile load errors.\n   */\n  onError() {\n    this.setState(TileState.ERROR);\n  }\n\n  /**\n   * Function for use in a {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the features for the tile.\n   * @param {Array<FeatureType>} features Features.\n   * @api\n   */\n  setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  }\n\n  /**\n   * Set the feature loader for reading this tile's features.\n   * @param {import(\"./featureloader.js\").FeatureLoader<FeatureType>} loader Feature loader.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n}\n\nexport default VectorTile;\n"],"names":["canvasPool","VectorRenderTile","Tile","constructor","tileCoord","state","urlTileCoord","getSourceTiles","removeSourceTiles","super","transition","this","context_","executorGroups","loadingSourceTiles","hitDetectionImageData","replayState_","sourceTiles","errorTileKeys","wantedResolution","bind","undefined","removeSourceTiles_","wrappedTileCoord","getContext","hasContext","getImage","canvas","getReplayState","layer","key","dirty","renderedRenderOrder","renderedResolution","NaN","renderedRevision","renderedTileResolution","renderedTileRevision","renderedTileZ","load","release","push","length","VectorTile","UrlTile","options","projection","extent","tileGrid","maxResolution","maxZoom","minZoom","tileSize","attributions","attributionsCollapsible","cacheSize","interpolate","tileLoadFunction","defaultLoadFunction","tileUrlFunction","url","urls","wrapX","zDirection","format_","format","tileKeysBySourceTileUrl_","sourceTiles_","overlaps_","overlaps","tileClass","tileGrids_","getOverlaps","pixelRatio","tile","getState","TileState","IDLE","setState","LOADING","getTileGridForProjection","getTileCoordExtent","z","resolution","getResolution","sourceTileGrid","sourceExtent","getExtent","sourceZ","getZForResolution","forEachTileCoord","sourceTileCoord","tileUrl","EMPTY","sourceTile","getKey","sourceTileState","LOADED","listenChange","event","handleTileChange","ERROR","sourceTileKey","removeEventListener","EventType","CHANGE","addEventListener","some","tileKey","i","ii","sourceTileUrl","getTileUrl","index","indexOf","splice","getTile","x","y","getTileCoordForTileUrlFunction","getTileGrid","tileExtent","empty","newTile","code","getCode","sourceProjection","getProjection","resolutions","getResolutions","slice","origins","map","getOrigin","tileSizes","getTileSize","TileGrid","getTilePixelRatio","getTilePixelSize","tmpSize","Math","round","setOverlaps","changed","setLoader","getFormat","onLoad","onError","src","features_","loader_","tileLoadFunction_","url_","getFeatures","features","dataProjection","setFeatures","loader"],"sourceRoot":""}