{"version":3,"file":"js/7724.ba5bf7f0.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/uri.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/mapserver.js","webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/uri\n */\n\nimport {modulo} from './math.js';\nimport {hashZXY} from './tilecoord.js';\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {number} [maxY] The maximum y coordinate at the given z level.\n * @return {string} The URL.\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template\n    .replace(zRegEx, z.toString())\n    .replace(xRegEx, x.toString())\n    .replace(yRegEx, y.toString())\n    .replace(dashYRegEx, function () {\n      if (maxY === undefined) {\n        throw new Error(\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\n        );\n      }\n      return (maxY - y).toString();\n    });\n}\n\n/**\n * @param {Array<string>} urls List of URLs.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {string} The chosen URL.\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/source/mapserver\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The MapServer url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * the image from the remote server.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {string} baseUrl The MapServer url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @return {string} The MapServer map image request URL.\n */\nfunction getUrl(baseUrl, params, extent, size) {\n  const width = Math.round(size[0]);\n  const height = Math.round(size[1]);\n  const mapSize = `${width} ${height}`;\n  const mapExt = `${extent[0]} ${extent[1]} ${extent[2]} ${extent[3]}`;\n\n  const baseParams = {\n    mode: 'map',\n    map_imagetype: 'png',\n    mapext: mapExt,\n    imgext: mapExt,\n    map_size: mapSize,\n    imgx: width / 2,\n    imgy: height / 2,\n    imgxy: mapSize,\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapServer images generated using the CGI interface,\n * which predates OGC services. It is **strongly** recommended to configure\n * MapServer to use WMS, and use the WMS createLoader.\n * @param {LoaderOptions} options LoaderOptions Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} MapServer image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(options.url, options.params, extent, size);\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"names":["appendParams","uri","params","keyParams","Object","keys","forEach","k","undefined","push","encodeURIComponent","qs","join","replace","includes","zRegEx","xRegEx","yRegEx","dashYRegEx","renderXYZTemplate","template","z","x","y","maxY","toString","Error","pickUrl","urls","hash","index","length","expandUrl","url","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","String","fromCharCode","stop","parseInt","i","getUrl","baseUrl","extent","size","width","Math","round","height","mapSize","mapExt","baseParams","mode","map_imagetype","mapext","imgext","map_size","imgx","imgy","imgxy","assign","createLoader","options","load","ratio","crossOrigin","resolution","pixelRatio","image","Image","getRequestExtent","src","then","fromResolutionLike","Array","isArray","min","createOrUpdate","tileCoord","getKeyZXY","getKey","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY","DEFAULT_WMS_VERSION","DECIMALS","ReprojImage","constructor","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","interpolate","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","ImageState","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","super","this","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","getResolution","changed","ERROR","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","attributions","projection","on","once","un","loader","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getImageInternal","getRevision","dispose","getInterpolate","requestExtent","requestResolution","addEventListener","handleImageChange","bind","event","loading","hasListener","dispatchEvent","defaultImageLoadFunction","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sourceRoot":""}