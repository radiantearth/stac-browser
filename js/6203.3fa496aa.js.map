{"version":3,"file":"js/6203.3fa496aa.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/Cluster.js"],"sourcesContent":["/**\n * @module ol/source/Cluster\n */\n\nimport Feature from '../Feature.js';\nimport {assert} from '../asserts.js';\nimport {add as addCoordinate, scale as scaleCoordinate} from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport {\n  buffer,\n  createEmpty,\n  createOrUpdateFromCoordinate,\n  getCenter,\n} from '../extent.js';\nimport Point from '../geom/Point.js';\nimport {getUid} from '../util.js';\nimport VectorSource from './Vector.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").FeatureLike]\n * @typedef {(feature: FeatureType) => (Point|null)} GeometryFunction\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {GeometryFunction<FeatureType>} [geometryFunction]\n * Function that takes a {@link module:ol/Feature~Feature} as argument and returns a\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<FeatureType>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource<FeatureType>} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import('../Feature.js').default]\n * @extends {VectorSource<Feature<import(\"../geom/Geometry.js\").default>>}\n */\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options<FeatureType>} [options] Cluster options.\n   */\n  constructor(options) {\n    options = options || {};\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX,\n    });\n\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n    this.resolution = undefined;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.distance = options.distance !== undefined ? options.distance : 20;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.minDistance = options.minDistance || 0;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.interpolationRatio = 0;\n\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n    this.features = [];\n\n    /**\n     * @type {GeometryFunction<import(\"../Feature.js\").FeatureLike>}\n     * @protected\n     */\n    this.geometryFunction =\n      options.geometryFunction ||\n      function (feature) {\n        const geometry = /** @type {Point} */ (feature.getGeometry());\n        assert(\n          !geometry || geometry.getType() === 'Point',\n          'The default `geometryFunction` can only handle `Point` or null geometries',\n        );\n        return geometry;\n      };\n\n    /**\n     * @type {function(Point, Array<FeatureType>):Feature}\n     * @private\n     */\n    this.createCustomCluster_ = options.createCluster;\n\n    /**\n     * @type {VectorSource<FeatureType>|null}\n     * @protected\n     */\n    this.source = null;\n\n    /**\n     * @private\n     */\n    this.boundRefresh_ = this.refresh.bind(this);\n\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   * @override\n   */\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource<FeatureType>|null} Source.\n   * @api\n   */\n  getSource() {\n    return this.source;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @override\n   */\n  loadFeatures(extent, resolution, projection) {\n    this.source?.loadFeatures(extent, resolution, projection);\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n  getMinDistance() {\n    return this.minDistance;\n  }\n\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource<FeatureType>|null} source The new source for this instance.\n   * @api\n   */\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.source = source;\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Handle the source changing.\n   * @override\n   */\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n  updateDistance(distance, minDistance) {\n    const ratio =\n      distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed =\n      distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n    if (changed) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n\n    /** @type {Object<string, true>} */\n    const clustered = {};\n\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n\n          const neighbors = this.source\n            .getFeaturesInExtent(extent)\n            .filter(function (neighbor) {\n              const uid = getUid(neighbor);\n              if (uid in clustered) {\n                return false;\n              }\n              clustered[uid] = true;\n              return true;\n            });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<FeatureType>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([\n      centroid[0] * (1 - ratio) + searchCenter[0] * ratio,\n      centroid[1] * (1 - ratio) + searchCenter[1] * ratio,\n    ]);\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    }\n    return new Feature({\n      geometry,\n      features,\n    });\n  }\n}\n\nexport default Cluster;\n"],"names":["Cluster","constructor","options","super","attributions","wrapX","this","resolution","undefined","distance","minDistance","interpolationRatio","features","geometryFunction","feature","geometry","getGeometry","getType","createCustomCluster_","createCluster","source","boundRefresh_","refresh","bind","updateDistance","setSource","clear","fast","length","getDistance","getSource","loadFeatures","extent","projection","setDistance","setMinDistance","getMinDistance","removeEventListener","CHANGE","addEventListener","cluster","addFeatures","ratio","Math","min","changed","mapDistance","getFeatures","clustered","i","ii","coordinates","getCoordinates","neighbors","getFeaturesInExtent","filter","neighbor","uid","push","centroid","splice","searchCenter"],"sourceRoot":""}