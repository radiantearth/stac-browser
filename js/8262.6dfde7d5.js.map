{"version":3,"file":"js/8262.6dfde7d5.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/static.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/ImageStatic.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/source/static\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return () => {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, options.url).then((image) => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution =\n        resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {image, extent, resolution, pixelRatio: 1};\n    });\n  };\n}\n","/**\n * @module ol/source/ImageStatic\n */\n\nimport ImageWrapper, {decode} from '../Image.js';\nimport EventType from '../events/EventType.js';\nimport {intersects} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './static.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {string} url Image URL.\n */\n\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\nclass Static extends ImageSource {\n  /**\n   * @param {Options} options ImageStatic options.\n   */\n  constructor(options) {\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const /** @type {import(\"../Image.js\").LoadFunction} */ imageLoadFunction =\n        options.imageLoadFunction !== undefined\n          ? options.imageLoadFunction\n          : defaultImageLoadFunction;\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: getProjection(options.projection),\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.imageExtent_ = options.imageExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    this.image = new ImageWrapper(\n      this.imageExtent_,\n      undefined,\n      1,\n      createLoader({\n        url: options.url,\n        imageExtent: options.imageExtent,\n        crossOrigin,\n        load: (image, src) => {\n          this.image.setImage(image);\n          imageLoadFunction(this.image, src);\n          return decode(image);\n        },\n      }),\n    );\n\n    this.image.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this),\n    );\n  }\n\n  /**\n   * Returns the image extent\n   * @return {import(\"../extent.js\").Extent} image extent.\n   * @api\n   */\n  getImageExtent() {\n    return this.imageExtent_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (intersects(extent, this.image.getExtent())) {\n      return this.image;\n    }\n    return null;\n  }\n\n  /**\n   * Return the URL used for this image source.\n   * @return {string} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n}\n\nexport default Static;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"names":["fromResolutionLike","resolution","Array","isArray","Math","min","DEFAULT_WMS_VERSION","DECIMALS","createLoader","options","load","extent","imageExtent","crossOrigin","image","Image","url","then","resolutionX","width","resolutionY","height","pixelRatio","Static","constructor","undefined","imageLoadFunction","defaultImageLoadFunction","super","attributions","interpolate","projection","this","url_","imageExtent_","src","setImage","addEventListener","CHANGE","handleImageChange","bind","getImageExtent","getImageInternal","getExtent","getUrl","ReprojImage","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","maxSourceExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","ImageState","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","getResolution","changed","ERROR","EventType","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","on","once","un","loader","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","length","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getRevision","dispose","getInterpolate","requestExtent","getRequestExtent","requestResolution","event","loading","hasListener","dispatchEvent","ratio","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sourceRoot":""}