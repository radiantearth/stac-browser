{"version":3,"file":"js/9231.e8f6d2f8.js","mappings":"kMAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAQF,EAAII,YAAaF,EAAG,WAAW,CAACG,IAAI,SAASC,YAAY,oBAAoBC,MAAM,CAAC,QAAU,OAAO,MAAQP,EAAIQ,OAAOC,GAAG,CAAC,MAAQ,SAASC,GAAgC,OAAxBA,EAAOC,iBAAwBX,EAAIY,iBAAiBC,MAAM,KAAMC,UAAU,IAAI,CAACZ,EAAG,OAAO,CAACa,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAOlB,EAAImB,aAAcC,WAAW,kBAAkB,CAACpB,EAAIqB,GAAGrB,EAAIsB,GAAGtB,EAAIuB,GAAG,4BAA4BrB,EAAG,OAAO,CAACa,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,OAAQlB,EAAImB,aAAcC,WAAW,mBAAmB,CAACpB,EAAIqB,GAAGrB,EAAIsB,GAAGtB,EAAIuB,GAAG,8BAA8BvB,EAAIwB,IAC1mB,EACIC,EAAkB,GCStB,GACAT,KAAA,mBACAU,MAAA,CACAC,QAAA,CACAC,KAAA,CAAAC,SAAAC,OAAAC,QACAC,UAAA,IAGAC,IAAAA,GACA,OACAd,cAAA,EACAe,IAAAC,SACAC,SAAA,KAAAC,SAAAC,KAAA,MAEA,EACAC,SAAA,CACA/B,KAAAA,GACA,YAAAW,aAAA,KAAAI,GAAA,wBAAAA,GAAA,kBACA,EACAnB,WAAAA,GACA,aAAAoC,cAGAC,QAAA,KAAAP,IAAAQ,KAAAC,mBAAA,KAAAT,IAAAU,kBACA,GAEAC,MAAA,CACAlB,QAAA,CACAmB,WAAA,EACAC,OAAAA,GACA,KAAAC,aACA,MAAAC,EAAA,KAAAT,aACAS,IACA,KAAAf,IAAAe,EAAAC,cAEA,GAEA/B,YAAAA,CAAAgC,GACAC,QAAAC,MAAAF,GACAA,EACA,KAAAjB,IAAAoB,iBAAA,wBAAAlB,UAGA,KAAAF,IAAAqB,oBAAA,wBAAAnB,UAEA,KAAAI,aAAAgB,UAAAC,OAAA,aAAAN,GACA,KAAAO,MAAAC,OAAAC,OACA,KAAAC,MAAA,UAAAV,EACA,GAEAW,aAAAA,GACA,KAAAd,YACA,EACAe,QAAA,CACAf,UAAAA,GACA,KAAA7B,cACA,KAAAe,IAAA8B,gBAEA,EACAxB,UAAAA,GACA,6BAAAb,QACAQ,SAAA8B,cAAA,KAAAtC,SAEA,yBAAAA,QACA,KAAAA,UAGA,KAAAA,OAEA,EACAU,QAAAA,GACA,KAAAlB,eAAA,KAAAe,IAAAgC,oBACA,KAAA/C,cAAA,EAEA,EACAP,gBAAAA,GACA,KAAAR,cAGA,KAAAe,aACA,KAAAe,IAAA8B,iBACAG,KAAA,SAAAhD,cAAA,GAEA,KAAAqB,aAAAG,oBACAwB,KAAA,SAAAhD,cAAA,GAEA,ICjG+P,I,WCQ3PiD,GAAY,OACd,EACArE,EACA0B,GACA,EACA,KACA,KACA,MAIF,EAAe2C,E","sources":["webpack://@radiantearth/stac-browser/./src/components/FullscreenButton.vue","webpack://@radiantearth/stac-browser/src/components/FullscreenButton.vue","webpack://@radiantearth/stac-browser/./src/components/FullscreenButton.vue?a153","webpack://@radiantearth/stac-browser/./src/components/FullscreenButton.vue?6218"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.isSupported)?_c('b-button',{ref:\"button\",staticClass:\"fullscreen-button\",attrs:{\"variant\":\"dark\",\"title\":_vm.title},on:{\"click\":function($event){$event.preventDefault();return _vm.toggleFullscreen.apply(null, arguments)}}},[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isFullscreen),expression:\"isFullscreen\"}]},[_vm._v(_vm._s(_vm.$t('fullscreen.exitLabel')))]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isFullscreen),expression:\"!isFullscreen\"}]},[_vm._v(_vm._s(_vm.$t('fullscreen.showLabel')))])]):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <b-button\n    v-if=\"isSupported\" @click.prevent=\"toggleFullscreen\"\n    ref=\"button\" variant=\"dark\" class=\"fullscreen-button\" :title=\"title\"\n  >\n    <span v-show=\"isFullscreen\">{{ $t('fullscreen.exitLabel') }}</span>\n    <span v-show=\"!isFullscreen\">{{ $t('fullscreen.showLabel') }}</span>\n  </b-button>\n</template>\n\n<script>\nexport default {\n  name: 'FullscreenButton',\n  props: {\n    element: {\n      type: [Function, String, Object],\n      required: true\n    }\n  },\n  data() {\n    return {\n      isFullscreen: false,\n      doc: document,\n      listener: this.onChange.bind(this)\n    };\n  },\n  computed: {\n    title() {\n      return this.isFullscreen ? this.$t('fullscreen.exit') : this.$t('fullscreen.show');\n    },\n    isSupported() {\n      if (!this.getElement()) {\n        return false;\n      }\n      return Boolean(this.doc.body.requestFullscreen && this.doc.fullscreenEnabled);\n    }\n  },\n  watch: {\n    element: {\n      immediate: true,\n      handler() {\n        this.forceClose();\n        const el = this.getElement();\n        if (el) {\n          this.doc = el.ownerDocument;\n        }\n      }\n    },\n    isFullscreen(active) {\n      console.trace(active);\n      if (active) {\n        this.doc.addEventListener('fullscreenchange', this.listener);\n      }\n      else {\n        this.doc.removeEventListener('fullscreenchange', this.listener);\n      }\n      this.getElement().classList.toggle('fullscreen', active);\n      this.$refs.button.blur();\n      this.$emit('changed', active);\n    }\n  },\n  beforeDestroy() {\n    this.forceClose();\n  },\n  methods: {\n    forceClose() {\n      if (this.isFullscreen) {\n        this.doc.exitFullscreen();\n      }\n    },\n    getElement() {\n      if (typeof this.element === 'string') {\n        return document.querySelector(this.element);\n      }\n      else if (typeof this.element === 'function') {\n        return this.element();\n      }\n      else {\n        return this.element;\n      }\n    },\n    onChange() {\n      if (this.isFullscreen && !this.doc.fullscreenElement) {\n        this.isFullscreen = false;\n      }\n    },\n    toggleFullscreen() {\n      if (!this.isSupported) {\n        return;\n      }\n      if (this.isFullscreen) {\n        this.doc.exitFullscreen()\n          .then(() => this.isFullscreen = false);\n      } else {\n        this.getElement().requestFullscreen()\n          .then(() => this.isFullscreen = true);\n      }\n    },\n  }\n};\n</script>\n\n<style lang=\"scss\">\n#stac-browser {\n  .fullscreen {\n    background-color: white;\n    overflow: auto;\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FullscreenButton.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FullscreenButton.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./FullscreenButton.vue?vue&type=template&id=6b6ad3f8\"\nimport script from \"./FullscreenButton.vue?vue&type=script&lang=js\"\nexport * from \"./FullscreenButton.vue?vue&type=script&lang=js\"\nimport style0 from \"./FullscreenButton.vue?vue&type=style&index=0&id=6b6ad3f8&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","isSupported","ref","staticClass","attrs","title","on","$event","preventDefault","toggleFullscreen","apply","arguments","directives","name","rawName","value","isFullscreen","expression","_v","_s","$t","_e","staticRenderFns","props","element","type","Function","String","Object","required","data","doc","document","listener","onChange","bind","computed","getElement","Boolean","body","requestFullscreen","fullscreenEnabled","watch","immediate","handler","forceClose","el","ownerDocument","active","console","trace","addEventListener","removeEventListener","classList","toggle","$refs","button","blur","$emit","beforeDestroy","methods","exitFullscreen","querySelector","fullscreenElement","then","component"],"sourceRoot":""}