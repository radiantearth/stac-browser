{"version":3,"file":"js/9551.4a9324c9.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileJSON.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/net.js"],"sourcesContent":["/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See https://mapbox.com/developers/api/.\n */\n\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n    this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this),\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\n      } catch {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection,\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_,\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState('ready');\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n}\n\nexport default TileJSON;\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/net\n */\nimport {getUid} from './util.js';\n\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n  script.async = true;\n  script.src =\n    url +\n    (url.includes('?') ? '&' : '?') +\n    (callbackParam || 'callback') +\n    '=' +\n    key;\n  const timer = setTimeout(function () {\n    cleanup();\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n  document.head.appendChild(script);\n}\n\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ResponseError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.response = response;\n  }\n}\n\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n\n    /**\n     * @type {string}\n     */\n    this.name = 'ClientError';\n\n    /**\n     * @type {XMLHttpRequest}\n     */\n    this.client = client;\n  }\n}\n\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target;\n      // status will be 0 for file:// urls\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\n        let data;\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n  return new URL(url, base).href;\n}\n\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n  global.XMLHttpRequest = xhr;\n}\n\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}\n"],"names":["TILELOADSTART","TILELOADEND","TILELOADERROR","TileJSON","constructor","options","super","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","wrapX","undefined","transition","zDirection","this","tileJSON_","tileSize_","tileSize","url","jsonp","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","Error","event","status","response","JSON","parse","responseText","getTileJSON","epsg4326Projection","sourceProjection","getProjection","extent","transform","gridExtent","minZoom","maxZoom","tileGrid","tileUrlFunction","getAttributions","attributionExtent","setAttributions","frameState","setState","TileImage","defaultTileLoadFunction","tilePixelRatio","urls","key","attributionsCollapsible","tileClass","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","getGutterForProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","CHANGE","handleTileChange","getTile","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","uid","tileState","getState","type","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey","join","callback","errback","callbackParam","script","document","createElement","cleanup","window","parentNode","removeChild","async","includes","timer","setTimeout","data","clearTimeout","head","appendChild","ResponseError","message","name","ClientError","getJSON","Promise","resolve","reject","onLoad","target","err","onError","setRequestHeader","resolveUrl","base","URL","href"],"sourceRoot":""}