{"version":3,"file":"js/7500.4bb1078b.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/wms.js","webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/wms\n */\n\nimport {decode} from '../Image.js';\nimport {getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {floor, round} from '../math.js';\nimport {get as getProjection} from '../proj.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n\n/**\n * @param {string} baseUrl Base URL.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params WMS params. Will be modified in place.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, size, projection, params) {\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  const v13 = compareVersions(params['VERSION'], '1.3') >= 0;\n  params[v13 ? 'CRS' : 'SRS'] = projection.getCode();\n  const bbox =\n    v13 && axisOrientation.startsWith('ne')\n      ? [extent[1], extent[0], extent[3], extent[2]]\n      : extent;\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(baseUrl, params);\n}\n\n/**\n * @param {import(\"../extent\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio pixel ratio.\n * @param {import(\"../proj.js\").Projection} projection Projection.\n * @param {string} url WMS service url.\n * @param {Object} params WMS params.\n * @param {import(\"./wms.js\").ServerType} serverType The type of the remote WMS server.\n * @return {string} Image src.\n */\nexport function getImageSrc(\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  url,\n  params,\n  serverType,\n) {\n  params = Object.assign({REQUEST: 'GetMap'}, params);\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  if (pixelRatio != 1) {\n    switch (serverType) {\n      case 'geoserver':\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case 'mapserver':\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case 'carmentaserver':\n      case 'qgis':\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        throw new Error('Unknown `serverType` configured');\n    }\n  }\n\n  const src = getRequestUrl(url, extent, imageSize, projection, params);\n  return src;\n}\n\n/**\n * @param {Object} params WMS params.\n * @param {string} request WMS `REQUEST`.\n * @return {Object} WMS params with required properties set.\n */\nexport function getRequestParams(params, request) {\n  return Object.assign(\n    {\n      'REQUEST': request,\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'FORMAT': 'image/png',\n      'STYLES': '',\n      'TRANSPARENT': 'TRUE',\n    },\n    params,\n  );\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT` and `BBOX` will be set\n * dynamically. `CRS` (`SRS` for WMS version < 1.3.0) will is derived from the `proection` config.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {string} url WMS service URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for WMS images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const hidpi = options.hidpi === undefined ? true : options.hidpi;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio || 1.5;\n  const load = options.load || decode;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return (extent, resolution, pixelRatio) => {\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    if (pixelRatio != 1 && (!hidpi || options.serverType === undefined)) {\n      pixelRatio = 1;\n    }\n    const src = getImageSrc(\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      options.url,\n      getRequestParams(options.params, 'GetMap'),\n      options.serverType,\n    );\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n\n/**\n * Get the GetFeatureInfo URL for the passed coordinate and resolution. Returns `undefined` if the\n * GetFeatureInfo URL cannot be constructed.\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function. In addition to\n * the params required by the loader, `INFO_FORMAT` should be specified, it defaults to\n * `application/json`. If `QUERY_LAYERS` is not provided, then the layers specified in the `LAYERS`\n * parameter will be used.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nexport function getFeatureInfoUrl(options, coordinate, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const projectionObj = getProjection(options.projection || 'EPSG:3857');\n\n  const extent = getForViewAndSize(\n    coordinate,\n    resolution,\n    0,\n    GETFEATUREINFO_IMAGE_SIZE,\n  );\n\n  const baseParams = {\n    'QUERY_LAYERS': options.params['LAYERS'],\n    'INFO_FORMAT': 'application/json',\n  };\n  Object.assign(\n    baseParams,\n    getRequestParams(options.params, 'GetFeatureInfo'),\n    options.params,\n  );\n\n  const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n  const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n  const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n  baseParams[v13 ? 'I' : 'X'] = x;\n  baseParams[v13 ? 'J' : 'Y'] = y;\n\n  return getRequestUrl(\n    options.url,\n    extent,\n    GETFEATUREINFO_IMAGE_SIZE,\n    projectionObj,\n    baseParams,\n  );\n}\n\n/**\n * Get the GetLegendGraphic URL, optionally optimized for the passed resolution and possibly\n * including any passed specific parameters. Returns `undefined` if the GetLegendGraphic URL\n * cannot be constructed.\n *\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function.\n * @param {number} [resolution] Resolution. If not provided, `SCALE` will not be calculated and\n * included in URL.\n * @return {string|undefined} GetLegendGraphic URL.\n * @api\n */\nexport function getLegendUrl(options, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'REQUEST': 'GetLegendGraphic',\n    'FORMAT': 'image/png',\n  };\n\n  if (resolution !== undefined) {\n    const mpu =\n      getProjection(options.projection || 'EPSG:3857').getMetersPerUnit() || 1;\n    const pixelSize = 0.00028;\n    baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n  }\n\n  Object.assign(baseParams, options.params);\n\n  if (options.params !== undefined && baseParams['LAYER'] === undefined) {\n    const layers = baseParams['LAYERS'];\n    const isSingleLayer = !Array.isArray(layers) || layers.length !== 1;\n    if (!isSingleLayer) {\n      return undefined;\n    }\n    baseParams['LAYER'] = layers;\n  }\n\n  return appendParams(options.url, baseParams);\n}\n","/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"names":["DEFAULT_VERSION","GETFEATUREINFO_IMAGE_SIZE","getRequestUrl","baseUrl","extent","size","projection","params","axisOrientation","getAxisOrientation","v13","getCode","bbox","startsWith","join","getImageSrc","resolution","pixelRatio","url","serverType","Object","assign","REQUEST","imageResolution","imageSize","DECIMALS","dpi","Error","src","getRequestParams","request","createLoader","options","hidpi","undefined","ratio","load","crossOrigin","getRequestExtent","image","Image","then","getFeatureInfoUrl","coordinate","projectionObj","baseParams","x","y","getLegendUrl","mpu","getMetersPerUnit","pixelSize","layers","isSingleLayer","Array","isArray","length","fromResolutionLike","Math","min","DEFAULT_WMS_VERSION","ReprojImage","constructor","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","interpolate","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","ImageState","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","super","this","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","width","height","getResolution","changed","ERROR","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","attributions","on","once","un","loader","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","wantedProjection_","getResolutions","setResolutions","findNearestResolution","idx","sourceProjection","getImageInternal","getRevision","dispose","getInterpolate","requestExtent","requestResolution","addEventListener","handleImageChange","bind","event","loading","hasListener","dispatchEvent","defaultImageLoadFunction","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sourceRoot":""}