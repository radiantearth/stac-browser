{"version":3,"file":"js/6008.f049c623.js","mappings":"iMA4EA,MAAMA,UAAyB,aAI7B,WAAAC,CAAYC,GACV,MAAMC,EAAcC,OAAOC,OAAO,CAAC,EAAGH,GAEtCI,MAAMH,GAMNI,KAAKC,gBAAkBN,EAAQO,WAAa,CAAC,EAM7CF,KAAKG,cAAe,QAClBR,EAAQS,MACRJ,KAAKC,gBACLN,EAAQU,QAOVL,KAAKM,wBAA0BX,EAAQY,mBACzC,CAKA,cAAAC,GACE,MAAMC,EAAaZ,OAAOa,KAAKV,KAAKG,aAAaM,YAAYE,IAC1DC,IAAS,CACRA,UACGZ,KAAKG,aAAaM,WAAWG,MAGpC,OAAO,IAAI,IAAyBZ,KAAM,CACxCa,aAAcb,KAAKG,aAAaW,QAAQC,wBACxCC,eAAgBhB,KAAKG,aAAaW,QAAQG,0BAC1CC,qBAAsBlB,KAAKM,sBAC3Ba,SAAUnB,KAAKG,aAAagB,SAC5BV,WACmF,GAIvF,CAMA,oBAAAW,CAAqBlB,GACnBL,OAAOC,OAAOE,KAAKC,gBAAiBC,GACpCF,KAAKqB,SACP,EAGF,c","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/layer/WebGLPoints.js"],"sourcesContent":["/**\n * @module ol/layer/WebGLPoints\n */\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {parseLiteralStyle} from '../webgl/styleparser.js';\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/flat.js').FlatStyle} style Literal style to apply to the layer features.\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\n * to determine if a style applies. If no filter is included, the rule always applies.\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLPoints.js\").default#updateStyleVariables} method.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   'circle-radius': 8,\n *   'circle-fill-color': '#33AAFF',\n *   'circle-opacity': 0.9\n * }\n * ```\n *\n * ```js\n * const style = {\n *   'icon-src': '../static/exclamation-mark.png',\n *   'icon-offset': [0, 12],\n *   'icon-width': 4,\n *   'icon-height': 8\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @deprecated Use ol/layer/WebGLVector instead\n */\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n\n    super(baseOptions);\n\n    /**\n     * @type {import('../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @private\n     * @type {import('../webgl/styleparser.js').StyleParseResult}\n     */\n    this.parseResult_ = parseLiteralStyle(\n      options.style,\n      this.styleVariables_,\n      options.filter,\n    );\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const attributes = Object.keys(this.parseResult_.attributes).map(\n      (name) => ({\n        name,\n        ...this.parseResult_.attributes[name],\n      }),\n    );\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitDetectionEnabled: !this.hitDetectionDisabled_,\n      uniforms: this.parseResult_.uniforms,\n      attributes:\n        /** @type {Array<import('../renderer/webgl/PointsLayer.js').CustomAttribute>} */ (\n          attributes\n        ),\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\nexport default WebGLPointsLayer;\n"],"names":["WebGLPointsLayer","constructor","options","baseOptions","Object","assign","super","this","styleVariables_","variables","parseResult_","style","filter","hitDetectionDisabled_","disableHitDetection","createRenderer","attributes","keys","map","name","vertexShader","builder","getSymbolVertexShader","fragmentShader","getSymbolFragmentShader","hitDetectionEnabled","uniforms","updateStyleVariables","changed"],"sourceRoot":""}