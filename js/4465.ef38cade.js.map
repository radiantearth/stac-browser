{"version":3,"file":"js/4465.ef38cade.js","mappings":"4RAeO,SAASA,EAAaC,EAAKC,GAEhC,MAAMC,EAAY,GAElBC,OAAOC,KAAKH,GAAQI,QAAQ,SAAUC,GAClB,OAAdL,EAAOK,SAA6BC,IAAdN,EAAOK,IAC/BJ,EAAUM,KAAKF,EAAI,IAAMG,mBAAmBR,EAAOK,IAEvD,GACA,MAAMI,EAAKR,EAAUS,KAAK,KAK1B,OAHAX,EAAMA,EAAIY,QAAQ,QAAS,IAE3BZ,GAAOA,EAAIa,SAAS,KAAO,IAAM,IAC1Bb,EAAMU,CACf,CAEA,MAAMI,EAAS,SACTC,EAAS,SACTC,EAAS,SACTC,EAAa,UAWZ,SAASC,EAAkBC,EAAUC,EAAGC,EAAGC,EAAGC,GACnD,OAAOJ,EACJP,QAAQE,EAAQM,EAAEI,YAClBZ,QAAQG,EAAQM,EAAEG,YAClBZ,QAAQI,EAAQM,EAAEE,YAClBZ,QAAQK,EAAY,WACnB,QAAaV,IAATgB,EACF,MAAM,IAAIE,MACR,6EAGJ,OAAQF,EAAOD,GAAGE,UACpB,EACJ,CASO,SAASE,EAAQC,EAAMP,EAAGC,EAAGC,GAClC,MAAMM,GAAO,QAAQR,EAAGC,EAAGC,GACrBO,GAAQ,QAAOD,EAAMD,EAAKG,QAChC,OAAOH,EAAKE,EACd,CAMO,SAASE,EAAUC,GACxB,MAAML,EAAO,GACb,IAAIM,EAAQ,sBAAsBC,KAAKF,GACvC,GAAIC,EAAO,CAET,MAAME,EAAgBF,EAAM,GAAGG,WAAW,GACpCC,EAAeJ,EAAM,GAAGG,WAAW,GACzC,IAAIE,EACJ,IAAKA,EAAWH,EAAeG,GAAYD,IAAgBC,EACzDX,EAAKnB,KAAKwB,EAAIpB,QAAQqB,EAAM,GAAIM,OAAOC,aAAaF,KAEtD,OAAOX,CACT,CAEA,GADAM,EAAQ,kBAAkBC,KAAKF,GAC3BC,EAAO,CAET,MAAMQ,EAAOC,SAAST,EAAM,GAAI,IAChC,IAAK,IAAIU,EAAID,SAAST,EAAM,GAAI,IAAKU,GAAKF,EAAME,IAC9ChB,EAAKnB,KAAKwB,EAAIpB,QAAQqB,EAAM,GAAIU,EAAEnB,aAEpC,OAAOG,CACT,CAEA,OADAA,EAAKnB,KAAKwB,GACHL,CACT,C,wBCpFO,SAASiB,EAAexB,EAAGC,EAAGC,EAAGuB,GACtC,YAAkBtC,IAAdsC,GACFA,EAAU,GAAKzB,EACfyB,EAAU,GAAKxB,EACfwB,EAAU,GAAKvB,EACRuB,GAEF,CAACzB,EAAGC,EAAGC,EAChB,CAQO,SAASwB,EAAU1B,EAAGC,EAAGC,GAC9B,OAAOF,EAAI,IAAMC,EAAI,IAAMC,CAC7B,CAOO,SAASyB,EAAOF,GACrB,OAAOC,EAAUD,EAAU,GAAIA,EAAU,GAAIA,EAAU,GACzD,CA4BO,SAASjB,EAAKiB,GACnB,OAAOG,EAAQH,EAAU,GAAIA,EAAU,GAAIA,EAAU,GACvD,CAQO,SAASG,EAAQ5B,EAAGC,EAAGC,GAC5B,OAAQD,GAAKD,GAAKE,CACpB,CAOO,SAAS2B,EAAiBJ,EAAWK,GAC1C,MAAM9B,EAAIyB,EAAU,GACdxB,EAAIwB,EAAU,GACdvB,EAAIuB,EAAU,GAEpB,GAAIK,EAASC,aAAe/B,GAAKA,EAAI8B,EAASE,aAC5C,OAAO,EAET,MAAMC,EAAYH,EAASI,iBAAiBlC,GAC5C,OAAKiC,GAGEA,EAAUE,WAAWlC,EAAGC,EACjC,C","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/uri.js","webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js"],"sourcesContent":["/**\n * @module ol/uri\n */\n\nimport {modulo} from './math.js';\nimport {hashZXY} from './tilecoord.js';\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {number} [maxY] The maximum y coordinate at the given z level.\n * @return {string} The URL.\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template\n    .replace(zRegEx, z.toString())\n    .replace(xRegEx, x.toString())\n    .replace(yRegEx, y.toString())\n    .replace(dashYRegEx, function () {\n      if (maxY === undefined) {\n        throw new Error(\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\n        );\n      }\n      return (maxY - y).toString();\n    });\n}\n\n/**\n * @param {Array<string>} urls List of URLs.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {string} The chosen URL.\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n"],"names":["appendParams","uri","params","keyParams","Object","keys","forEach","k","undefined","push","encodeURIComponent","qs","join","replace","includes","zRegEx","xRegEx","yRegEx","dashYRegEx","renderXYZTemplate","template","z","x","y","maxY","toString","Error","pickUrl","urls","hash","index","length","expandUrl","url","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","String","fromCharCode","stop","parseInt","i","createOrUpdate","tileCoord","getKeyZXY","getKey","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY"],"sourceRoot":""}