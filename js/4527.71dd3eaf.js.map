{"version":3,"file":"js/4527.71dd3eaf.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/@kurkle/color/dist/color.esm.js","webpack://@radiantearth/stac-browser/./node_modules/chart.js/dist/chunks/helpers.dataset.js","webpack://@radiantearth/stac-browser/./node_modules/chart.js/dist/chart.js","webpack://@radiantearth/stac-browser/./node_modules/vue-chartjs/dist/index.js"],"sourcesContent":["/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.5.1\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = round1(chart.height * pixelRatio);\n    const deviceWidth = round1(chart.width * pixelRatio);\n    chart.height = round1(chart.height);\n    chart.width = round1(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nfunction getDatasetClipArea(chart, meta) {\n    const clip = meta._clip;\n    if (clip.disabled) {\n        return false;\n    }\n    const area = getDatasetArea(meta, chart.chartArea);\n    return {\n        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),\n        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),\n        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),\n        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)\n    };\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, getStyle as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, getRtlAdapter as aA, overrideTextDirection as aB, _textX as aC, restoreTextDirection as aD, drawPointLegend as aE, distanceBetweenPoints as aF, noop as aG, _setMinAndMaxByKey as aH, niceNum as aI, almostWhole as aJ, almostEquals as aK, _decimalPlaces as aL, Ticks as aM, log10 as aN, _longestText as aO, _filterBetween as aP, _lookup as aQ, isPatternOrGradient as aR, getHoverColor as aS, clone as aT, _merger as aU, _mergerIf as aV, _deprecated as aW, _splitKey as aX, toFontString as aY, splineCurve as aZ, splineCurveMonotone as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, getDatasetClipArea as ah, _elementsEqual as ai, _isClickEvent as aj, _isBetween as ak, _normalizeAngle as al, _readValueToProps as am, _updateBezierControlPoints as an, _computeSegments as ao, _boundSegments as ap, _steppedInterpolation as aq, _bezierInterpolation as ar, _pointInLine as as, _steppedLineTo as at, _bezierCurveTo as au, drawPoint as av, addRoundedRectPath as aw, toTRBL as ax, toTRBLCorners as ay, _boundSegment as az, isArray as b, fontString as b0, toLineHeight as b1, PITAU as b2, INFINITY as b3, RAD_PER_DEG as b4, QUARTER_PI as b5, TWO_THIRDS_PI as b6, _angleDiff as b7, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.dataset.js.map\n","/*!\n * Chart.js v4.5.1\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getAxisCount() {\n        return this._getAxis().length;\n    }\n    getFirstScaleIdForIndexAxis() {\n        const scales = this.chart.scales;\n        const indexScaleId = this.chart.options.indexAxis;\n        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();\n    }\n    _getAxis() {\n        const axis = {};\n        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n        for (const dataset of this.chart.data.datasets){\n            axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n        }\n        return Object.keys(axis);\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        const axisCount = this._getAxisCount();\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n            const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        const { labels: { pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                        if (data.labels.length && data.datasets.length) {\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    fontColor: color,\n                                    hidden: !chart.getDataVisibility(i),\n                                    lineDash: style.borderDash,\n                                    lineDashOffset: style.borderDashOffset,\n                                    lineJoin: style.borderJoinStyle,\n                                    lineWidth: style.borderWidth,\n                                    strokeStyle: style.borderColor,\n                                    textAlign: textAlign,\n                                    pointStyle: pointStyle,\n                                    borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = undefined;\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        if (this._init === undefined) {\n            return;\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n            this._init = undefined;\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.5.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipSelf(ctx, element, endAngle) {\n    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n    if (innerRadius > 0) {\n        const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n    } else {\n        const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n        if (borderJoinStyle === 'round') {\n            ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n        } else if (borderJoinStyle === 'bevel') {\n            const r = 2 * clipWidth * clipWidth;\n            const endX = -r * Math.cos(endAngle + PI / 2) + x;\n            const endY = -r * Math.sin(endAngle + PI / 2) + y;\n            const startX = r * Math.cos(startAngle + PI / 2) + x;\n            const startY = r * Math.sin(startAngle + PI / 2) + y;\n            ctx.lineTo(endX, endY);\n            ctx.lineTo(startX, startY);\n        }\n    }\n    ctx.closePath();\n    ctx.moveTo(0, 0);\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n        clipSelf(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true,\n        selfJoin: false\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    let fillColor = below;\n    if (below !== above) {\n        if (property === 'x') {\n            clipVertical(ctx, target, area.top);\n            fill(ctx, {\n                line,\n                target,\n                color: above,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipVertical(ctx, target, area.bottom);\n        } else if (property === 'y') {\n            clipHorizontal(ctx, target, area.left);\n            fill(ctx, {\n                line,\n                target,\n                color: below,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipHorizontal(ctx, target, area.right);\n            fillColor = above;\n        }\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: fillColor,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(clipX, firstPoint.y);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(clipX, lastPoint.y);\n        }\n    }\n    ctx.lineTo(clipX, target.first().y);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import { Chart as Chart$1, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nimport { version, isProxy, toRaw, defineComponent, ref, shallowRef, onMounted, onUnmounted, watch, nextTick, h } from 'vue';\n\nconst CommonProps = {\n    data: {\n        type: Object,\n        required: true\n    },\n    options: {\n        type: Object,\n        default: ()=>({})\n    },\n    plugins: {\n        type: Array,\n        default: ()=>[]\n    },\n    datasetIdKey: {\n        type: String,\n        default: \"label\"\n    },\n    updateMode: {\n        type: String,\n        default: undefined\n    }\n};\nconst A11yProps = {\n    ariaLabel: {\n        type: String\n    },\n    ariaDescribedby: {\n        type: String\n    }\n};\nconst Props = {\n    type: {\n        type: String,\n        required: true\n    },\n    destroyDelay: {\n        type: Number,\n        default: 0 // No delay by default\n    },\n    ...CommonProps,\n    ...A11yProps\n};\n\nconst compatProps = version[0] === \"2\" ? (internals, props)=>Object.assign(internals, {\n        attrs: props\n    }) : (internals, props)=>Object.assign(internals, props);\nfunction toRawIfProxy(obj) {\n    return isProxy(obj) ? toRaw(obj) : obj;\n}\nfunction cloneProxy(obj) {\n    let src = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : obj;\n    return isProxy(src) ? new Proxy(obj, {}) : obj;\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets, datasetIdKey) {\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data, datasetIdKey) {\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"index\", {\n        intersect: true\n    }, false);\n}\n\nconst Chart = defineComponent({\n    props: Props,\n    setup (props, param) {\n        let { expose , slots  } = param;\n        const canvasRef = ref(null);\n        const chartRef = shallowRef(null);\n        expose({\n            chart: chartRef\n        });\n        const renderChart = ()=>{\n            if (!canvasRef.value) return;\n            const { type , data , options , plugins , datasetIdKey  } = props;\n            const clonedData = cloneData(data, datasetIdKey);\n            const proxiedData = cloneProxy(clonedData, data);\n            chartRef.value = new Chart$1(canvasRef.value, {\n                type,\n                data: proxiedData,\n                options: {\n                    ...options\n                },\n                plugins\n            });\n        };\n        const destroyChart = ()=>{\n            const chart = toRaw(chartRef.value);\n            if (chart) {\n                if (props.destroyDelay > 0) {\n                    setTimeout(()=>{\n                        chart.destroy();\n                        chartRef.value = null;\n                    }, props.destroyDelay);\n                } else {\n                    chart.destroy();\n                    chartRef.value = null;\n                }\n            }\n        };\n        const update = (chart)=>{\n            chart.update(props.updateMode);\n        };\n        onMounted(renderChart);\n        onUnmounted(destroyChart);\n        watch([\n            ()=>props.options,\n            ()=>props.data\n        ], (param, param1)=>{\n            let [nextOptionsProxy, nextDataProxy] = param, [prevOptionsProxy, prevDataProxy] = param1;\n            const chart = toRaw(chartRef.value);\n            if (!chart) {\n                return;\n            }\n            let shouldUpdate = false;\n            if (nextOptionsProxy) {\n                const nextOptions = toRawIfProxy(nextOptionsProxy);\n                const prevOptions = toRawIfProxy(prevOptionsProxy);\n                if (nextOptions && nextOptions !== prevOptions) {\n                    setOptions(chart, nextOptions);\n                    shouldUpdate = true;\n                }\n            }\n            if (nextDataProxy) {\n                const nextLabels = toRawIfProxy(nextDataProxy.labels);\n                const prevLabels = toRawIfProxy(prevDataProxy.labels);\n                const nextDatasets = toRawIfProxy(nextDataProxy.datasets);\n                const prevDatasets = toRawIfProxy(prevDataProxy.datasets);\n                if (nextLabels !== prevLabels) {\n                    setLabels(chart.config.data, nextLabels);\n                    shouldUpdate = true;\n                }\n                if (nextDatasets && nextDatasets !== prevDatasets) {\n                    setDatasets(chart.config.data, nextDatasets, props.datasetIdKey);\n                    shouldUpdate = true;\n                }\n            }\n            if (shouldUpdate) {\n                nextTick(()=>{\n                    update(chart);\n                });\n            }\n        }, {\n            deep: true\n        });\n        return ()=>{\n            return h(\"canvas\", {\n                role: \"img\",\n                ariaLabel: props.ariaLabel,\n                ariaDescribedby: props.ariaDescribedby,\n                ref: canvasRef\n            }, [\n                h(\"p\", {}, [\n                    slots.default ? slots.default() : \"\"\n                ])\n            ]);\n        };\n    }\n});\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return defineComponent({\n        props: CommonProps,\n        setup (props, param) {\n            let { expose  } = param;\n            const ref = shallowRef(null);\n            const reforwardRef = (chartRef)=>{\n                ref.value = chartRef?.chart;\n            };\n            expose({\n                chart: ref\n            });\n            return ()=>{\n                return h(Chart, compatProps({\n                    ref: reforwardRef\n                }, {\n                    type,\n                    ...props\n                }));\n            };\n        }\n    });\n}\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, createTypedChart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","ret","len","length","alpha","hexString","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","map","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","ok","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","type","this","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","noop","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toPercentage","dimension","endsWith","parseFloat","toDimension","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","push","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","_isClickEvent","PI","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","roundedRange","niceRange","floor","fraction","niceFraction","_factorize","result","sqrt","sort","pop","isNonPrimitive","Symbol","toPrimitive","isNumber","isNaN","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","_filterBetween","values","arrayEvents","listenArrayEvents","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","duration","easing","loop","describe","_fallback","_indexable","_scriptable","name","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","right","bottom","left","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","Error","join","delete","createSubResolver","arr","filter","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","_parseObjectDataRadialScale","meta","count","iScale","_parsing","parsed","parse","EPSILON","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","getRightToLeftAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getLeftToRightAdapter","_itemWidth","getRtlAdapter","rtl","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","getSizeForArea","chartArea","field","getDatasetArea","xScale","yScale","getDatasetClipArea","_clip","disabled","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","toClip","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","convertObjectDataToArray","vScale","iAxisKey","axis","vAxisKey","adata","isStacked","stacked","getStackKey","indexScale","valueScale","getUserBounds","minDefined","maxDefined","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","dataset","createDataContext","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","computeMinSampleSize","curr","_length","updateMinAndPrev","getPixelForValue","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v2","setInflateAmount","inflateAmount","BarController","grouped","_index_","_value_","super","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","_getStacks","currentParsed","iScaleValue","skipNull","find","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","axisID","axisNumber","stackIndex","rects","getRatioAndOffset","circumference","cutout","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","legend","generateLabels","useBorderRadius","borderRadius","fontColor","lineDash","borderDash","lineDashOffset","borderDashOffset","lineJoin","borderJoinStyle","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","PolarAreaController","angleLines","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","DateAdapterBase","members","init","formats","diff","startOf","endOf","adapters","_date","binarySearch","metaset","spanGaps","lookupMethod","_reversePixels","distanceToDefinedLo","findIndex","distanceToDefinedHi","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","skip","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","reverseAlign","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","lineValue","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","valueAt","idx","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","drawGrid","drawLine","setLineDash","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","clipSelf","outerAngleClip","innerAngleClip","clipWidth","clipArc","pixelMargin","angleMargin","toRadiusCorners","parseBorderRadius$1","angleDelta","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","inner","selfJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","halfAngle","halfRadius","fix","radiusOffset","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","boundingRects","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","mouseX","mouseY","inXRange","inYRange","BORDER_COLORS","BACKGROUND_COLORS","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","_element","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","boxWidth","boxHeight","bodyFont","titleFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","rtlHelper","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","usePointStyle","drawOptions","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","textDirection","positionChanged","_positionChanged","_ignoreReplayEvents","handleEvent","plugin_tooltip","afterInit","afterDraw","afterEvent","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","CommonProps","required","default","datasetIdKey","updateMode","A11yProps","ariaLabel","ariaDescribedby","Props","destroyDelay","compatProps","internals","attrs","toRawIfProxy","cloneProxy","src","setOptions","nextOptions","setLabels","currentData","nextLabels","setDatasets","nextDatasets","addedDatasets","nextDataset","currentDataset","cloneData","nextData","setup","param","expose","slots","canvasRef","chartRef","renderChart","clonedData","proxiedData","destroyChart","param1","nextOptionsProxy","nextDataProxy","prevOptionsProxy","prevDataProxy","shouldUpdate","prevOptions","prevLabels","prevDatasets","deep","role","ref","createTypedChart","registerables","reforwardRef","Bar","Pie"],"sourceRoot":""}