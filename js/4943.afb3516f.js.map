{"version":3,"file":"js/4943.afb3516f.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/TileLayerBase.js","webpack://@radiantearth/stac-browser/./node_modules/ol/style/flat.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/ShaderBuilder.js","webpack://@radiantearth/stac-browser/./node_modules/ol/structs/LRUCache.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/Buffer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/PaletteTexture.js","webpack://@radiantearth/stac-browser/./node_modules/ol/expr/gpu.js","webpack://@radiantearth/stac-browser/./node_modules/ol/DataTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/render/webgl/utils.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/TileTexture.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/TileLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/Layer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/ContextEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/PostProcessingPass.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/Helper.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/BaseTileRepresentation.js","webpack://@radiantearth/stac-browser/./node_modules/ol/vec/mat4.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/TileLayerBase\n */\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {descending} from '../../array.js';\nimport {getIntersection, getRotatedViewport, isEmpty} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {toSize} from '../../size.js';\nimport LRUCache from '../../structs/LRUCache.js';\nimport {\n  createOrUpdate as createTileCoord,\n  getKey as getTileCoordKey,\n} from '../../tilecoord.js';\nimport {\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {abstract, getUid} from '../../util.js';\nimport {create as createMat4} from '../../vec/mat4.js';\nimport WebGLLayerRenderer from './Layer.js';\n\nexport const Uniforms = {\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n};\n\n/**\n * Transform a zoom level into a depth value; zoom level zero has a depth value of 0.5, and increasing values\n * have a depth trending towards 0\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\nfunction depthForZ(z) {\n  return 1 / (z + 2);\n}\n\n/**\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\n */\n/**\n * @typedef {Object} TileRepresentationLookup\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\n */\n\n/**\n * @return {TileRepresentationLookup} A new tile representation lookup.\n */\nexport function newTileRepresentationLookup() {\n  return {tileIds: new Set(), representationsByZ: {}};\n}\n\n/**\n * Check if a tile is already in the tile representation lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @return {boolean} The tile is already in the lookup.\n */\nfunction lookupHasTile(tileRepresentationLookup, tile) {\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\n}\n\n/**\n * Add a tile representation to the lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\n * @param {number} z The zoom level.\n */\nfunction addTileRepresentationToLookup(\n  tileRepresentationLookup,\n  tileRepresentation,\n  z,\n) {\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\n  if (!(z in representationsByZ)) {\n    representationsByZ[z] = new Set();\n  }\n  representationsByZ[z].add(tileRepresentation);\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(\n      extent,\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\n    );\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\n    layerState.layer.getRenderSource()\n  );\n  if (!source.getWrapX()) {\n    const gridExtent = source\n      .getTileGridForProjection(frameState.viewState.projection)\n      .getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\n/**\n * @param {import(\"../../source/Tile.js\").default} source The source.\n * @param {import('../../tilecoord.js').TileCoord} tileCoord The tile coordinate.\n * @return {string} The cache key.\n */\nexport function getCacheKey(source, tileCoord) {\n  return `${source.getKey()},${source.getRevision()},${getTileCoordKey(tileCoord)}`;\n}\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {number} [cacheSize=512] The tile representation cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\n */\n\n/**\n * @classdesc\n * Base WebGL renderer for tile layers.\n * @template {BaseLayerType} LayerType\n * @template {import(\"../../Tile.js\").default} TileType\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\n * @extends {WebGLLayerRenderer<LayerType>}\n */\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      uniforms: options.uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * This transform converts representation coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.tileTransform_ = createTransform();\n\n    /**\n     * @type {Array<number>}\n     * @protected\n     */\n    this.tempMat4 = createMat4();\n\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n    this.tempSize_ = [0, 0];\n\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\n     * @protected\n     */\n    this.tileRepresentationCache = new LRUCache(cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection_ = undefined;\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset({\n      uniforms: options.uniforms,\n    });\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.renderedProjection_) {\n      this.renderedProjection_ = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.renderedProjection_) {\n      this.clearCache();\n      this.renderedProjection_ = frameState.viewState.projection;\n    }\n\n    const layer = this.getLayer();\n    const source = layer.getRenderSource();\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n    return source.getState() === 'ready';\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\n   * @return {TileRepresentation} A new tile representation\n   * @protected\n   */\n  createTileRepresentation(options) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(\n    frameState,\n    extent,\n    initialZ,\n    tileRepresentationLookup,\n    preload,\n  ) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileRepresentationCache = this.tileRepresentationCache;\n\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(\n      initialZ - preload,\n      tileGrid.getMinZoom(),\n      tileGrid.getZForResolution(\n        Math.min(\n          tileLayer.getMaxResolution(),\n          map\n            ? map\n                .getView()\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\n            : tileGrid.getResolution(0),\n        ),\n        tileSource.zDirection,\n      ),\n    );\n    const rotation = viewState.rotation;\n    const viewport = rotation\n      ? getRotatedViewport(\n          viewState.center,\n          viewState.resolution,\n          rotation,\n          frameState.size,\n        )\n      : undefined;\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        extent,\n        z,\n        this.tempTileRange_,\n      );\n\n      const tileResolution = tileGrid.getResolution(z);\n\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          const cacheKey = getCacheKey(tileSource, tileCoord);\n\n          /** @type {TileRepresentation} */\n          let tileRepresentation;\n\n          /** @type {TileType} */\n          let tile;\n\n          if (tileRepresentationCache.containsKey(cacheKey)) {\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\n            tile = tileRepresentation.tile;\n          }\n          if (\n            !tileRepresentation ||\n            tileRepresentation.tile.key !== tileSource.getKey()\n          ) {\n            tile = tileSource.getTile(\n              z,\n              x,\n              y,\n              frameState.pixelRatio,\n              viewState.projection,\n            );\n            if (!tile) {\n              continue;\n            }\n          }\n\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\n            continue;\n          }\n\n          if (!tileRepresentation) {\n            tileRepresentation = this.createTileRepresentation({\n              tile: tile,\n              grid: tileGrid,\n              helper: this.helper,\n              gutter: gutter,\n            });\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\n          } else {\n            tileRepresentation.setTile(tile);\n          }\n\n          addTileRepresentationToLookup(\n            tileRepresentationLookup,\n            tileRepresentation,\n            z,\n          );\n\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([\n                tile,\n                tileSourceKey,\n                tileGrid.getTileCoordCenter(tileCoord),\n                tileResolution,\n              ]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\n   * @protected\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} If returns false, tile mask rendering will be skipped\n   * @protected\n   */\n  beforeTilesMaskRender(frameState) {\n    return false;\n  }\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\n   * @param {number} tileResolution Tile resolution\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\n   * @param {number} depth Depth\n   * @param {number} gutter Gutter\n   * @param {number} alpha Alpha\n   * @protected\n   */\n  renderTile(\n    tileRepresentation,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {}\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {number} tileZ Tile Z\n   * @param {import(\"../../extent.js\").Extent} extent Render extent\n   * @param {number} depth Depth\n   * @protected\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {}\n\n  drawTile_(\n    frameState,\n    tileRepresentation,\n    tileZ,\n    gutter,\n    extent,\n    alphaLookup,\n    tileGrid,\n  ) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    const tile = tileRepresentation.tile;\n    const tileCoord = tile.tileCoord;\n    const tileCoordKey = getTileCoordKey(tileCoord);\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n    const tileResolution = tileGrid.getResolution(tileZ);\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n    const tileOrigin = tileGrid.getOrigin(tileZ);\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n    // tiles with alpha are rendered last to allow blending\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\n    if (alpha < 1) {\n      frameState.animate = true;\n    }\n\n    const viewState = frameState.viewState;\n    const centerX = viewState.center[0];\n    const centerY = viewState.center[1];\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\n\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n\n    const tileScale = viewState.resolution / tileResolution;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    resetTransform(this.tileTransform_);\n    scaleTransform(\n      this.tileTransform_,\n      2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\n      -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter),\n    );\n    rotateTransform(this.tileTransform_, viewState.rotation);\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\n    translateTransform(\n      this.tileTransform_,\n      (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter,\n      (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter,\n    );\n\n    this.renderTile(\n      /** @type {TileRepresentation} */ (tileRepresentation),\n      this.tileTransform_,\n      frameState,\n      extent,\n      tileResolution,\n      tileSize,\n      tileOrigin,\n      tileExtent,\n      depth,\n      gutter,\n      alpha,\n    );\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    this.frameState = frameState;\n    this.renderComplete = true;\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const extent = getRenderExtent(frameState, frameState.extent);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection,\n    );\n\n    /**\n     * @type {TileRepresentationLookup}\n     */\n    const tileRepresentationLookup = newTileRepresentationLookup();\n\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(\n        viewState.nextResolution,\n        tileSource.zDirection,\n      );\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(\n        frameState,\n        nextExtent,\n        targetZ,\n        tileRepresentationLookup,\n        preload,\n      );\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(\n          frameState,\n          extent,\n          z - 1,\n          tileRepresentationLookup,\n          preload - 1,\n        );\n      }, 0);\n    }\n\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n    const alphaLookup = {};\n\n    let blend = false;\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\n\n    // look for cached tiles to use if a target tile is not ready\n    if (z in representationsByZ) {\n      const uid = getUid(this);\n      const time = frameState.time;\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tile = tileRepresentation.tile;\n        if (tile.getState() === TileState.EMPTY) {\n          continue;\n        }\n        const tileCoord = tile.tileCoord;\n\n        if (tileRepresentation.ready) {\n          const alpha = tile.getAlpha(uid, time);\n          if (alpha === 1) {\n            // no need to look for alt tiles\n            tile.endTransition(uid);\n            continue;\n          }\n          blend = true;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          alphaLookup[tileCoordKey] = alpha;\n        }\n        this.renderComplete = false;\n\n        // first look for child tiles (at z + 1)\n        const coveredByChildren = this.findAltTiles_(\n          tileGrid,\n          tileCoord,\n          z + 1,\n          tileRepresentationLookup,\n        );\n\n        if (coveredByChildren) {\n          continue;\n        }\n\n        // next look for parent tiles\n        const minZoom = tileGrid.getMinZoom();\n        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n          const coveredByParent = this.findAltTiles_(\n            tileGrid,\n            tileCoord,\n            parentZ,\n            tileRepresentationLookup,\n          );\n\n          if (coveredByParent) {\n            break;\n          }\n        }\n      }\n    }\n\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\n\n    const renderTileMask = this.beforeTilesMaskRender(frameState);\n\n    if (renderTileMask) {\n      for (let j = 0, jj = zs.length; j < jj; ++j) {\n        const tileZ = zs[j];\n        for (const tileRepresentation of representationsByZ[tileZ]) {\n          const tileCoord = tileRepresentation.tile.tileCoord;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          // do not render the tile mask if alpha < 1\n          if (tileCoordKey in alphaLookup) {\n            continue;\n          }\n          const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n          this.renderTileMask(\n            /** @type {TileRepresentation} */ (tileRepresentation),\n            tileZ,\n            tileExtent,\n            depthForZ(tileZ),\n          );\n        }\n      }\n    }\n\n    this.beforeTilesRender(frameState, blend);\n\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\n      const tileZ = zs[j];\n      for (const tileRepresentation of representationsByZ[tileZ]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          continue;\n        }\n\n        this.drawTile_(\n          frameState,\n          tileRepresentation,\n          tileZ,\n          gutter,\n          extent,\n          alphaLookup,\n          tileGrid,\n        );\n      }\n    }\n\n    if (z in representationsByZ) {\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          this.drawTile_(\n            frameState,\n            tileRepresentation,\n            z,\n            gutter,\n            extent,\n            alphaLookup,\n            tileGrid,\n          );\n        }\n      }\n    }\n\n    this.beforeFinalize(frameState);\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent,\n    );\n\n    const canvas = this.helper.getCanvas();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    while (tileRepresentationCache.canExpireCache()) {\n      const tileRepresentation = tileRepresentationCache.pop();\n      tileRepresentation.dispose();\n    }\n\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  beforeFinalize(frameState) {\n    return;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\n   * tile representations by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\n      tileCoord,\n      altZ,\n      this.tempTileRange_,\n    );\n\n    if (!tileRange) {\n      return false;\n    }\n\n    let covered = true;\n    const tileRepresentationCache = this.tileRepresentationCache;\n    const source = this.getLayer().getRenderSource();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\n        let loaded = false;\n        if (tileRepresentationCache.containsKey(cacheKey)) {\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\n          if (\n            tileRepresentation.ready &&\n            !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)\n          ) {\n            addTileRepresentationToLookup(\n              tileRepresentationLookup,\n              tileRepresentation,\n              altZ,\n            );\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @override\n   */\n  clearCache() {\n    super.clearCache();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.dispose(),\n    );\n    tileRepresentationCache.clear();\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    this.tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.setHelper(this.helper),\n    );\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n    delete this.frameState;\n  }\n}\n\nexport default WebGLBaseTileLayerRenderer;\n","/**\n * @module ol/style/flat\n */\n\n/**\n * @api\n * @fileoverview Vector layers can be styled with an object literal containing properties for\n * stroke, fill, image, and text styles.  The types below can be composed into a single object.\n * For example, a style with both stroke and fill properties could look like this:\n *\n *     const style = {\n *       'stroke-color': 'yellow',\n *       'stroke-width': 1.5,\n *       'fill-color': 'orange',\n *     };\n *\n * See details about the available properties depending on what type of symbolizer should be applied:\n *  {@link module:ol/style/flat~FlatStroke Stroke} - properties for applying a stroke to lines and polygons\n *  {@link module:ol/style/flat~FlatFill Fill} - properties for filling polygons\n *  {@link module:ol/style/flat~FlatText Text} - properties for labeling points, lines, and polygons\n *  {@link module:ol/style/flat~FlatIcon Icon} - properties for rendering points with an icon\n *  {@link module:ol/style/flat~FlatCircle Circle} - properties for rendering points with a circle\n *  {@link module:ol/style/flat~FlatShape Shape} - properties for rendering points with a regular shape\n *\n * To conditionally apply styles based on a filter, a list of {@link module:ol/style/flat~Rule rules} can be used.\n * For example, to style points with a big orange circle if the population is greater than 1 million and\n * a smaller blue circle otherwise:\n *\n *     const rules = [\n *       {\n *         filter: ['>', ['get', 'population'], 1_000_000],\n *         style: {\n *           'circle-radius': 10,\n *           'circle-fill-color': 'red',\n *         }\n *       },\n *       {\n *         else: true,\n *         style: {\n *           'circle-radius': 5,\n *           'circle-fill-color': 'blue',\n *         },\n *       },\n *     ];\n */\n\n/**\n * A literal boolean (e.g. `true`) or an expression that evaluates to a boolean (e.g. `['>', ['get', 'population'], 1_000_000]`).\n *\n * @typedef {boolean|Array} BooleanExpression\n */\n\n/**\n * A literal string (e.g. `'hello'`) or an expression that evaluates to a string (e.g. `['get', 'greeting']`).\n *\n * @typedef {string|Array} StringExpression\n */\n\n/**\n * A literal number (e.g. `42`) or an expression that evaluates to a number (e.g. `['+', 40, 2]`).\n *\n * @typedef {number|Array} NumberExpression\n */\n\n/**\n * A CSS named color (e.g. `'blue'`), an array of 3 RGB values (e.g. `[0, 255, 0]`), an array of 4 RGBA values\n * (e.g. `[0, 255, 0, 0.5]`), or an expression that evaluates to one of these color types (e.g. `['get', 'color']`).\n *\n * @typedef {import(\"../color.js\").Color|string|Array} ColorExpression\n */\n\n/**\n * An array of numbers (e.g. `[1, 2, 3]`) or an expression that evaluates to the same (e.g. `['get', 'values']`).\n *\n * @typedef {Array<number>|Array} NumberArrayExpression\n */\n\n/**\n * An array of two numbers (e.g. `[10, 20]`) or an expression that evaluates to the same (e.g. `['get', 'size']`).\n *\n * @typedef {number|Array<number>|Array} SizeExpression\n */\n\n/**\n * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method\n * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.\n * @api\n *\n * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle\n */\n\n/**\n * A flat style literal or an array of the same.\n *\n * @typedef {FlatStyle|Array<FlatStyle>|Array<Rule>} FlatStyleLike\n */\n\n/**\n * Fill style properties applied to polygon features.\n *\n * @typedef {Object} FlatFill\n * @property {ColorExpression} [fill-color] The fill color. `'none'` means no fill and no hit detection (applies to Canvas only).\n * @property {StringExpression} [fill-pattern-src] Fill pattern image source URI. If `fill-color` is defined as well,\n * it will be used to tint this image. (Expressions only in Canvas)\n * @property {SizeExpression} [fill-pattern-size] Fill pattern image size in pixels.\n * Can be used together with `fill-pattern-offset` to define the sub-rectangle to use\n * from a fill pattern image sprite sheet.\n * @property {SizeExpression} [fill-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original fill pattern image.\n * @property {import(\"./Icon.js\").IconOrigin} [fill-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. (WebGL only)\n */\n\n/**\n * Stroke style properties applied to line strings and polygon boundaries. To apply a stroke, at least one of\n * `stroke-color` or `stroke-width` must be provided.\n *\n * @typedef {Object} FlatStroke\n * @property {ColorExpression} [stroke-color] The stroke color.\n * @property {NumberExpression} [stroke-width] Stroke pixel width.\n * @property {StringExpression} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [stroke-offset] Stroke offset in pixel. A positive value offsets the line to the right,\n * relative to the direction of the line. (WebGL only)\n * @property {string} [stroke-pattern-src] Stroke pattern image source URI. If `stroke-color` is defined as well,\n * it will be used to tint this image. (WebGL only)\n * @property {SizeExpression} [stroke-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin,\n * define the sub-rectangle to use from the original fill pattern image. (WebGL only)\n * @property {import(\"./Icon.js\").IconOrigin} [stroke-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. (WebGL only)\n * @property {SizeExpression} [stroke-pattern-size] Stroke pattern image size in pixel. Can be used together with `stroke-pattern-offset` to define the\n * sub-rectangle to use from the origin (sprite) fill pattern image. (WebGL only)\n * @property {NumberExpression} [stroke-pattern-spacing] Spacing between each pattern occurrence in pixels; 0 if undefined.\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Label style properties applied to all features. At a minimum, a `text-value` must be provided.\n * Note: text style is currently not supported in WebGL layers\n *\n * @typedef {Object} FlatText\n * @property {StringExpression} [text-value] Text content (with `\\n` for line breaks).\n * @property {StringExpression} [text-font='10px sans-serif'] Font style as [CSS `font`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font) value.\n * @property {NumberExpression} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {NumberExpression} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {NumberExpression} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {BooleanExpression} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {StringExpression} [text-placement='point'] Text placement.\n * @property {NumberExpression} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when\n * `text-placement` is set to `'line'`. Overrides `text-align`.\n * @property {SizeExpression} [text-scale] Scale.\n * @property {BooleanExpression} [text-rotate-with-view=false] Whether to rotate the text with the view.\n * @property {NumberExpression} [text-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {StringExpression} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `'text-placement': 'point'`. For `'text-placement': 'line'`, the default is to let the renderer choose a\n * placement where `text-max-angle` is not exceeded.\n * @property {StringExpression} [text-justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `text-justify` is ignored for immediate rendering and also for `'text-placement': 'line'`.\n * @property {StringExpression} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {NumberArrayExpression} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n * @property {ColorExpression} [text-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-background-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-stroke-color] The stroke color.\n * @property {StringExpression} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-stroke-width] Stroke pixel width.\n * @property {ColorExpression} [text-background-stroke-color] The stroke color.\n * @property {StringExpression} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-background-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-background-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-background-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-background-stroke-width] Stroke pixel width.\n * @property {import(\"./Style.js\").DeclutterMode} [text-declutter-mode] Declutter mode\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Icon style properties applied to point features. `icon-src` must be provided to render\n * points with an icon.\n *\n * @typedef {Object} FlatIcon\n * @property {string} [icon-src] Image source URI.\n * @property {NumberArrayExpression} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {ColorExpression} [icon-color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {SizeExpression} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {NumberArrayExpression} [icon-displacement=[0,0]] Displacement of the icon.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {NumberExpression} [icon-opacity=1] Opacity of the icon.\n * @property {SizeExpression} [icon-scale=1] Scale.\n * @property {NumberExpression} [icon-width] Width of the icon. If not specified, the actual image width will be used. Cannot be combined\n * with `scale`. (Expressions only in WebGL)\n * @property {NumberExpression} [icon-height] Height of the icon. If not specified, the actual image height will be used. Cannot be combined\n * with `scale`. (Expressions only in WebGL)\n * @property {NumberExpression} [icon-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [icon-rotate-with-view=false] Whether to rotate the icon with the view. (Expressions only supported in Canvas)\n * @property {SizeExpression} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image. (Expressions only in WebGL)\n * @property {import(\"./Style.js\").DeclutterMode} [icon-declutter-mode] Declutter mode (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * Regular shape style properties for rendering point features. At least `shape-points` must be provided.\n *\n * @typedef {Object} FlatShape\n * @property {NumberExpression} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides. (Expressions only in WebGL)\n * @property {ColorExpression} [shape-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [shape-stroke-color] The stroke color.\n * @property {NumberExpression} [shape-stroke-width] Stroke pixel width.\n * @property {StringExpression} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\n * @property {StringExpression} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\n * @property {NumberArrayExpression} [shape-stroke-line-dash] Line dash pattern. (Canvas only)\n * @property {NumberExpression} [shape-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\n * @property {NumberExpression} [shape-stroke-miter-limit=10] Miter limit. (Canvas only)\n * @property {NumberExpression} [shape-radius] Radius of a regular polygon. (Expressions only in WebGL)\n * @property {NumberExpression} [shape-radius2] Second radius to make a star instead of a regular polygon. (Expressions only in WebGL)\n * @property {NumberExpression} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up. (Expressions only in WebGL)\n * @property {NumberArrayExpression} [shape-displacement=[0,0]] Displacement of the shape\n * @property {NumberExpression} [shape-opacity] Shape opacity. (WebGL only)\n * @property {NumberExpression} [shape-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [shape-rotate-with-view=false] Whether to rotate the shape with the view. (Expression only supported in Canvas)\n * @property {SizeExpression} [shape-scale=1] Scale. Unless two-dimensional scaling is required a better\n * result may be obtained with appropriate settings for `shape-radius` and `shape-radius2`.\n * @property {import(\"./Style.js\").DeclutterMode} [shape-declutter-mode] Declutter mode. (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * Circle style properties for rendering point features. At least `circle-radius` must be provided.\n *\n * @typedef {Object} FlatCircle\n * @property {NumberExpression} [circle-radius] Circle radius.\n * @property {ColorExpression} [circle-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [circle-stroke-color] The stroke color.\n * @property {NumberExpression} [circle-stroke-width] Stroke pixel width.\n * @property {StringExpression} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\n * @property {StringExpression} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\n * @property {NumberArrayExpression} [circle-stroke-line-dash] Line dash pattern. (Canvas only)\n * @property {NumberExpression} [circle-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\n * @property {NumberExpression} [circle-stroke-miter-limit=10] Miter limit. (Canvas only)\n * @property {NumberArrayExpression} [circle-displacement=[0,0]] displacement\n * @property {SizeExpression} [circle-scale=1] Scale. A two-dimensional scale will produce an ellipse.\n * Unless two-dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.\n * @property {NumberExpression} [circle-opacity] Circle opacity. (WebGL only)\n * @property {NumberExpression} [circle-rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two-dimensional scale).\n * @property {BooleanExpression} [circle-rotate-with-view=false] Whether to rotate the shape with the view (Expression only supported in Canvas)\n * (meaningful only when used in conjunction with a two-dimensional scale).\n * @property {import(\"./Style.js\").DeclutterMode} [circle-declutter-mode] Declutter mode (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * These default style properties are applied when no other style is given.\n *\n * @typedef {Object} DefaultStyle\n * @property {string} fill-color `'rgba(255,255,255,0.4)'`\n * @property {string} stroke-color `'#3399CC'`\n * @property {number} stroke-width `1.25`\n * @property {number} circle-radius `5`\n * @property {string} circle-fill-color `'rgba(255,255,255,0.4)'`\n * @property {number} circle-stroke-width `1.25`\n * @property {string} circle-stroke-color `'#3399CC'`\n */\n\n/**\n * @return {DefaultStyle} The default flat style.\n */\nexport function createDefaultStyle() {\n  return {\n    'fill-color': 'rgba(255,255,255,0.4)',\n    'stroke-color': '#3399CC',\n    'stroke-width': 1.25,\n    'circle-radius': 5,\n    'circle-fill-color': 'rgba(255,255,255,0.4)',\n    'circle-stroke-width': 1.25,\n    'circle-stroke-color': '#3399CC',\n  };\n}\n\n/**\n * A rule is used to conditionally apply a style. If the rule's filter evaluates to true,\n * the style will be applied.\n *\n * @typedef {Object} Rule\n * @property {FlatStyle|Array<FlatStyle>} style The style to be applied if the filter matches.\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\n * to determine if a style applies. If no filter is included, the rule always applies\n * (unless it is an else rule).\n * @property {boolean} [else] If true, the rule applies only if no other previous rule applies.\n * If the else rule also has a filter, the rule will not apply if the filter does not match.\n */\n\n/**\n * Style variables are provided as an object. The variables can be read in a {@link import(\"../expr/expression.js\").ExpressionValue style expression}\n * using the `['var', 'varName']` operator.\n * Each variable must hold a literal value (not an expression).\n * @typedef {Object<string, number|Array<number>|string|boolean>} StyleVariables\n */\n","/**\n * Class for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../expr/gpu.js';\nimport {LINESTRING_ANGLE_COSINE_CUTOFF} from '../render/webgl/utils.js';\nimport {createDefaultStyle} from '../style/flat.js';\n\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform float u_rotation;\nuniform vec4 u_renderExtent;\nuniform vec2 u_patternOrigin;\nuniform float u_depth;\nuniform mediump int u_hitDetection;\n\nconst float PI = 3.141592653589793238;\nconst float TWO_PI = 2.0 * PI;\nfloat currentLineMetric = 0.; // an actual value will be used in the stroke shaders\n`;\n\nconst DEFAULT_STYLE = createDefaultStyle();\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSymbolSizeExpression('...')\n *   .getSymbolFragmentShader();\n * ```\n *\n * A note on [alpha premultiplication](https://en.wikipedia.org/wiki/Alpha_compositing#Straight_versus_premultiplied):\n * The ShaderBuilder class expects all colors to **not having been alpha-premultiplied!** This is because alpha\n * premultiplication is done at the end of each fragment shader.\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms_ = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes_ = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\n      DEFAULT_STYLE['circle-radius'],\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolRotationExpression_ = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color']),\n    );\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression_ = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.symbolRotateWithView_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color']),\n    );\n\n    /**\n     * @private\n     */\n    this.strokeOffsetExpression_ = '0.';\n\n    /**\n     * @private\n     */\n    this.strokeCapExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeJoinExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeMiterLimitExpression_ = '10.';\n\n    /**\n     * @private\n     */\n    this.strokeDistanceFieldExpression_ = '-1000.';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.fillColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['fill-color']),\n    );\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.vertexShaderFunctions_ = [];\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.fragmentShaderFunctions_ = [];\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings_.push({\n      name: name,\n      type: type,\n      expression: expression,\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolSizeExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolSizeExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol size expression\n   */\n  getSymbolSizeExpression() {\n    return this.symbolSizeExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotationExpression(expression) {\n    this.symbolRotationExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.symbolOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol offset expression\n   */\n  getSymbolOffsetExpression() {\n    return this.symbolOffsetExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolColorExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol color expression\n   */\n  getSymbolColorExpression() {\n    return this.symbolColorExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression_;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.symbolRotateWithView_ = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke width expression, returning value in pixels\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeWidthExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeWidthExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeColorExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current stroke color expression\n   */\n  getStrokeColorExpression() {\n    return this.strokeColorExpression_;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeOffsetExpression(expression) {\n    this.strokeOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeCapExpression(expression) {\n    this.strokeCapExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line join expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeJoinExpression(expression) {\n    this.strokeJoinExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeMiterLimitExpression(expression) {\n    this.strokeMiterLimitExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeDistanceFieldExpression(expression) {\n    this.strokeDistanceFieldExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Fill color expression, evaluate to `vec4`\n   * @return {ShaderBuilder} the builder object\n   */\n  setFillColorExpression(expression) {\n    this.hasFill_ = true;\n    this.fillColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fill color expression\n   */\n  getFillColorExpression() {\n    return this.fillColorExpression_;\n  }\n\n  addVertexShaderFunction(code) {\n    if (this.vertexShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.vertexShaderFunctions_.push(code);\n  }\n  addFragmentShaderFunction(code) {\n    if (this.fragmentShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.fragmentShaderFunctions_.push(code);\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolVertexShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 pxToScreen(vec2 coordPx) {\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\n  return scaled;\n}\n\nvec2 screenToPx(vec2 coordScreen) {\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  v_quadSizePx = ${this.symbolSizeExpression_};\n  vec2 halfSizePx = v_quadSizePx * 0.5;\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\n  vec2 offsetPx = centerOffsetPx;\n  if (a_index == 0.0) {\n    offsetPx -= halfSizePx;\n  } else if (a_index == 1.0) {\n    offsetPx += halfSizePx * vec2(1., -1.);\n  } else if (a_index == 2.0) {\n    offsetPx += halfSizePx;\n  } else {\n    offsetPx += halfSizePx * vec2(-1., 1.);\n  }\n  float angle = ${this.symbolRotationExpression_};\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\n  float c = cos(-angle);\n  float s = sin(-angle);\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\n  vec4 texCoord = ${this.texCoordExpression_};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n  v_angle = angle;\n  c = cos(-v_angle);\n  s = sin(-v_angle);\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolFragmentShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec4 v_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvoid main(void) {\n  if (${this.discardExpression_}) { discard; }\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\n  float c = cos(v_angle);\n  float s = sin(v_angle);\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\n  gl_FragColor = ${this.symbolColorExpression_};\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.05) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a stroke vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeVertexShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_measureStart;\nattribute float a_measureEnd;\nattribute float a_parameters;\nattribute float a_distance;\nattribute vec2 a_joinAngles;\nattribute vec4 a_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return vec4(screenPos, u_depth, 1.0);\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\n  float halfAngle = joinAngle / 2.0;\n  float c = cos(halfAngle);\n  float s = sin(halfAngle);\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\n  float length = 1.0 / s;\n  return angleBisectorNormal * length;\n}\n\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\n  // if on a cap or the join angle is too high, offset the line along the segment normal\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\n    return point - normal * offsetPx;\n  }\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\n}\n\nvoid main(void) {\n  v_angleStart = a_joinAngles.x;\n  v_angleEnd = a_joinAngles.y;\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\n  currentLineMetric = vertexNumber < 1.5 ? a_measureStart : a_measureEnd;\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\n\n  float lineWidth = ${this.strokeWidthExpression_};\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\n\n  // compute segment start/end in px with offset\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\n  \n  // compute current vertex position\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 joinDirection;\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\n  // if angle is too high, do not make a proper join\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\n  } else {\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\n  }\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\n  gl_Position = pxToScreen(positionPx);\n\n  v_segmentStart = segmentStartPx;\n  v_segmentEnd = segmentEndPx;\n  v_width = lineWidth;\n  v_hitColor = a_hitColor;\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\n  v_measureStart = a_measureStart;\n  v_measureEnd = a_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a stroke fragment shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeFragmentShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  vec2 tangent = normalize(end - start);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 startToPoint = point - start;\n  return abs(dot(startToPoint, normal)) - width * 0.5;\n}\n\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  return dot(startToPoint, -tangent);\n}\n\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return buttCapDistanceField(point, start, end) - width * 0.5;\n}\n\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\n  return length(point - start) - width * 0.5 - onSegment;\n}\n\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  float c = cos(joinAngle * 0.5);\n  float s = sin(joinAngle * 0.5);\n  float direction = -sign(sin(joinAngle));\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\n  float radius = width * 0.5 * s;\n  return dot(startToPoint, bisector * direction) - radius;\n}\n\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  float miterLength = 1. / sin(joinAngle * 0.5);\n  float miterLimit = ${this.strokeMiterLimitExpression_};\n  if (miterLength > miterLimit) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  return -1000.;\n}\n\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\n   if (capType == ${stringToGlsl('butt')}) {\n    return buttCapDistanceField(point, start, end);\n  } else if (capType == ${stringToGlsl('square')}) {\n    return squareCapDistanceField(point, start, end, width);\n  }\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\n  if (joinType == ${stringToGlsl('bevel')}) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  } else if (joinType == ${stringToGlsl('miter')}) {\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\n  }\n  return roundJoinDistanceField(point, start, end, width);\n}\n\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\n  if (isCap(joinAngle)) {\n    return capDistanceField(point, start, end, width, capType);\n  }\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\n}\n\nvoid main(void) {\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\n  vec2 startToPoint = currentPoint - v_segmentStart;\n  float lengthToPoint = max(0., min(dot(segmentTangent, startToPoint), segmentLength));\n  float currentLengthPx = lengthToPoint + v_distanceOffsetPx; \n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\n  currentLineMetric = mix(v_measureStart, v_measureEnd, lengthToPoint / segmentLength);\n\n  if (${this.discardExpression_}) { discard; }\n\n  vec4 color = ${this.strokeColorExpression_};\n  float capType = ${this.strokeCapExpression_};\n  float joinType = ${this.strokeJoinExpression_};\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\n  float distance = max(\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\n    max(segmentStartDistance, segmentEndDistance)\n  );\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\n  color.a *= smoothstep(0.5, -0.5, distance);\n  gl_FragColor = color;\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a fill vertex shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillVertexShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute vec4 a_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\n  v_hitColor = a_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a fill fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillFragmentShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(pxPos);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n  gl_FragColor = ${this.fillColorExpression_};\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n}\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  deleteOldest() {\n    const entry = this.pop();\n    if (entry instanceof Disposable) {\n      entry.dispose();\n    }\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    while (this.oldest_) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already',\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/webgl/Buffer\n */\nimport {assert} from '../asserts.js';\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * A size using `#ofSize(buffer)`\n * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `STATIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @param {Float32Array|Uint32Array} array Array.\n   */\n  setArray(array) {\n    const ArrayType = getArrayClassForType(this.type_);\n    if (!(array instanceof ArrayType)) {\n      throw new Error(`Expected ${ArrayType}`);\n    }\n    this.array_ = array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n","/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data,\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\n\nexport default PaletteTexture;\n","/**\n * @module ol/expr/gpu\n */\nimport {asArray} from '../color.js';\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\nimport {toSize} from '../size.js';\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport {\n  BooleanType,\n  CallExpression,\n  ColorType,\n  NumberArrayType,\n  NumberType,\n  Ops,\n  SizeType,\n  StringType,\n  parse,\n  typeName,\n} from './expression.js';\n\n/**\n * @param {string} operator Operator\n * @param {CompilationContext} context Compilation context\n * @return {string} A function name based on the operator, unique in the given context\n */\nfunction computeOperatorFunctionName(operator, context) {\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\n}\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\nexport function numberToGlsl(v) {\n  const s = v.toString();\n  return s.includes('.') ? s : s + '.0';\n}\n\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error(\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.',\n    );\n  }\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\n}\n\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function colorToGlsl(color) {\n  const array = asArray(color);\n  const alpha = array.length > 3 ? array[3] : 1;\n  return arrayToGlsl([array[0] / 255, array[1] / 255, array[2] / 255, alpha]);\n}\n\n/**\n * Normalizes and converts a number or array toa `vec2` array compatible with GLSL.\n * @param {number|import('../size.js').Size} size Size.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function sizeToGlsl(size) {\n  const array = toSize(size);\n  return arrayToGlsl(array);\n}\n\n/** @type {Object<string, number>} */\nconst stringToFloatMap = {};\nlet stringToFloatCounter = 0;\n\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\nexport function getStringNumberEquivalent(string) {\n  if (!(string in stringToFloatMap)) {\n    stringToFloatMap[string] = stringToFloatCounter++;\n  }\n  return stringToFloatMap[string];\n}\n\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\nexport function stringToGlsl(string) {\n  return numberToGlsl(getStringNumberEquivalent(string));\n}\n\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\n\n/**\n * @typedef {import('./expression.js').ParsingContext} ParsingContext\n */\n/**\n *\n * @typedef {import(\"./expression.js\").Expression} Expression\n */\n/**\n *\n * @typedef {import(\"./expression.js\").LiteralExpression} LiteralExpression\n */\n\n/**\n * @typedef {Object} CompilationContextProperty\n * @property {string} name Name\n * @property {number} type Resolved property type\n */\n\n/**\n * @typedef {Object} CompilationContextVariable\n * @property {string} name Name\n * @property {number} type Resolved variable type\n */\n\n/**\n * @typedef {Object} CompilationContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Object<string, CompilationContextProperty>} properties The values for properties used in 'get' expressions.\n * @property {Object<string, CompilationContextVariable>} variables The values for variables used in 'var' expressions.\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n * @property {boolean} featureId Whether the feature ID is used in the expression\n * @property {boolean} geometryType Whether the geometry type is used in the expression\n */\n\n/**\n * @return {CompilationContext} A new compilation context.\n */\nexport function newCompilationContext() {\n  return {\n    inFragmentShader: false,\n    variables: {},\n    properties: {},\n    functions: {},\n    bandCount: 0,\n    featureId: false,\n    geometryType: false,\n  };\n}\n\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\n\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\n\nexport const FEATURE_ID_PROPERTY_NAME = 'featureId';\nexport const GEOMETRY_TYPE_PROPERTY_NAME = 'geometryType';\n\n/**\n * @typedef {string} CompiledExpression\n */\n\n/**\n * @typedef {function(CompilationContext, CallExpression, number): string} Compiler\n * Third argument is the expected value types\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} parsingContext The parsing context.\n * @param {CompilationContext} compilationContext An existing compilation context\n * @return {CompiledExpression} The compiled expression.\n */\nexport function buildExpression(\n  encoded,\n  type,\n  parsingContext,\n  compilationContext,\n) {\n  const expression = parse(encoded, type, parsingContext);\n  return compile(expression, type, compilationContext);\n}\n\n/**\n * @param {function(Array<CompiledExpression>, CompilationContext): string} output Function that takes in parsed arguments and returns a string\n * @return {function(CompilationContext, import(\"./expression.js\").CallExpression, number): string} Compiler for the call expression\n */\nfunction createCompiler(output) {\n  return (context, expression, type) => {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      args[i] = compile(expression.args[i], type, context);\n    }\n    return output(args, context);\n  };\n}\n\n/**\n * @type {Object<string, Compiler>}\n */\nconst compilers = {\n  [Ops.Get]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const propName = /** @type {string} */ (firstArg.value);\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: expression.type,\n      };\n    }\n    const prefix = context.inFragmentShader ? 'v_prop_' : 'a_prop_';\n    return prefix + propName;\n  },\n  [Ops.Id]: (context) => {\n    context.featureId = true;\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + FEATURE_ID_PROPERTY_NAME;\n  },\n  [Ops.GeometryType]: (context) => {\n    context.geometryType = true;\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + GEOMETRY_TYPE_PROPERTY_NAME;\n  },\n  [Ops.LineMetric]: () => 'currentLineMetric', // this variable is assumed to always be present in shaders, default is 0.\n  [Ops.Var]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const varName = /** @type {string} */ (firstArg.value);\n    const isExisting = varName in context.variables;\n    if (!isExisting) {\n      context.variables[varName] = {\n        name: varName,\n        type: expression.type,\n      };\n    }\n    return uniformNameForVariable(varName);\n  },\n  [Ops.Resolution]: () => 'u_resolution',\n  [Ops.Zoom]: () => 'u_zoom',\n  [Ops.Time]: () => 'u_time',\n  [Ops.Any]: createCompiler((compiledArgs) => `(${compiledArgs.join(` || `)})`),\n  [Ops.All]: createCompiler((compiledArgs) => `(${compiledArgs.join(` && `)})`),\n  [Ops.Not]: createCompiler(([value]) => `(!${value})`),\n  [Ops.Equal]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} == ${secondValue})`,\n  ),\n  [Ops.NotEqual]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} != ${secondValue})`,\n  ),\n  [Ops.GreaterThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} > ${secondValue})`,\n  ),\n  [Ops.GreaterThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} >= ${secondValue})`,\n  ),\n  [Ops.LessThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} < ${secondValue})`,\n  ),\n  [Ops.LessThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} <= ${secondValue})`,\n  ),\n  [Ops.Multiply]: createCompiler(\n    (compiledArgs) => `(${compiledArgs.join(' * ')})`,\n  ),\n  [Ops.Divide]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} / ${secondValue})`,\n  ),\n  [Ops.Add]: createCompiler((compiledArgs) => `(${compiledArgs.join(' + ')})`),\n  [Ops.Subtract]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} - ${secondValue})`,\n  ),\n  [Ops.Clamp]: createCompiler(\n    ([value, min, max]) => `clamp(${value}, ${min}, ${max})`,\n  ),\n  [Ops.Mod]: createCompiler(([value, modulo]) => `mod(${value}, ${modulo})`),\n  [Ops.Pow]: createCompiler(([value, power]) => `pow(${value}, ${power})`),\n  [Ops.Abs]: createCompiler(([value]) => `abs(${value})`),\n  [Ops.Floor]: createCompiler(([value]) => `floor(${value})`),\n  [Ops.Ceil]: createCompiler(([value]) => `ceil(${value})`),\n  [Ops.Round]: createCompiler(([value]) => `floor(${value} + 0.5)`),\n  [Ops.Sin]: createCompiler(([value]) => `sin(${value})`),\n  [Ops.Cos]: createCompiler(([value]) => `cos(${value})`),\n  [Ops.Atan]: createCompiler(([firstValue, secondValue]) => {\n    return secondValue !== undefined\n      ? `atan(${firstValue}, ${secondValue})`\n      : `atan(${firstValue})`;\n  }),\n  [Ops.Sqrt]: createCompiler(([value]) => `sqrt(${value})`),\n  [Ops.Match]: createCompiler((compiledArgs) => {\n    const input = compiledArgs[0];\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 1; i -= 2) {\n      const match = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.Between]: createCompiler(\n    ([value, min, max]) => `(${value} >= ${min} && ${value} <= ${max})`,\n  ),\n  [Ops.Interpolate]: createCompiler(([exponent, input, ...compiledArgs]) => {\n    let result = '';\n    for (let i = 0; i < compiledArgs.length - 2; i += 2) {\n      const stop1 = compiledArgs[i];\n      const output1 = result || compiledArgs[i + 1];\n      const stop2 = compiledArgs[i + 2];\n      const output2 = compiledArgs[i + 3];\n      let ratio;\n      if (exponent === numberToGlsl(1)) {\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\n      } else {\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\n      }\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\n    }\n    return result;\n  }),\n  [Ops.Case]: createCompiler((compiledArgs) => {\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 0; i -= 2) {\n      const condition = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${condition} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.In]: createCompiler(([needle, ...haystack], context) => {\n    const funcName = computeOperatorFunctionName('in', context);\n    const tests = [];\n    for (let i = 0; i < haystack.length; i += 1) {\n      tests.push(`  if (inputValue == ${haystack[i]}) { return true; }`);\n    }\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\n${tests.join('\\n')}\n  return false;\n}`;\n    return `${funcName}(${needle})`;\n  }),\n  [Ops.Array]: createCompiler(\n    (args) => `vec${args.length}(${args.join(', ')})`,\n  ),\n  [Ops.Color]: createCompiler((compiledArgs) => {\n    if (compiledArgs.length === 1) {\n      //grayscale\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), 1.0)`;\n    }\n    if (compiledArgs.length === 2) {\n      //grayscale with alpha\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), ${compiledArgs[1]})`;\n    }\n    const rgb = compiledArgs.slice(0, 3).map((color) => `${color} / 255.0`);\n    if (compiledArgs.length === 3) {\n      return `vec4(${rgb.join(', ')}, 1.0)`;\n    }\n    const alpha = compiledArgs[3];\n    return `vec4(${rgb.join(', ')}, ${alpha})`;\n  }),\n  [Ops.Band]: createCompiler(([band, xOffset, yOffset], context) => {\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      let ifBlocks = '';\n      const bandCount = context.bandCount || 1;\n      for (let i = 0; i < bandCount; i++) {\n        const colorIndex = Math.floor(i / 4);\n        let bandIndex = i % 4;\n        if (i === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\n        ifBlocks += `  if (band == ${i + 1}.0) {\n    return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\n  }\n`;\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] =\n        `float getBandValue(float band, float xOffset, float yOffset) {\n  float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\n  float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n${ifBlocks}\n}`;\n    }\n\n    return `${GET_BAND_VALUE_FUNC}(${band}, ${xOffset ?? '0.0'}, ${\n      yOffset ?? '0.0'\n    })`;\n  }),\n  [Ops.Palette]: (context, expression) => {\n    const [index, ...colors] = expression.args;\n    const numColors = colors.length;\n    const palette = new Uint8Array(numColors * 4);\n    for (let i = 0; i < colors.length; i++) {\n      const parsedValue = /** @type {string | Array<number>} */ (\n        /** @type {LiteralExpression} */ (colors[i]).value\n      );\n      const color = asArray(parsedValue);\n      const offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\n    const paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    const compiledIndex = compile(index, NumberType, context);\n    return `texture2D(${paletteName}, vec2((${compiledIndex} + 0.5) / ${numColors}.0, 0.5))`;\n  },\n  // TODO: unimplemented\n  // Ops.Number\n  // Ops.String\n  // Ops.Coalesce\n  // Ops.Concat\n  // Ops.ToString\n};\n\n/**\n * @param {Expression} expression The expression.\n * @param {number} returnType The expected return type.\n * @param {CompilationContext} context The compilation context.\n * @return {CompiledExpression} The compiled expression\n */\nfunction compile(expression, returnType, context) {\n  // operator\n  if (expression instanceof CallExpression) {\n    const compiler = compilers[expression.operator];\n    if (compiler === undefined) {\n      throw new Error(\n        `No compiler defined for this operator: ${JSON.stringify(\n          expression.operator,\n        )}`,\n      );\n    }\n    return compiler(context, expression, returnType);\n  }\n\n  if ((expression.type & NumberType) > 0) {\n    return numberToGlsl(/** @type {number} */ (expression.value));\n  }\n\n  if ((expression.type & BooleanType) > 0) {\n    return expression.value.toString();\n  }\n\n  if ((expression.type & StringType) > 0) {\n    return stringToGlsl(expression.value.toString());\n  }\n\n  if ((expression.type & ColorType) > 0) {\n    return colorToGlsl(\n      /** @type {Array<number> | string} */ (expression.value),\n    );\n  }\n\n  if ((expression.type & NumberArrayType) > 0) {\n    return arrayToGlsl(/** @type {Array<number>} */ (expression.value));\n  }\n\n  if ((expression.type & SizeType) > 0) {\n    return sizeToGlsl(\n      /** @type {number|import('../size.js').Size} */ (expression.value),\n    );\n  }\n\n  throw new Error(\n    `Unexpected expression ${expression.value} (expected type ${typeName(\n      returnType,\n    )})`,\n  );\n}\n","/**\n * @module ol/DataTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike\n */\n\n/**\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\n */\n\n/**\n * Data that can be used with a DataTile.\n * @typedef {ArrayLike|ImageLike} Data\n */\n\n/**\n * @param {Data} data Tile data.\n * @return {ImageLike|null} The image-like data.\n */\nexport function asImageLike(data) {\n  return data instanceof Image ||\n    data instanceof HTMLCanvasElement ||\n    data instanceof HTMLVideoElement ||\n    data instanceof ImageBitmap\n    ? data\n    : null;\n}\n\n/**\n * @param {Data} data Tile data.\n * @return {ArrayLike|null} The array-like data.\n */\nexport function asArrayLike(data) {\n  return data instanceof Uint8Array ||\n    data instanceof Uint8ClampedArray ||\n    data instanceof Float32Array ||\n    data instanceof DataView\n    ? data\n    : null;\n}\n\n/**\n * This is set as the cancellation reason when a tile is disposed.\n */\nexport const disposedError = new Error('disposed');\n\n/**\n * @type {CanvasRenderingContext2D|null}\n */\nlet sharedContext = null;\n\n/**\n * @param {ImageLike} image The image.\n * @return {Uint8ClampedArray} The data.\n */\nexport function toArray(image) {\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(\n      image.width,\n      image.height,\n      undefined,\n      {willReadFrequently: true},\n    );\n  }\n  const canvas = sharedContext.canvas;\n  const width = image.width;\n  if (canvas.width !== width) {\n    canvas.width = width;\n  }\n  const height = image.height;\n  if (canvas.height !== height) {\n    canvas.height = height;\n  }\n  sharedContext.clearRect(0, 0, width, height);\n  sharedContext.drawImage(image, 0, 0);\n  return sharedContext.getImageData(0, 0, width, height).data;\n}\n\n/**\n * @type {import('./size.js').Size}\n */\nconst defaultSize = [256, 256];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @property {AbortController} [controller] An abort controller.\n * @api\n */\n\nclass DataTile extends Tile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    const state = TileState.IDLE;\n\n    super(options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @type {Data}\n     * @private\n     */\n    this.data_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */\n    this.size_ = options.size || null;\n\n    /**\n     * @type {AbortController|null}\n     * @private\n     */\n    this.controller_ = options.controller || null;\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */\n  getSize() {\n    if (this.size_) {\n      return this.size_;\n    }\n    const imageData = asImageLike(this.data_);\n    if (imageData) {\n      return [imageData.width, imageData.height];\n    }\n    return defaultSize;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n  getData() {\n    return this.data_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Load the tile data.\n   * @api\n   * @override\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    const self = this;\n    this.loader_()\n      .then(function (data) {\n        self.data_ = data;\n        self.state = TileState.LOADED;\n        self.changed();\n      })\n      .catch(function (error) {\n        self.error_ = error;\n        self.state = TileState.ERROR;\n        self.changed();\n      });\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.controller_) {\n      this.controller_.abort(disposedError);\n      this.controller_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default DataTile;\n","/**\n * @module ol/render/webgl/utils\n */\nimport earcut from 'earcut';\nimport {clamp} from '../../math.js';\nimport {apply as applyTransform} from '../../transform.js';\n\nexport const LINESTRING_ANGLE_COSINE_CUTOFF = 0.985;\n\n/** @type {Array<number>} */\nconst tmpArray_ = [];\n\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\nconst bufferPositions_ = {vertexPosition: 0, indexPosition: 0};\n\n/**\n * @param {Float32Array} buffer Buffer\n * @param {number} pos Position\n * @param {number} x X\n * @param {number} y Y\n * @param {number} index Index\n */\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(\n  instructions,\n  elementIndex,\n  vertexBuffer,\n  indexBuffer,\n  customAttributesSize,\n  bufferPositions,\n) {\n  // This is for x, y and index\n  const baseVertexAttrsCount = 3;\n  const baseInstructionsCount = 2;\n  const stride = baseVertexAttrsCount + customAttributesSize;\n\n  const x = instructions[elementIndex + 0];\n  const y = instructions[elementIndex + 1];\n\n  // read custom numerical attributes on the feature\n  const customAttrs = tmpArray_;\n  customAttrs.length = customAttributesSize;\n  for (let i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  const baseIndex = vPos / stride;\n\n  // push vertices for each of the four quad corners (first standard then custom attributes)\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n\n  return bufferPositions_;\n}\n\n/**\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\n * segment, in order to be able to offset the vertices correctly in the shader.\n * Join angles are between 0 and 2PI.\n * This also computes the length of the current segment and the sum of the join angle tangents in order\n * to store this information on each subsequent segment along the line. This is necessary to correctly render dashes\n * and symbols along the line.\n *\n *   pB (before)                          pA (after)\n *    X             negative             X\n *     \\             offset             /\n *      \\                              /\n *       \\   join              join   /\n *        \\ angle 0          angle 1 /\n *         \\←---                ←---/      positive\n *          \\   ←--          ←--   /        offset\n *           \\     ↑       ↓      /\n *            X────┴───────┴─────X\n *            p0                  p1\n *\n * @param {Float32Array} instructions Array of render instructions for lines.s\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\n * @param {number} segmentEndIndex Index of the segment end point from which render instructions will be read.\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {Array<number>} customAttributes Array of custom attributes value\n * @param {import('../../transform.js').Transform} toWorldTransform Transform matrix used to obtain world coordinates from instructions\n * @param {number} currentLength Cumulated length of segments processed so far\n * @param {number} currentAngleTangentSum Cumulated tangents of the join angles processed so far\n * @return {{length: number, angle: number}} Cumulated length with the newly processed segment (in world units), new sum of the join angle tangents\n * @private\n */\nexport function writeLineSegmentToBuffers(\n  instructions,\n  segmentStartIndex,\n  segmentEndIndex,\n  beforeSegmentIndex,\n  afterSegmentIndex,\n  vertexArray,\n  indexArray,\n  customAttributes,\n  toWorldTransform,\n  currentLength,\n  currentAngleTangentSum,\n) {\n  // compute the stride to determine how many vertices were already pushed\n  const baseVertexAttrsCount = 10; // base attributes: x0, y0, m0, x1, y1, m1, angle0, angle1, distance, params\n  const stride = baseVertexAttrsCount + customAttributes.length;\n  const baseIndex = vertexArray.length / stride;\n\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\n  // Depending on whether there are points before and after the segment, its final shape\n  // will be different\n  const p0 = [\n    instructions[segmentStartIndex + 0],\n    instructions[segmentStartIndex + 1],\n  ];\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\n\n  const m0 = instructions[segmentStartIndex + 2];\n  const m1 = instructions[segmentEndIndex + 2];\n\n  // to compute join angles we need to reproject coordinates back in world units\n  const p0world = applyTransform(toWorldTransform, [...p0]);\n  const p1world = applyTransform(toWorldTransform, [...p1]);\n\n  /**\n   * Compute the angle between p0pA and p0pB\n   * @param {import(\"../../coordinate.js\").Coordinate} p0 Point 0\n   * @param {import(\"../../coordinate.js\").Coordinate} pA Point A\n   * @param {import(\"../../coordinate.js\").Coordinate} pB Point B\n   * @return {number} a value in [0, 2PI]\n   */\n  function angleBetween(p0, pA, pB) {\n    const lenA = Math.sqrt(\n      (pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1]),\n    );\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\n    const orthoA = [-tangentA[1], tangentA[0]];\n    const lenB = Math.sqrt(\n      (pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1]),\n    );\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\n\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\n    const angle =\n      lenA === 0 || lenB === 0\n        ? 0\n        : Math.acos(\n            clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1),\n          );\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\n    return !isClockwise ? Math.PI * 2 - angle : angle;\n  }\n\n  // a negative angle indicates a line cap\n  let angle0 = -1;\n  let angle1 = -1;\n  let newAngleTangentSum = currentAngleTangentSum;\n\n  const joinBefore = beforeSegmentIndex !== null;\n  const joinAfter = afterSegmentIndex !== null;\n\n  // add vertices and adapt offsets for P0 in case of join\n  if (joinBefore) {\n    // B for before\n    const pB = [\n      instructions[beforeSegmentIndex],\n      instructions[beforeSegmentIndex + 1],\n    ];\n    const pBworld = applyTransform(toWorldTransform, [...pB]);\n    angle0 = angleBetween(p0world, p1world, pBworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle0) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((angle0 - Math.PI) / 2);\n    }\n  }\n  // adapt offsets for P1 in case of join; add to angle sum\n  if (joinAfter) {\n    // A for after\n    const pA = [\n      instructions[afterSegmentIndex],\n      instructions[afterSegmentIndex + 1],\n    ];\n    const pAworld = applyTransform(toWorldTransform, [...pA]);\n    angle1 = angleBetween(p1world, p0world, pAworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle1) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((Math.PI - angle1) / 2);\n    }\n  }\n\n  /**\n   * @param {number} vertexIndex From 0 to 3, indicating position in the quad\n   * @param {number} angleSum Sum of the join angles encountered so far (used to compute distance offset\n   * @return {number} A float value containing both information\n   */\n  function computeParameters(vertexIndex, angleSum) {\n    if (angleSum === 0) {\n      return vertexIndex * 10000;\n    }\n    return Math.sign(angleSum) * (vertexIndex * 10000 + Math.abs(angleSum));\n  }\n\n  // add main segment triangles\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(0, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(1, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(2, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(3, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  indexArray.push(\n    baseIndex,\n    baseIndex + 1,\n    baseIndex + 2,\n    baseIndex + 1,\n    baseIndex + 3,\n    baseIndex + 2,\n  );\n\n  return {\n    length:\n      currentLength +\n      Math.sqrt(\n        (p1world[0] - p0world[0]) * (p1world[0] - p0world[0]) +\n          (p1world[1] - p0world[1]) * (p1world[1] - p0world[1]),\n      ),\n    angle: newAngleTangentSum,\n  };\n}\n\n/**\n * Pushes several triangles to form a polygon, including holes\n * @param {Float32Array} instructions Array of render instructions for lines.\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @return {number} Next polygon instructions index\n * @private\n */\nexport function writePolygonTrianglesToBuffers(\n  instructions,\n  polygonStartIndex,\n  vertexArray,\n  indexArray,\n  customAttributesSize,\n) {\n  const instructionsPerVertex = 2; // x, y\n  const attributesPerVertex = 2 + customAttributesSize;\n  let instructionsIndex = polygonStartIndex;\n  const customAttributes = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + customAttributesSize,\n  );\n  instructionsIndex += customAttributesSize;\n  const ringsCount = instructions[instructionsIndex++];\n  let verticesCount = 0;\n  const holes = new Array(ringsCount - 1);\n  for (let i = 0; i < ringsCount; i++) {\n    verticesCount += instructions[instructionsIndex++];\n    if (i < ringsCount - 1) {\n      holes[i] = verticesCount;\n    }\n  }\n  const flatCoords = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + verticesCount * instructionsPerVertex,\n  );\n\n  // pushing to vertices and indices!! this is where the magic happens\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\n  for (let i = 0; i < result.length; i++) {\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\n  }\n  for (let i = 0; i < flatCoords.length; i += 2) {\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\n  }\n\n  return instructionsIndex + verticesCount * instructionsPerVertex;\n}\n\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n  const canvas = document.createElement('canvas');\n  const image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, array) {\n  array = array || [];\n  const radix = 256;\n  const divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n  array[2] = (Math.floor(id / radix) % radix) / divide;\n  array[3] = (id % radix) / divide;\n  return array;\n}\n\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n  let id = 0;\n  const radix = 256;\n  const mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\n\n/**\n * @typedef {import('./VectorStyleRenderer.js').AsShaders} StyleAsShaders\n */\n/**\n * @typedef {import('./VectorStyleRenderer.js').AsRule} StyleAsRule\n */\n\n/**\n * Takes in either a Flat Style or an array of shaders (used as input for the webgl vector layer classes)\n * and breaks it down into separate styles to be used by the VectorStyleRenderer class.\n * @param {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat style or shaders\n * @return {Array<StyleAsShaders | StyleAsRule>} Separate styles as shaders or rules with a single flat style and a filter\n */\nexport function breakDownFlatStyle(style) {\n  // possible cases:\n  // - single shader\n  // - multiple shaders\n  // - single style\n  // - multiple styles\n  // - multiple rules\n  const asArray = Array.isArray(style) ? style : [style];\n\n  // if array of rules: break rules into separate styles, compute \"else\" filters\n  if ('style' in asArray[0]) {\n    /** @type {Array<StyleAsRule>} */\n    const styles = [];\n    const rules = /** @type {Array<import('../../style/flat.js').Rule>} */ (\n      asArray\n    );\n    const previousFilters = [];\n    for (const rule of rules) {\n      const ruleStyles = Array.isArray(rule.style) ? rule.style : [rule.style];\n      /** @type {import(\"../../expr/expression.js\").EncodedExpression} */\n      let currentFilter = rule.filter;\n      if (rule.else && previousFilters.length) {\n        currentFilter = [\n          'all',\n          ...previousFilters.map((filter) => ['!', filter]),\n        ];\n        if (rule.filter) {\n          currentFilter.push(rule.filter);\n        }\n        if (currentFilter.length < 3) {\n          currentFilter = currentFilter[1];\n        }\n      }\n      if (rule.filter) {\n        previousFilters.push(rule.filter);\n      }\n      /** @type {Array<StyleAsRule>} */\n      const stylesWithFilters = ruleStyles.map((style) => ({\n        style,\n        ...(currentFilter && {filter: currentFilter}),\n      }));\n      styles.push(...stylesWithFilters);\n    }\n    return styles;\n  }\n\n  // if array of shaders: return as is\n  if ('builder' in asArray[0]) {\n    return /** @type {Array<StyleAsShaders>} */ (asArray);\n  }\n\n  return asArray.map(\n    (style) =>\n      /** @type {StyleAsRule} */ ({\n        style,\n      }),\n  );\n}\n","/**\n * @module ol/webgl/TileTexture\n */\n\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {toSize} from '../size.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport WebGLArrayBuffer from './Buffer.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n\n    super.setHelper(helper);\n\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter,\n      sourceTileSize[1] + 2 * this.gutter,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n","/**\n * @module ol/renderer/webgl/TileLayer\n */\nimport TileState from '../../TileState.js';\nimport {\n  boundingExtent,\n  containsCoordinate,\n  getIntersection,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {toSize} from '../../size.js';\nimport {apply as applyTransform} from '../../transform.js';\nimport {fromTransform as mat4FromTransform} from '../../vec/mat4.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport WebGLBaseTileLayerRenderer, {\n  Uniforms as BaseUniforms,\n  getCacheKey,\n} from './TileLayerBase.js';\n\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\n};\n\nexport const Attributes = {\n  TEXTURE_COORD: 'a_textureCoord',\n};\n\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\nconst attributeDescriptions = [\n  {\n    name: Attributes.TEXTURE_COORD,\n    size: 2,\n    type: AttributeType.FLOAT,\n  },\n];\n\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @template {import(\"../../layer/WebGLTile.js\").default|import(\"../../layer/Flow.js\").default} LayerType\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\n * @api\n */\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, options);\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n    this.paletteTextures_ = options.paletteTextures || [];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(\n        this.fragmentShader_,\n        this.vertexShader_,\n      );\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        // upload the texture data\n        paletteTexture.getTexture(gl);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    const gl = this.helper.getGL();\n    for (const paletteTexture of this.paletteTextures_) {\n      // upload the texture data\n      paletteTexture.getTexture(gl);\n    }\n\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_,\n    );\n    this.helper.flushBufferData(this.indices_);\n  }\n\n  /**\n   * @override\n   */\n  removeHelper() {\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    super.removeHelper();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    return new TileTexture(options);\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, tilesWithAlpha);\n    this.helper.useProgram(this.program_, frameState);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(\n    tileTexture,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {\n    const gl = this.helper.getGL();\n    this.helper.bindBuffer(tileTexture.coords);\n    this.helper.bindBuffer(this.indices_);\n    this.helper.enableAttributes(attributeDescriptions);\n\n    let textureSlot = 0;\n    while (textureSlot < tileTexture.textures.length) {\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\n      this.helper.bindTexture(\n        tileTexture.textures[textureSlot],\n        textureSlot,\n        uniformName,\n      );\n      ++textureSlot;\n    }\n\n    for (\n      let paletteIndex = 0;\n      paletteIndex < this.paletteTextures_.length;\n      ++paletteIndex\n    ) {\n      const paletteTexture = this.paletteTextures_[paletteIndex];\n      const texture = paletteTexture.getTexture(gl);\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\n      ++textureSlot;\n    }\n\n    const viewState = frameState.viewState;\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const tile = tileTexture.tile;\n    const tileCoord = tile.tileCoord;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    this.helper.setUniformMatrixValue(\n      Uniforms.TILE_TRANSFORM,\n      mat4FromTransform(this.tempMat4, tileTransform),\n    );\n\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n\n    let gutterExtent = renderExtent;\n    if (gutter > 0) {\n      gutterExtent = tileExtent;\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\n    }\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\n\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_WIDTH,\n      tileWidthWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_HEIGHT,\n      tileHeightWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_RESOLUTION,\n      tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_X,\n      tileOrigin[0] +\n        tileCenterI * tileSize[0] * tileResolution -\n        gutter * tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_Y,\n      tileOrigin[1] -\n        tileCenterJ * tileSize[1] * tileResolution +\n        gutter * tileResolution,\n    );\n\n    this.helper.drawElements(0, this.indices_.getSize());\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const gl = this.helper.getGL();\n    if (!gl) {\n      return null;\n    }\n\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const viewState = frameState.viewState;\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (\n        !containsCoordinate(\n          fromUserExtent(layerExtent, viewState.projection),\n          coordinate,\n        )\n      ) {\n        return null;\n      }\n    }\n\n    // determine last source suitable for rendering at coordinate\n    const sources = layer.getSources(\n      boundingExtent([coordinate]),\n      viewState.resolution,\n    );\n    let i, source, tileGrid;\n    for (i = sources.length - 1; i >= 0; --i) {\n      source = sources[i];\n      if (source.getState() === 'ready') {\n        tileGrid = source.getTileGridForProjection(viewState.projection);\n        if (source.getWrapX()) {\n          break;\n        }\n        const gridExtent = tileGrid.getExtent();\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\n          break;\n        }\n      }\n    }\n    if (i < 0) {\n      return null;\n    }\n\n    const tileTextureCache = this.tileRepresentationCache;\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const cacheKey = getCacheKey(source, tileCoord);\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n      const tileTexture = tileTextureCache.get(cacheKey);\n      const tile = tileTexture.tile;\n      if (tile.getState() === TileState.EMPTY) {\n        return null;\n      }\n      if (!tileTexture.loaded) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col =\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\n        tileCoord[1] * tileSize[0];\n\n      const row =\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\n        tileCoord[2] * tileSize[1];\n\n      return tileTexture.getPixelData(col, row);\n    }\n    return null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const helper = this.helper;\n    if (helper) {\n      const gl = helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n      this.paletteTextures_.length = 0;\n\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n      helper.deleteBuffer(this.indices_);\n    }\n    super.disposeInternal();\n    delete this.indices_;\n  }\n}\n\nexport default WebGLTileLayerRenderer;\n","/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport LayerRenderer from '../Layer.js';\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass WebGLLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(layer, options) {\n    super(layer);\n\n    options = options || {};\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.postProcesses_ = options.postProcesses;\n\n    /**\n     * @private\n     */\n    this.uniforms_ = options.uniforms;\n\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n    this.helper;\n\n    this.onMapChanged_ = () => {\n      this.clearCache();\n      this.removeHelper();\n    };\n\n    layer.addChangeListener(LayerProperty.MAP, this.onMapChanged_);\n\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPreComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.PRECOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPostComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.POSTCOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    this.uniforms_ = options.uniforms;\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  removeHelper() {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    if (this.getLayer().getRenderSource()) {\n      let incrementGroup = true;\n      let groupNumber = -1;\n      let className;\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        const layer = frameState.layerStatesArray[i].layer;\n        const renderer = layer.getRenderer();\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n        const layerClassName = layer.getClassName();\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n        className = layerClassName;\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      const canvasCacheKey =\n        'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (\n        !this.helper ||\n        !this.helper.canvasCacheKeyMatches(canvasCacheKey) ||\n        this.helper.needsToBeRecreated()\n      ) {\n        this.removeHelper();\n\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey,\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  }\n\n  /**\n   * @protected\n   */\n  afterHelperCreated() {}\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n  prepareFrameInternal(frameState) {\n    return true;\n  }\n\n  /**\n   * @protected\n   */\n  clearCache() {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearCache();\n    this.removeHelper();\n    this.getLayer()?.removeChangeListener(\n      LayerProperty.MAP,\n      this.onMapChanged_,\n    );\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      composeTransform(\n        this.inversePixelTransform_,\n        0,\n        0,\n        frameState.pixelRatio,\n        -frameState.pixelRatio,\n        0,\n        0,\n        -frameState.size[1],\n      );\n\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform_,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n}\n\nexport default WebGLLayerRenderer;\n","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n","/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n","/**\n * @module ol/webgl/Helper\n */\nimport Disposable from '../Disposable.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {getUid} from '../util.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   `gl_Position`: position of the vertex in screen space\n *\n *   Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.needsToBeRecreated_ = false;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            }),\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const bufferKey = getUid(buf);\n    // Note: gl.deleteBuffer is not called here since we let WebGL garbage collect it automatically\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * @param {WebGLFramebuffer|null} frameBuffer The frame buffer.\n   * @param {WebGLTexture} [texture] The texture.\n   */\n  bindFrameBuffer(frameBuffer, texture) {\n    const gl = this.getGL();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    if (texture) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0,\n      );\n    }\n  }\n\n  /**\n   * Bind the frame buffer from the initial render.\n   */\n  bindInitialFrameBuffer() {\n    const gl = this.getGL();\n    const frameBuffer = this.postProcessPasses_[0].getFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    const texture = this.postProcessPasses_[0].getRenderTargetTexture();\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0,\n    );\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Set up an attribute array buffer for use in the vertex shader.\n   * @param {import(\"./Buffer\").default} buffer The buffer.\n   * @param {string} attributeName The attribute name.\n   * @param {number} size The number of components per attribute vertex.\n   */\n  bindAttribute(buffer, attributeName, size) {\n    const gl = this.getGL();\n    this.bindBuffer(buffer);\n    const index = this.getAttributeLocation(attributeName);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth,\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose,\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1],\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001,\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution,\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData ||\n        value instanceof WebGLTexture\n      ) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (\n          !(value instanceof WebGLTexture) &&\n          imageReady &&\n          uniform.prevValue !== value\n        ) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value),\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    if (frameState) {\n      this.applyFrameState(frameState);\n      this.applyUniforms(frameState);\n    }\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER,\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER,\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program,\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1],\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset,\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.  If a Uint8Array is provided for data, a size must also be provided.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|Uint8Array|null} data Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @param {boolean} [nearest] Use gl.NEAREST for min/mag filter.\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture, nearest) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n    const filter = nearest ? gl.NEAREST : gl.LINEAR;\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n\n    if (data instanceof Uint8Array) {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        data,\n      );\n    } else if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null,\n      );\n    }\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n","/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport EventTarget from '../events/Target.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    this.helper = helper;\n    if (this.helper && this.loaded) {\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.setHelper(null);\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n","/**\n * @module ol/vec/mat4\n */\n\n/** @typedef {Array<number>} Mat4 */\n\n/**\n * @return {Mat4} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Mat4} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Mat4} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @param {Mat4} [out] mat4 frustum matrix will be written into\n * @return {Mat4} out\n */\nexport function orthographic(left, right, bottom, top, near, far, out) {\n  out = out ?? create();\n  const lr = 1 / (left - right),\n    bt = 1 / (bottom - top),\n    nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {Mat4} m The matrix to scale.\n * @param {number} x How much to scale in the x direction.\n * @param {number} y How much to scale in the y direction.\n * @param {number} z How much to scale in the z direction.\n * @param {Mat4} [out] The matrix to write to.\n * @return {Mat4} out\n */\nexport function scale(m, x, y, z, out) {\n  out = out ?? create();\n  out[0] = m[0] * x;\n  out[1] = m[1] * x;\n  out[2] = m[2] * x;\n  out[3] = m[3] * x;\n  out[4] = m[4] * y;\n  out[5] = m[5] * y;\n  out[6] = m[6] * y;\n  out[7] = m[7] * y;\n  out[8] = m[8] * z;\n  out[9] = m[9] * z;\n  out[10] = m[10] * z;\n  out[11] = m[11] * z;\n  out[12] = m[12];\n  out[13] = m[13];\n  out[14] = m[14];\n  out[15] = m[15];\n  return out;\n}\n\n/**\n * Translate a matrix.\n *\n * @param {Mat4} m the matrix to translate\n * @param {number} x How much to translate in the x direction.\n * @param {number} y How much to translate in the y direction.\n * @param {number} z How much to translate in the z direction.\n * @param {Mat4} [out] the receiving matrix\n * @return {Mat4} out\n */\nexport function translate(m, x, y, z, out) {\n  out = out ?? create();\n  let a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n\n  if (m === out) {\n    out[12] = m[0] * x + m[4] * y + m[8] * z + m[12];\n    out[13] = m[1] * x + m[5] * y + m[9] * z + m[13];\n    out[14] = m[2] * x + m[6] * y + m[10] * z + m[14];\n    out[15] = m[3] * x + m[7] * y + m[11] * z + m[15];\n  } else {\n    a00 = m[0];\n    a01 = m[1];\n    a02 = m[2];\n    a03 = m[3];\n    a10 = m[4];\n    a11 = m[5];\n    a12 = m[6];\n    a13 = m[7];\n    a20 = m[8];\n    a21 = m[9];\n    a22 = m[10];\n    a23 = m[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + m[12];\n    out[13] = a01 * x + a11 * y + a21 * z + m[13];\n    out[14] = a02 * x + a12 * y + a22 * z + m[14];\n    out[15] = a03 * x + a13 * y + a23 * z + m[15];\n  }\n\n  return out;\n}\n\n/**\n * @param {number} x x translation.\n * @param {number} y y translation.\n * @param {number} z z translation.\n * @param {Mat4} [out] optional matrix to store result\n * @return {Mat4} out\n */\nexport function translation(x, y, z, out) {\n  out = out ?? create();\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = x;\n  out[13] = y;\n  out[14] = z;\n  out[15] = 1;\n\n  return out;\n}\n","/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/**\n  end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes,\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n"],"names":["Uniforms","TILE_TRANSFORM","TRANSITION_ALPHA","DEPTH","RENDER_EXTENT","PATTERN_ORIGIN","RESOLUTION","ZOOM","GLOBAL_ALPHA","PROJECTION_MATRIX","SCREEN_TO_WORLD_MATRIX","depthForZ","z","newTileRepresentationLookup","tileIds","Set","representationsByZ","lookupHasTile","tileRepresentationLookup","tile","has","addTileRepresentationToLookup","tileRepresentation","add","getRenderExtent","frameState","extent","layerState","layerStatesArray","layerIndex","viewState","projection","source","layer","getRenderSource","getWrapX","gridExtent","getTileGridForProjection","getExtent","getCacheKey","tileCoord","getKey","getRevision","WebGLBaseTileLayerRenderer","constructor","tileLayer","options","super","uniforms","postProcesses","this","renderComplete","tileTransform_","tempMat4","tempTileRange_","tempTileCoord_","tempSize_","cacheSize","undefined","tileRepresentationCache","renderedProjection_","reset","prepareFrameInternal","clearCache","getLayer","getState","createTileRepresentation","enqueueTiles","initialZ","preload","tileSource","tileGrid","gutter","getGutterForProjection","tileSourceKey","wantedTiles","map","getMapInternal","minZ","Math","max","getMinZoom","getZForResolution","min","getMaxResolution","getView","getResolutionForZoom","getResolution","zDirection","rotation","viewport","center","resolution","size","tileRange","getTileRangeForExtentAndZ","tileResolution","x","minX","maxX","y","minY","maxY","tileCoordIntersectsViewport","cacheKey","containsKey","get","key","getTile","pixelRatio","setTile","grid","helper","set","tileQueueKey","IDLE","tileQueue","isKeyQueued","enqueue","getTileCoordCenter","beforeTilesRender","tilesWithAlpha","prepareDraw","beforeTilesMaskRender","renderTile","tileTransform","renderExtent","tileSize","tileOrigin","tileExtent","depth","alpha","renderTileMask","tileZ","drawTile_","alphaLookup","ready","tileCoordKey","getTileSize","getOrigin","getTileCoordExtent","animate","centerX","centerY","tileWidthWithGutter","tileHeightWithGutter","aspectRatio","centerI","centerJ","tileScale","tileCenterI","tileCenterJ","renderFrame","gl","getGL","preRender","getPreload","nextExtent","targetZ","nextResolution","setTimeout","blend","uid","time","EMPTY","getAlpha","endTransition","coveredByChildren","findAltTiles_","minZoom","parentZ","coveredByParent","zs","Object","keys","Number","sort","j","jj","length","beforeFinalize","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","canvas","getCanvas","canExpireCache","pop","dispose","postRender","altZ","getTileRangeForTileCoordAndZ","covered","loaded","forEach","clear","afterHelperCreated","setHelper","disposeInternal","createDefaultStyle","COMMON_HEADER","DEFAULT_STYLE","ShaderBuilder","uniforms_","attributes_","varyings_","hasSymbol_","symbolSizeExpression_","symbolRotationExpression_","symbolOffsetExpression_","symbolColorExpression_","texCoordExpression_","discardExpression_","symbolRotateWithView_","hasStroke_","strokeWidthExpression_","strokeColorExpression_","strokeOffsetExpression_","strokeCapExpression_","strokeJoinExpression_","strokeMiterLimitExpression_","strokeDistanceFieldExpression_","hasFill_","fillColorExpression_","vertexShaderFunctions_","fragmentShaderFunctions_","addUniform","name","push","addAttribute","addVarying","type","expression","setSymbolSizeExpression","getSymbolSizeExpression","setSymbolRotationExpression","setSymbolOffsetExpression","getSymbolOffsetExpression","setSymbolColorExpression","getSymbolColorExpression","setTextureCoordinateExpression","setFragmentDiscardExpression","getFragmentDiscardExpression","setSymbolRotateWithView","rotateWithView","setStrokeWidthExpression","setStrokeColorExpression","getStrokeColorExpression","setStrokeOffsetExpression","setStrokeCapExpression","setStrokeJoinExpression","setStrokeMiterLimitExpression","setStrokeDistanceFieldExpression","setFillColorExpression","getFillColorExpression","addVertexShaderFunction","code","includes","addFragmentShaderFunction","getSymbolVertexShader","uniform","join","attribute","varying","getSymbolFragmentShader","getStrokeVertexShader","getStrokeFragmentShader","getFillVertexShader","getFillFragmentShader","LRUCache","highWaterMark","count_","entries_","oldest_","newest_","deleteOldest","entry","getCount","expireCache","keep","hasOwnProperty","f","value_","key_","newer","older","remove","getKeys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","setSize","BufferUsage","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","WebGLArrayBuffer","usage","array_","type_","usage_","ofSize","getArrayClassForType","fromArray","array","from","fromArrayBuffer","buffer","getType","getArray","setArray","ArrayType","Error","getUsage","getSize","Float32Array","Uint32Array","PaletteTexture","data","texture_","getTexture","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","deleteTexture","computeOperatorFunctionName","operator","context","functions","numberToGlsl","v","s","toString","arrayToGlsl","colorToGlsl","color","sizeToGlsl","stringToFloatMap","stringToFloatCounter","getStringNumberEquivalent","string","stringToGlsl","uniformNameForVariable","variableName","newCompilationContext","inFragmentShader","variables","properties","bandCount","featureId","geometryType","GET_BAND_VALUE_FUNC","PALETTE_TEXTURE_ARRAY","FEATURE_ID_PROPERTY_NAME","GEOMETRY_TYPE_PROPERTY_NAME","buildExpression","encoded","parsingContext","compilationContext","compile","createCompiler","output","args","compilers","Get","firstArg","propName","isExisting","prefix","Id","GeometryType","LineMetric","Var","varName","Resolution","Zoom","Time","Any","compiledArgs","All","Not","Equal","firstValue","secondValue","NotEqual","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Multiply","Divide","Add","Subtract","Clamp","Mod","modulo","Pow","power","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","Match","input","fallback","result","match","Between","Interpolate","exponent","stop1","output1","stop2","output2","ratio","Case","condition","In","needle","haystack","funcName","tests","Color","rgb","slice","Band","band","xOffset","yOffset","ifBlocks","colorIndex","floor","bandIndex","textureName","TILE_TEXTURE_ARRAY","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","Palette","index","colors","numColors","palette","Uint8Array","parsedValue","offset","paletteTextures","paletteName","paletteTexture","compiledIndex","returnType","compiler","JSON","stringify","asImageLike","Image","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","asArrayLike","Uint8ClampedArray","DataView","disposedError","sharedContext","toArray","image","width","height","willReadFrequently","clearRect","drawImage","getImageData","defaultSize","DataTile","state","transition","interpolate","loader_","loader","data_","error_","size_","controller_","controller","imageData","getData","getError","load","ERROR","LOADING","changed","self","then","LOADED","catch","error","abort","LINESTRING_ANGLE_COSINE_CUTOFF","colorEncodeId","id","radix","divide","colorDecodeId","mult","round","breakDownFlatStyle","style","asArray","isArray","styles","rules","previousFilters","rule","ruleStyles","currentFilter","filter","else","stylesWithFilters","bindAndConfigure","resampleFilter","LINEAR","uploadImageTexture","uploadDataTexture","textureType","canInterpolate","FLOAT","getExtension","extension","bytesPerRow","byteLength","format","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","TileTexture","BaseTileRepresentation","textures","renderSize_","NaN","coords","flushBufferData","deleteBuffer","uploadTile","ImageTile","getImage","setReady","sourceTileSize","pixelSize","isFloat","pixelCount","DataType","bytesPerElement","BYTES_PER_ELEMENT","textureCount","ceil","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","textureData","textureBandIndex","getImagePixelData_","renderCol","renderRow","renderWidth","renderHeight","sourceWidth","sourceHeight","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceCol","sourceRow","getArrayPixelData_","sourceSize","bytesPerPixel","getPixelData","arrayData","TEXTURE_RESOLUTION","TEXTURE_ORIGIN_X","TEXTURE_ORIGIN_Y","Attributes","TEXTURE_COORD","attributeDescriptions","WebGLTileLayerRenderer","program_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","indices_","paletteTextures_","delete","getProgram","removeHelper","useProgram","tileTexture","bindBuffer","enableAttributes","textureSlot","uniformName","paletteIndex","setUniformMatrixValue","mat4","setUniformFloatValue","gutterExtent","setUniformFloatVec4","zoom","drawElements","pixel","coordinate","pixelToCoordinateTransform","layerExtent","sources","getSources","tileTextureCache","getTileCoordForCoordAndZ","TileState","col","row","deleteProgram","WebGLLayerRenderer","inversePixelTransform_","postProcesses_","onMapChanged_","addChangeListener","MAP","bind","hasListener","PRECOMPOSE","event","dispatchEvent","POSTCOMPOSE","setUniforms","prepareFrame","className","incrementGroup","groupNumber","ii","renderer","getRenderer","layerClassName","getClassName","canvasCacheKey","mapId","canvasCacheKeyMatches","needsToBeRecreated","removeChangeListener","dispatchRenderEvent_","PRERENDER","POSTRENDER","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","ARRAY_BUFFER","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","location","getRenderTargetTexture","init","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","level","internalFormat","border","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","uniform1f","applyUniforms","drawArrays","TRIANGLES","ImageData","uniform3f","uniform4f","DefaultUniform","TIME","ROTATION","VIEWPORT_SIZE_PX","PIXEL_RATIO","HIT_DETECTION","AttributeType","UNSIGNED_SHORT","UNSIGNED_INT","canvasCache","getSharedCanvasCacheKey","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getOrCreateContext","cacheItem","document","createElement","position","left","users","releaseCanvas","loseContext","WebGLHelper","Disposable","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","bufferCache_","extensionCache_","currentProgram_","needsToBeRecreated_","addEventListener","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocationsByProgram_","attribLocationsByProgram_","postProcessPasses_","shaderCompileErrors_","startTime_","Date","now","addUniforms","bufferKey","bufferCache","webGlBuffer","buf","removeEventListener","disableAlphaBlend","enableDepth","depthRange","ZERO","depthFunc","LEQUAL","bindFrameBuffer","frameBuffer","bindInitialFrameBuffer","slot","bindAttribute","attributeName","getAttributeLocation","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getDepthbuffer","start","end","elementType","elementSize","numItems","offsetInBytes","applyFrameState","setUniformFloatVec2","applyHitDetectionUniform","enabled","loc","HTMLImageElement","WebGLTexture","prevValue","imageReady","complete","program","shader","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","programUid","makeProjectionTransform","transform","uniform2fv","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","computeAttributesStride","attr","getByteSizeFromType","preventDefault","nearest","Uint16Array","handleTileChange_","CHANGE","crossOrigin","create","fromTransform","orthographic","right","bottom","top","near","far","out","lr","bt","nf","scale","m","translate","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","translation","ELEMENT_ARRAY_BUFFER","CONTEXT_IDS","getContext","assign","antialias"],"sourceRoot":""}