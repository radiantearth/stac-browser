{"version":3,"file":"js/4794.54441699.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/Google.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/Google\n */\n\nimport ViewHint from '../ViewHint.js';\nimport {getBottomLeft, getTopRight} from '../extent.js';\nimport {toLonLat} from '../proj.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport TileImage from './TileImage.js';\n\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst attributionUrl = 'https://tile.googleapis.com/tile/v1/viewport';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {boolean} [attributionsCollapsible=true] Allow the attributions to be collapsed.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n\n    super({\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US',\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n    if (options.apiOptions) {\n      sessionTokenRequest.apiOptions = options.apiOptions;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sessionTokenValue_;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportAttribution_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportExtent_;\n\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.sessionTokenRequest_),\n    };\n\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [\n      sessionTokenResponse.tileWidth / tilePixelRatio,\n      sessionTokenResponse.tileHeight / tilePixelRatio,\n    ];\n\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n\n    const session = sessionTokenResponse.session;\n    this.sessionTokenValue_ = session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n\n    this.setAttributions(this.fetchAttributions_.bind(this));\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  /**\n   * @param {import('../Map.js').FrameState} frameState The frame state.\n   * @return {Promise<string>} The attributions.\n   * @private\n   */\n  async fetchAttributions_(frameState) {\n    if (\n      frameState.viewHints[ViewHint.ANIMATING] ||\n      frameState.viewHints[ViewHint.INTERACTING] ||\n      frameState.animate\n    ) {\n      return this.previousViewportAttribution_;\n    }\n    const [west, south] = toLonLat(\n      getBottomLeft(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const [east, north] = toLonLat(\n      getTopRight(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const tileGrid = this.getTileGrid();\n    const zoom = tileGrid.getZForResolution(\n      frameState.viewState.resolution,\n      this.zDirection,\n    );\n    const viewportExtent = `zoom=${zoom}&north=${north}&south=${south}&east=${east}&west=${west}`;\n    // check if the extent or zoom has actually changed to avoid unnecessary requests\n    if (this.previousViewportExtent_ == viewportExtent) {\n      return this.previousViewportAttribution_;\n    }\n    this.previousViewportExtent_ = viewportExtent;\n    const session = this.sessionTokenValue_;\n    const key = this.apiKey_;\n    const url = `${attributionUrl}?session=${session}&key=${key}&${viewportExtent}`;\n    this.previousViewportAttribution_ = await fetch(url)\n      .then((response) => response.json())\n      .then((json) => json.copyright);\n\n    return this.previousViewportAttribution_;\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\n\nexport default Google;\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n"],"names":["createSessionUrl","tileUrl","attributionUrl","maxZoom","Google","constructor","options","highDpi","super","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","undefined","transition","zDirection","this","apiKey_","key","error_","sessionTokenRequest","mapType","language","region","imageFormat","scale","layerTypes","styles","overlay","apiOptions","sessionTokenRequest_","sessionTokenValue_","sessionRefreshId_","previousViewportAttribution_","previousViewportExtent_","createSession_","getError","fetchSessionToken","url","config","fetch","method","headers","body","JSON","stringify","response","ok","json","Error","error","message","setState","sessionTokenResponse","getTilePixelRatio","tileSize","tileWidth","tileHeight","tileGrid","extent","getProjection","session","tileUrlFunction","tileCoord","pixelRatio","z","x","y","expiry","parseInt","timeout","Math","max","Date","now","setTimeout","setAttributions","fetchAttributions_","bind","frameState","viewHints","ANIMATING","INTERACTING","animate","west","south","viewState","east","north","getTileGrid","zoom","getZForResolution","resolution","viewportExtent","then","copyright","disposeInternal","clearTimeout","TILELOADSTART","TILELOADEND","TILELOADERROR","TileImage","attributions","defaultTileLoadFunction","urls","tileClass","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","getGutterForProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","urlTileCoord","getTileCoordForTileUrlFunction","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","getTile","sourceProjection","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","event","uid","tileState","getState","type","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey","join"],"sourceRoot":""}