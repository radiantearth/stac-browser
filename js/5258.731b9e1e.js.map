{"version":3,"file":"js/5258.731b9e1e.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Zoomify.js"],"sourcesContent":["/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/Zoomify\n */\n\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getCenter} from '../extent.js';\nimport {toSize} from '../size.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    tileSize,\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    options,\n  ) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @override\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      }\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n    return image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation =\n      options.tierSizeCalculation !== undefined\n        ? options.tierSizeCalculation\n        : 'default';\n\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (\n          imageWidth > tileSizeForTierSizeCalculation ||\n          imageHeight > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (\n          width > tileSizeForTierSizeCalculation ||\n          height > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation),\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1],\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions,\n    });\n\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = tileCoord[2];\n          const tileIndex =\n            tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileGroup =\n            ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup,\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(\n      urls.map(createFromTemplate),\n    );\n\n    const ZoomifyTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize * tilePixelRatio),\n    );\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\n      getCenter(tileGrid.getExtent()),\n      resolutions[resolutions.length - 1],\n    );\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', () => {\n      tileWidth = tileSize;\n      this.changed();\n    });\n    image.src = testTileUrl;\n  }\n}\n\nexport default Zoomify;\n"],"names":["TILELOADSTART","TILELOADEND","TILELOADERROR","TileImage","constructor","options","super","attributions","cacheSize","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","interpolate","undefined","key","attributionsCollapsible","zDirection","this","crossOrigin","tileClass","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","getGutterForProjection","getProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","event","uid","tileState","getState","type","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey","join","CustomTile","tileSize","zoomifyImage_","tileSize_","image","width","height","context","drawImage","canvas","Zoomify","size","tierSizeCalculation","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","Error","reverse","resolutions","tileCountUpToTier","i","ii","length","extent","includes","tileWidth","createFromTemplate","template","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext","replace","m","p","map","ZoomifyTileClass","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image"],"sourceRoot":""}