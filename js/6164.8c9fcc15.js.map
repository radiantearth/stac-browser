{"version":3,"file":"js/6164.8c9fcc15.js","mappings":"qKAOA,cAMEA,cAAe,gBAQfC,YAAa,cASbC,cAAe,gB,oGCOjB,MAAMC,UAAgB,aAIpB,WAAAC,CAAYC,GACVC,MAAM,CACJC,aAAcF,EAAQE,aACtBC,UAAWH,EAAQG,UACnBC,WAAYJ,EAAQI,WACpBC,MAAOL,EAAQK,MACfC,SAAUN,EAAQM,SAClBC,eAAgBP,EAAQO,eACxBC,MAAOR,EAAQQ,MACfC,WAAYT,EAAQS,WACpBC,YAAaV,EAAQU,YACrBC,IAAKX,EAAQW,IACbC,wBAAyBZ,EAAQY,wBACjCC,WAAYb,EAAQa,aAOtBC,KAAKC,yBACHD,KAAKE,kBAAoBlB,EAAQmB,UAAUD,gBAM7CF,KAAKI,iBAAmBlB,EAAQkB,iBAE5BlB,EAAQgB,kBACVF,KAAKE,gBAAkBhB,EAAQgB,iBAOjCF,KAAKK,KAAO,KAERnB,EAAQmB,KACVL,KAAKM,QAAQpB,EAAQmB,MACZnB,EAAQqB,KACjBP,KAAKQ,OAAOtB,EAAQqB,KAOtBP,KAAKS,iBAAmB,CAAC,CAC3B,CAQA,mBAAAC,GACE,OAAOV,KAAKI,gBACd,CAQA,kBAAAO,GACE,OAAOC,OAAOC,eAAeb,MAAME,kBAAoBF,KAAKE,gBACxDF,KAAKE,gBAAgBY,KAAKd,MAC1BA,KAAKE,eACX,CAUA,OAAAa,GACE,OAAOf,KAAKK,IACd,CAOA,gBAAAW,CAAiBC,GACf,MAAMC,EAAoDD,EAAY,OAChEE,GAAM,QAAOD,GACbE,EAAYF,EAAKG,WACvB,IAAIC,EACAF,GAAa,IAAUG,SACzBvB,KAAKS,iBAAiBU,IAAO,EAC7BG,EAAO,aAAczC,eACZsC,KAAOnB,KAAKS,0BACdT,KAAKS,iBAAiBU,GAC7BG,EACEF,GAAa,IAAUI,MACnB,aAAczC,cACdqC,GAAa,IAAUK,OACrB,aAAc3C,iBACd4C,QAEEA,GAARJ,GACFtB,KAAK2B,cAAc,IAAI,EAAAC,gBAAgBN,EAAMJ,GAEjD,CAQA,mBAAAW,CAAoBzB,GAClBJ,KAAKI,iBAAmBA,EACxBJ,KAAK8B,SACP,CASA,kBAAAC,CAAmB7B,EAAiBL,GAClCG,KAAKE,gBAAkBA,EACJ,qBAARL,EACTG,KAAKgC,OAAOnC,GAEZG,KAAK8B,SAET,CAOA,MAAAtB,CAAOD,GACL,MAAMF,GAAO,QAAUE,GACvBP,KAAKK,KAAOA,EACZL,KAAKM,QAAQD,EACf,CAQA,OAAAC,CAAQD,GACNL,KAAKK,KAAOA,EACZ,MAAMR,EAAMQ,EAAK4B,KAAK,MAClBjC,KAAKC,yBACPD,KAAK+B,oBAAmB,QAAoB1B,EAAML,KAAKR,UAAWK,GAElEG,KAAKgC,OAAOnC,EAEhB,CAQA,eAAAK,CAAgBgC,EAAWC,EAAY7C,GAEvC,EAGF,c","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n"],"names":["TILELOADSTART","TILELOADEND","TILELOADERROR","UrlTile","constructor","options","super","attributions","cacheSize","projection","state","tileGrid","tilePixelRatio","wrapX","transition","interpolate","key","attributionsCollapsible","zDirection","this","generateTileUrlFunction_","tileUrlFunction","prototype","tileLoadFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","bind","getUrls","handleTileChange","event","tile","uid","tileState","getState","type","LOADING","ERROR","LOADED","undefined","dispatchEvent","TileSourceEvent","setTileLoadFunction","changed","setTileUrlFunction","setKey","join","tileCoord","pixelRatio"],"sourceRoot":""}