{"version":3,"file":"js/8058.32a31293.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/tilegrid.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/BaseTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/Tile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Tile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/BaseImage.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {toSize} from './size.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\n\nexport {TileGrid};\nexport {default as WMTS} from './tilegrid/WMTS.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth,\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution,\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true,\n    );\n  }\n\n  /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */\n  getCacheSize() {\n    return this.cacheSize_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/layer/Tile\n */\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\nimport BaseTileLayer from './BaseTile.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this, {\n      cacheSize: this.getCacheSize(),\n    });\n  }\n}\n\nexport default TileLayer;\n","/**\n * @module ol/layer/Image\n */\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\nimport BaseImageLayer from './BaseImage.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {abstract, getUid} from '../util.js';\nimport Source from './Source.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     * @protected\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || getUid(this);\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    const gridProjection =\n      projection !== undefined ? projection : this.getProjection();\n    const tileGrid =\n      projection !== undefined\n        ? this.getTileGridForProjection(gridProjection)\n        : this.tileGrid || this.getTileGridForProjection(gridProjection);\n    if (this.getWrapX() && gridProjection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, gridProjection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\n   * @api\n   */\n  clear() {}\n\n  /**\n   * @override\n   */\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport CanvasLayerRenderer from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image ? null : this.image.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection,\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image = null;\n          }\n        }\n      } else {\n        this.image = null;\n      }\n    }\n\n    return !!this.image;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image.getExtent();\n    const img = this.image.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth),\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight),\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const image = this.image;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const context = this.getRenderContext(frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection,\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY,\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      if (opacity !== 1) {\n        context.save();\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.restore();\n      }\n    }\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n"],"names":["getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","maxZoom","tileSize","corner","undefined","resolutions","resolutionsFromExtent","origin","createXYZ","options","xyzOptions","getExtent","gridOptions","minZoom","maxResolution","height","width","max","length","Array","pow","half","degrees","getMetersPerUnit","BaseTileLayer","constructor","baseOptions","Object","assign","cacheSize","preload","useInterimTilesOnError","super","this","on","once","un","cacheSize_","setPreload","setUseInterimTilesOnError","getCacheSize","getPreload","get","PRELOAD","set","getUseInterimTilesOnError","USE_INTERIM_TILES_ON_ERROR","getData","pixel","TileLayer","createRenderer","ImageLayer","TileSource","attributions","attributionsCollapsible","state","interpolate","tilePixelRatio_","tilePixelRatio","getTileSize","getMinZoom","tmpSize","key_","key","tileOptions","transition","zDirection","getGutterForProjection","getKey","setKey","changed","getResolutions","getTileGridForProjection","getTile","x","y","pixelRatio","getTileGrid","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","gridProjection","getProjection","getWrapX","isGlobal","clear","refresh","TileSourceEvent","type","tile","CanvasImageLayerRenderer","imageLayer","image","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","ANIMATING","INTERACTING","loadImage","getState","EMPTY","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","imageExtent","img","imageMapWidth","col","floor","imageMapHeight","row","getImageData","renderFrame","target","imageResolution","getResolution","imageResolutionX","imageResolutionY","isArray","imagePixelRatio","getPixelRatio","viewCenter","scaleX","scaleY","prepareContainer","context","canvas","getRenderContext","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","imageSmoothingEnabled","preRender","dx","dy","opacity","save","globalAlpha","drawImage","restore","postRender","container","BaseImageLayer"],"sourceRoot":""}