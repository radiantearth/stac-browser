{"version":3,"file":"js/4686.66d1d40a.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/format/IIIFInfo.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/IIIF.js"],"sourcesContent":["/**\n * @module ol/format/IIIFInfo\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} PreferredOptions\n * @property {string} [format] Preferred image format. Will be used if the image information\n * indicates support for that format.\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\n * indicates support for that quality.\n */\n\n/**\n * @typedef {Object} SupportedFeatures\n * @property {Array<string>} [supports] Supported IIIF image size and region\n * calculation features.\n * @property {Array<string>} [formats] Supported image formats.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n */\n\n/**\n * @typedef {Object} TileInfo\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\n * @property {number} width Tile width in pixels.\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\n * not given.\n */\n\n/**\n * @typedef {Object} IiifProfile\n * @property {Array<string>} [formats] Supported image formats for the image service.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n * @property {Array<string>} [supports] Supported features.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n */\n\n/**\n * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}\n *    ImageInformationResponse\n */\n\n/**\n * Enum representing the major IIIF Image API versions\n * @enum {string}\n */\nexport const Versions = {\n  VERSION1: 'version1',\n  VERSION2: 'version2',\n  VERSION3: 'version3',\n};\n\n/**\n * Supported image formats, qualities and supported region / size calculation features\n * for different image API versions and compliance levels\n * @const\n * @type {Object<string, Object<string, SupportedFeatures>>}\n */\nconst IIIF_PROFILE_VALUES = {};\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\n  'level0': {\n    supports: [],\n    formats: [],\n    qualities: ['native'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['native'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['native', 'color', 'grey', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByDistortedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionSquare',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default'],\n  },\n};\nIIIF_PROFILE_VALUES['none'] = {\n  'none': {\n    supports: [],\n    formats: [],\n    qualities: [],\n  },\n};\n\nconst COMPLIANCE_VERSION1 =\n  /^https?:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(?:1\\.1\\/)?compliance\\.html#level[0-2]$/;\nconst COMPLIANCE_VERSION2 =\n  /^https?:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](?:\\.json)?$/;\nconst COMPLIANCE_VERSION3 =\n  /(^https?:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](?:\\.json)?$)|(^level[0-2]$)/;\n\nfunction generateVersion1Options(iiifInfo) {\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  // Version 1.0 and 1.1 do not require a profile.\n  if (levelProfile === undefined) {\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\n  }\n  return {\n    url:\n      iiifInfo.imageInfo['@id'] === undefined\n        ? undefined\n        : iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    supports: levelProfile.supports,\n    formats: [\n      ...levelProfile.formats,\n      iiifInfo.imageInfo.formats === undefined\n        ? []\n        : iiifInfo.imageInfo.formats,\n    ],\n    qualities: [\n      ...levelProfile.qualities,\n      iiifInfo.imageInfo.qualities === undefined\n        ? []\n        : iiifInfo.imageInfo.qualities,\n    ],\n    resolutions: iiifInfo.imageInfo.scale_factors,\n    tileSize:\n      iiifInfo.imageInfo.tile_width !== undefined\n        ? iiifInfo.imageInfo.tile_height !== undefined\n          ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]\n          : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]\n        : iiifInfo.imageInfo.tile_height != undefined\n          ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]\n          : undefined,\n  };\n}\n\nfunction generateVersion2Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    additionalProfile =\n      Array.isArray(iiifInfo.imageInfo.profile) &&\n      iiifInfo.imageInfo.profile.length > 1,\n    profileSupports =\n      additionalProfile && iiifInfo.imageInfo.profile[1].supports\n        ? iiifInfo.imageInfo.profile[1].supports\n        : [],\n    profileFormats =\n      additionalProfile && iiifInfo.imageInfo.profile[1].formats\n        ? iiifInfo.imageInfo.profile[1].formats\n        : [],\n    profileQualities =\n      additionalProfile && iiifInfo.imageInfo.profile[1].qualities\n        ? iiifInfo.imageInfo.profile[1].qualities\n        : [];\n  return {\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height === undefined ? tile.width : tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports: [...levelProfile.supports, ...profileSupports],\n    formats: [...levelProfile.formats, ...profileFormats],\n    qualities: [...levelProfile.qualities, ...profileQualities],\n  };\n}\n\nfunction generateVersion3Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    formats =\n      iiifInfo.imageInfo.extraFormats === undefined\n        ? levelProfile.formats\n        : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\n    preferredFormat =\n      iiifInfo.imageInfo.preferredFormats !== undefined &&\n      Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\n      iiifInfo.imageInfo.preferredFormats.length > 0\n        ? iiifInfo.imageInfo.preferredFormats\n            .filter(function (format) {\n              return ['jpg', 'png', 'gif'].includes(format);\n            })\n            .reduce(function (acc, format) {\n              return acc === undefined && formats.includes(format)\n                ? format\n                : acc;\n            }, undefined)\n        : undefined;\n  return {\n    url: iiifInfo.imageInfo['id'],\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports:\n      iiifInfo.imageInfo.extraFeatures === undefined\n        ? levelProfile.supports\n        : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\n    formats: formats,\n    qualities:\n      iiifInfo.imageInfo.extraQualities === undefined\n        ? levelProfile.qualities\n        : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\n    preferredFormat: preferredFormat,\n  };\n}\n\nconst versionFunctions = {};\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\n\n/**\n * @classdesc\n * Format for transforming IIIF Image API image information responses into\n * IIIF tile source ready options\n *\n * @api\n */\nclass IIIFInfo {\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   */\n  constructor(imageInfo) {\n    this.setImageInfo(imageInfo);\n  }\n\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   * @api\n   */\n  setImageInfo(imageInfo) {\n    if (typeof imageInfo == 'string') {\n      this.imageInfo = JSON.parse(imageInfo);\n    } else {\n      this.imageInfo = imageInfo;\n    }\n  }\n\n  /**\n   * @return {Versions|undefined} Major IIIF version.\n   * @api\n   */\n  getImageApiVersion() {\n    if (this.imageInfo === undefined) {\n      return undefined;\n    }\n    let context = this.imageInfo['@context'] || 'ol-no-context';\n    if (typeof context == 'string') {\n      context = [context];\n    }\n    for (let i = 0; i < context.length; i++) {\n      switch (context[i]) {\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\n        case 'http://iiif.io/api/image/1/context.json':\n          return Versions.VERSION1;\n        case 'http://iiif.io/api/image/2/context.json':\n          return Versions.VERSION2;\n        case 'http://iiif.io/api/image/3/context.json':\n          return Versions.VERSION3;\n        case 'ol-no-context':\n          // Image API 1.0 has no '@context'\n          if (\n            this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&\n            this.imageInfo.identifier\n          ) {\n            return Versions.VERSION1;\n          }\n          break;\n        default:\n      }\n    }\n    assert(\n      false,\n      'Cannot determine IIIF Image API version from provided image information JSON',\n    );\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string|undefined} Compliance level as it appears in the IIIF image information\n   * response.\n   */\n  getComplianceLevelEntryFromProfile(version) {\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\n      return undefined;\n    }\n    if (version === undefined) {\n      version = this.getImageApiVersion();\n    }\n    switch (version) {\n      case Versions.VERSION1:\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION3:\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION2:\n        if (\n          typeof this.imageInfo.profile === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile)\n        ) {\n          return this.imageInfo.profile;\n        }\n        if (\n          Array.isArray(this.imageInfo.profile) &&\n          this.imageInfo.profile.length > 0 &&\n          typeof this.imageInfo.profile[0] === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])\n        ) {\n          return this.imageInfo.profile[0];\n        }\n        break;\n      default:\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\n   */\n  getComplianceLevelFromProfile(version) {\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\n    if (complianceLevel === undefined) {\n      return undefined;\n    }\n    const level = complianceLevel.match(/level[0-2](?:\\.json)?$/g);\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\n  }\n\n  /**\n   * @return {SupportedFeatures|undefined} Image formats, qualities and region / size calculation\n   * methods that are supported by the IIIF service.\n   */\n  getComplianceLevelSupportedFeatures() {\n    if (this.imageInfo === undefined) {\n      return undefined;\n    }\n    const version = this.getImageApiVersion();\n    const level = this.getComplianceLevelFromProfile(version);\n    if (level === undefined) {\n      return IIIF_PROFILE_VALUES['none']['none'];\n    }\n    return IIIF_PROFILE_VALUES[version][level];\n  }\n\n  /**\n   * @param {PreferredOptions} [preferredOptions] Optional options for preferred format and quality.\n   * @return {import(\"../source/IIIF.js\").Options|undefined} IIIF tile source ready constructor options.\n   * @api\n   */\n  getTileSourceOptions(preferredOptions) {\n    const options = preferredOptions || {},\n      version = this.getImageApiVersion();\n    if (version === undefined) {\n      return undefined;\n    }\n    const imageOptions =\n      version === undefined ? undefined : versionFunctions[version](this);\n    if (imageOptions === undefined) {\n      return undefined;\n    }\n    return {\n      url: imageOptions.url,\n      version: version,\n      size: [this.imageInfo.width, this.imageInfo.height],\n      sizes: imageOptions.sizes,\n      format:\n        options.format !== undefined &&\n        imageOptions.formats.includes(options.format)\n          ? options.format\n          : imageOptions.preferredFormat !== undefined\n            ? imageOptions.preferredFormat\n            : 'jpg',\n      supports: imageOptions.supports,\n      quality:\n        options.quality && imageOptions.qualities.includes(options.quality)\n          ? options.quality\n          : imageOptions.qualities.includes('native')\n            ? 'native'\n            : 'default',\n      resolutions: Array.isArray(imageOptions.resolutions)\n        ? imageOptions.resolutions.sort(function (a, b) {\n            return b - a;\n          })\n        : undefined,\n      tileSize: imageOptions.tileSize,\n    };\n  }\n}\n\nexport default IIIFInfo;\n","/**\n * @module ol/source/IIIF\n */\n\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {toSize} from '../size.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n\n    let baseUrl = partialOptions.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      'Missing or invalid `size`',\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality =\n      partialOptions.quality ||\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2),\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      }),\n    );\n\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\n\nexport default IIIF;\n"],"names":["Versions","VERSION1","VERSION2","VERSION3","IIIF_PROFILE_VALUES","supports","formats","qualities","generateVersion1Options","iiifInfo","levelProfile","getComplianceLevelSupportedFeatures","undefined","url","imageInfo","replace","resolutions","scale_factors","tileSize","tile_width","tile_height","generateVersion2Options","additionalProfile","Array","isArray","profile","length","profileSupports","profileFormats","profileQualities","sizes","map","size","width","height","tiles","tile","scaleFactors","generateVersion3Options","extraFormats","preferredFormat","preferredFormats","filter","format","includes","reduce","acc","extraFeatures","extraQualities","versionFunctions","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","TileImage","constructor","options","partialOptions","baseUrl","lastIndexOf","version","isNaN","tilePixelRatio","quality","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","TileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","regionWidth","regionHeight","IiifTileClass","CustomTile","bind","super","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","state","tileClass","transition","this","zDirection"],"sourceRoot":""}