{"version":3,"file":"js/5858.e9300135.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/ImageCanvas.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/canvas/VectorImageLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/VectorImage.js"],"sourcesContent":["/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/ImageCanvas\n */\nimport ImageWrapper from './Image.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageWrapper {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport CanvasLayerRenderer from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image ? null : this.image.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection,\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image = null;\n          }\n        }\n      } else {\n        this.image = null;\n      }\n    }\n\n    return !!this.image;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image.getExtent();\n    const img = this.image.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth),\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight),\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const image = this.image;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const context = this.getRenderContext(frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection,\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY,\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      if (opacity !== 1) {\n        context.save();\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.restore();\n      }\n    }\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/renderer/canvas/VectorImageLayer\n */\nimport RBush from 'rbush';\nimport ImageCanvas from '../../ImageCanvas.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport EventType from '../../events/EventType.js';\nimport {getHeight, getWidth, isEmpty, scaleFromCenter} from '../../extent.js';\nimport {fromResolutionLike} from '../../resolution.js';\nimport {apply, compose, create} from '../../transform.js';\nimport CanvasImageLayerRenderer from './ImageLayer.js';\nimport CanvasVectorLayerRenderer from './VectorLayer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorImage.js\").default} layer Vector image layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @private\n     * @type {import(\"./VectorLayer.js\").default}\n     */\n    this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.layerImageRatio_ = layer.getImageRatio();\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.coordinateToVectorPixelTransform_ = create();\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.vectorRenderer_.dispose();\n    super.disposeInternal();\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    if (!this.vectorRenderer_) {\n      return Promise.resolve([]);\n    }\n    const vectorPixel = apply(\n      this.coordinateToVectorPixelTransform_,\n      apply(this.renderedPixelToCoordinateTransform_, pixel.slice()),\n    );\n    return this.vectorRenderer_.getFeatures(vectorPixel);\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    this.vectorRenderer_.handleFontsChanged();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const hints = frameState.viewHints;\n    const vectorRenderer = this.vectorRenderer_;\n    let renderedExtent = frameState.extent;\n    if (this.layerImageRatio_ !== 1) {\n      renderedExtent = renderedExtent.slice(0);\n      scaleFromCenter(renderedExtent, this.layerImageRatio_);\n    }\n    const width = getWidth(renderedExtent) / viewResolution;\n    const height = getHeight(renderedExtent) / viewResolution;\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      vectorRenderer.useContainer(null, null);\n      const context = vectorRenderer.context;\n      const layerState = frameState.layerStatesArray[frameState.layerIndex];\n      const imageLayerState = Object.assign({}, layerState, {opacity: 1});\n      const imageFrameState = /** @type {import(\"../../Map.js\").FrameState} */ (\n        Object.assign({}, frameState, {\n          extent: renderedExtent,\n          size: [width, height],\n          viewState: /** @type {import(\"../../View.js\").State} */ (\n            Object.assign({}, frameState.viewState, {\n              rotation: 0,\n            })\n          ),\n          layerStatesArray: [imageLayerState],\n          layerIndex: 0,\n          declutter: null,\n        })\n      );\n      const declutter = this.getLayer().getDeclutter();\n      if (declutter) {\n        imageFrameState.declutter = {\n          [declutter]: new RBush(9),\n        };\n      }\n      const image = new ImageCanvas(\n        renderedExtent,\n        viewResolution,\n        pixelRatio,\n        context.canvas,\n        function (callback) {\n          if (\n            vectorRenderer.prepareFrame(imageFrameState) &&\n            vectorRenderer.replayGroupChanged\n          ) {\n            vectorRenderer.clipping = false;\n            vectorRenderer.renderFrame(imageFrameState, null);\n            vectorRenderer.renderDeclutter(imageFrameState);\n            vectorRenderer.renderDeferred(imageFrameState);\n            callback();\n          }\n        },\n      );\n\n      image.addEventListener(EventType.CHANGE, () => {\n        if (image.getState() !== ImageState.LOADED) {\n          return;\n        }\n        this.image = image;\n        const imagePixelRatio = image.getPixelRatio();\n        const renderedResolution =\n          (fromResolutionLike(image.getResolution()) * pixelRatio) /\n          imagePixelRatio;\n        this.renderedResolution = renderedResolution;\n        this.coordinateToVectorPixelTransform_ = compose(\n          this.coordinateToVectorPixelTransform_,\n          width / 2,\n          height / 2,\n          1 / renderedResolution,\n          -1 / renderedResolution,\n          0,\n          -viewState.center[0],\n          -viewState.center[1],\n        );\n      });\n      image.load();\n    }\n\n    if (this.image) {\n      this.renderedPixelToCoordinateTransform_ =\n        frameState.pixelToCoordinateTransform.slice();\n    }\n\n    return !this.getLayer().getSource()?.loading && !!this.image;\n  }\n\n  /**\n   * @override\n   */\n  preRender() {}\n\n  /**\n   * @override\n   */\n  postRender() {}\n\n  /**\n   */\n  renderDeclutter() {}\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    if (this.vectorRenderer_) {\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(\n        coordinate,\n        frameState,\n        hitTolerance,\n        callback,\n        matches,\n      );\n    }\n    return super.forEachFeatureAtCoordinate(\n      coordinate,\n      frameState,\n      hitTolerance,\n      callback,\n      matches,\n    );\n  }\n}\n\nexport default CanvasVectorImageLayerRenderer;\n","/**\n * @module ol/layer/VectorImage\n */\nimport CanvasVectorImageLayerRenderer from '../renderer/canvas/VectorImageLayer.js';\nimport BaseVectorLayer from './BaseVector.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text on this layer. Any truthy value will enable\n * decluttering. The priority is defined by the `zIndex` of the style and the render order of features. Higher z-index means higher\n * priority. Within the same z-index, a feature rendered before another has higher priority. Items will\n * not be decluttered against or together with items on other layers with the same `declutter` value. If\n * that is needed, use {@link import(\"../layer/Vector.js\").default} instead.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the\n * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Vector data is rendered client-side, to an image. This layer type provides great performance\n * during panning and zooming, but point symbols and texts are always rotated with the view and\n * pixels are scaled during zoom animations. For more accurate rendering of vector data, use\n * {@link module:ol/layer/Vector~VectorLayer} instead.\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorImageLayerRenderer>}\n * @api\n */\nclass VectorImageLayer extends BaseVectorLayer {\n  /**\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.imageRatio;\n    super(baseOptions);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.imageRatio_ =\n      options.imageRatio !== undefined ? options.imageRatio : 1;\n  }\n\n  /**\n   * @return {number} Ratio between rendered extent size and viewport extent size.\n   */\n  getImageRatio() {\n    return this.imageRatio_;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasVectorImageLayerRenderer(this);\n  }\n}\n\nexport default VectorImageLayer;\n"],"names":["fromResolutionLike","resolution","Array","isArray","Math","min","ImageCanvas","constructor","extent","pixelRatio","canvas","loader","state","undefined","IDLE","LOADED","super","this","loader_","canvas_","error_","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage","CanvasImageLayerRenderer","imageLayer","image","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","viewState","viewResolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","projection","ANIMATING","INTERACTING","loadImage","getState","EMPTY","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","imageResolutionX","imageResolutionY","imagePixelRatio","getPixelRatio","viewCenter","center","scaleX","scaleY","prepareContainer","context","getRenderContext","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","imageSmoothingEnabled","preRender","dx","dy","opacity","save","globalAlpha","drawImage","restore","postRender","container","CanvasVectorImageLayerRenderer","vectorRenderer_","layerImageRatio_","getImageRatio","coordinateToVectorPixelTransform_","renderedPixelToCoordinateTransform_","disposeInternal","dispose","getFeatures","Promise","resolve","vectorPixel","handleFontsChanged","vectorRenderer","ViewHint","useContainer","imageLayerState","Object","assign","imageFrameState","size","rotation","declutter","getDeclutter","callback","replayGroupChanged","clipping","renderDeclutter","renderDeferred","addEventListener","EventType","CHANGE","ImageState","loading","forEachFeatureAtCoordinate","hitTolerance","matches","VectorImageLayer","BaseVector","options","baseOptions","imageRatio","imageRatio_","createRenderer"],"sourceRoot":""}