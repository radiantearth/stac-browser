{"version":3,"file":"js/2660.3ddbf399.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/BingMaps.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/TileImage.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/BingMaps\n */\n\nimport {applyTransform, intersects} from '../extent.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {createOrUpdate} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION =\n  '<a class=\"ol-attribution-bing-tos\" ' +\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n  'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond\n * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,\n * which is unique for each imagery set in BingMaps.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.placeholderTiles_ = options.placeholderTiles;\n\n    const url =\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n      this.imagerySet_ +\n      '?uriScheme=https&include=ImageryProviders&key=' +\n      this.apiKey_ +\n      '&c=' +\n      this.culture_;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => this.handleImageryMetadataResponse(json));\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (\n      response.statusCode != 200 ||\n      response.statusDescription != 'OK' ||\n      response.authenticationResultCode != 'ValidCredentials' ||\n      response.resourceSets.length != 1 ||\n      response.resourceSets[0].resources.length != 1\n    ) {\n      this.setState('error');\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize =\n      resource.imageWidth == resource.imageHeight\n        ? resource.imageWidth / scale\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    const placeholderTiles = this.placeholderTiles_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            }\n            createOrUpdate(\n              tileCoord[0],\n              tileCoord[1],\n              tileCoord[2],\n              quadKeyTileCoord,\n            );\n            const url = new URL(\n              imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord)),\n            );\n            const params = url.searchParams;\n            if (hidpi) {\n              params.set('dpi', 'd1');\n              params.set('device', 'mobile');\n            }\n            if (placeholderTiles === true) {\n              params.delete('n');\n            } else if (placeholderTiles === false) {\n              params.set('n', 'z');\n            }\n            return url.toString();\n          }\n        );\n      }),\n    );\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        this.getProjection(),\n      );\n\n      this.setAttributions((frameState) => {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const z = tileGrid.getZForResolution(\n          viewState.resolution,\n          this.zDirection,\n        );\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(\n          viewState.center,\n          z,\n        );\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      });\n    }\n\n    this.setState('ready');\n  }\n}\n\nexport default BingMaps;\n","/**\n * @module ol/source/TileImage\n */\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\nimport UrlTile from './UrlTile.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/UrlTile\n */\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n"],"names":["TILELOADSTART","TILELOADEND","TILELOADERROR","quadKey","tileCoord","z","digits","Array","i","charCode","mask","String","fromCharCode","join","TOS_ATTRIBUTION","BingMaps","constructor","options","hidpi","undefined","super","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","this","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","key","imagerySet_","imagerySet","placeholderTiles_","placeholderTiles","url","fetch","then","response","json","handleImageryMetadataResponse","getApiKey","getImagerySet","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","resource","zoomMax","sourceProjection","getProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","pixelRatio","URL","params","searchParams","set","delete","toString","imageryProviders","transform","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","getTileCoordForCoordAndZ","center","zoom","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","push","attribution","TileImage","defaultTileLoadFunction","urls","attributionsCollapsible","tileClass","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","getGutterForProjection","getGutter","getKey","getInterpolate","getTileGridForProjection","thisProj","projKey","createTile_","x","y","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","getTileInternal","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTilePixelRatio","setRenderReprojectionEdges","render","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage","UrlTile","generateTileUrlFunction_","prototype","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","getUrls","event","uid","tileState","getState","type","LOADING","ERROR","LOADED","dispatchEvent","TileSourceEvent","setTileLoadFunction","setTileUrlFunction","setKey"],"sourceRoot":""}