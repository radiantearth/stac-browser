{"version":3,"file":"js/8236.615b65fd.js","mappings":"0NAEe,SAASA,IACtB,MAAMC,EAAWC,IAAAA,cAGjBA,IAAAA,gBAAuB,IAAIC,KAAKC,aAAa,SAAUC,OAAOC,OAAOL,EAASM,uBAAwB,CACpGC,aAAa,KAIfN,IAAAA,cAAqB,IAAIC,KAAKM,eAAe,QAASR,EAASS,sBAC/DR,IAAAA,kBAAyB,IAAIC,KAAKM,eAAe,QAAS,CAC1DE,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,SAAU,MACVC,aAAc,SAEhB,C","sources":["webpack://@radiantearth/stac-browser/./src/locales/en/stac-fields.js"],"sourcesContent":["import I18N from '@radiantearth/stac-fields/I18N';\n\nexport default function run(/*locale*/) {\n  const defaults = I18N.getDefaults();\n  // We want the globally understandable number format with no thousands separator (useGrouping: false)\n  // and a dot as decimal separator to avoid ambiguity\n  I18N.numberFormatter = new Intl.NumberFormat(\"en-001\", Object.assign(defaults.numberFormatterOptions, {\n    useGrouping: false,\n  }));\n  // We want ISO formatting for the date (and time), which is available in e.g. sv-SE\n  // See also: https://stackoverflow.com/questions/25050034/get-iso-8601-using-intl-datetimeformat\n  I18N.dateFormatter = new Intl.DateTimeFormat(\"sv-SE\", defaults.dateFormatterOptions);\n  I18N.dateTimeFormatter = new Intl.DateTimeFormat(\"sv-SE\", {\n\t\tday: 'numeric',\n\t\tmonth: 'numeric',\n\t\tyear: 'numeric',\n\t\thour: 'numeric',\n\t\tminute: 'numeric',\n\t\tsecond: 'numeric',\n\t\ttimeZone: \"UTC\",\n\t\ttimeZoneName: \"short\"\n\t});\n}\n"],"names":["run","defaults","I18N","Intl","NumberFormat","Object","assign","numberFormatterOptions","useGrouping","DateTimeFormat","dateFormatterOptions","day","month","year","hour","minute","second","timeZone","timeZoneName"],"sourceRoot":""}