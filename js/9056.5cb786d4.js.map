{"version":3,"file":"js/9056.5cb786d4.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/resolution.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/common.js","webpack://@radiantearth/stac-browser/./node_modules/ol/ImageCanvas.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/ImageCanvas.js","webpack://@radiantearth/stac-browser/./node_modules/ol/reproj/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/resolution\n */\n\n/**\n * @typedef {number|Array<number>} ResolutionLike\n */\n\n/**\n * @param {ResolutionLike} resolution Resolution.\n * @return {number} Resolution.\n */\nexport function fromResolutionLike(resolution) {\n  if (Array.isArray(resolution)) {\n    return Math.min(...resolution);\n  }\n  return resolution;\n}\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nexport const DECIMALS = 4;\n","/**\n * @module ol/ImageCanvas\n */\nimport ImageWrapper from './Image.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageWrapper {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n","/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport {\n  containsExtent,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\nimport ImageSource from './Image.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./Source.js\").State} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options} [options] ImageCanvas options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state,\n    });\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n\n    let canvas = this.canvas_;\n    if (\n      canvas &&\n      this.renderedRevision_ == this.getRevision() &&\n      canvas.getResolution() == resolution &&\n      canvas.getPixelRatio() == pixelRatio &&\n      containsExtent(canvas.getExtent(), extent)\n    ) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    const canvasElement = this.canvasFunction_.call(\n      this,\n      extent,\n      resolution,\n      pixelRatio,\n      size,\n      projection,\n    );\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n\n    return canvas;\n  }\n}\n\nexport default ImageCanvasSource;\n","/**\n * @module ol/reproj/Image\n */\n\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate,\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution,\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   * @override\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_,\n        true,\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          (e) => {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (\n        this.sourceListenerKey_\n      ),\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport ImageWrapper from '../Image.js';\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {ceil} from '../math.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.wantedProjection_ = null;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate(),\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (this.wantedProjection_ === projection &&\n            ((this.wantedExtent_ &&\n              containsExtent(this.wantedExtent_, requestExtent)) ||\n              containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedProjection_ = projection;\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader,\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this),\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"names":["fromResolutionLike","resolution","Array","isArray","Math","min","DEFAULT_WMS_VERSION","DECIMALS","ImageCanvas","constructor","extent","pixelRatio","canvas","loader","state","undefined","IDLE","LOADED","super","this","loader_","canvas_","error_","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage","ImageCanvasSource","options","attributions","interpolate","projection","resolutions","canvasFunction_","canvasFunction","renderedRevision_","ratio_","ratio","getImageInternal","findNearestResolution","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","canvasElement","call","ReprojImage","Image","sourceProj","targetProj","targetExtent","targetResolution","getImageFunction","maxSourceExtent","canWrapX","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","Triangulation","sourceExtent","calculateSourceExtent","sourceImage","ImageState","EMPTY","sourcePixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","sourceListenerKey_","disposeInternal","unlistenSource_","getProjection","reproject_","sourceState","getState","image","EventType","CHANGE","e","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","Event","type","ImageSource","Source","on","once","un","resolutions_","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","length","wantedProjection_","getResolutions","setResolutions","idx","sourceProjection","dispose","getInterpolate","requestExtent","getRequestExtent","requestResolution","addEventListener","handleImageChange","event","loading","hasListener","dispatchEvent","defaultImageLoadFunction","src","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sourceRoot":""}