{"version":3,"file":"js/4835.cb7332da.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/TileLayerBase.js","webpack://@radiantearth/stac-browser/./node_modules/ol/structs/LRUCache.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/Buffer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/PaletteTexture.js","webpack://@radiantearth/stac-browser/./node_modules/ol/expr/gpu.js","webpack://@radiantearth/stac-browser/./node_modules/ol/DataTile.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/TileTexture.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/TileLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/render/webgl/compileUtil.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/webgl/Layer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/ContextEventType.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/PostProcessingPass.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/Helper.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl/BaseTileRepresentation.js","webpack://@radiantearth/stac-browser/./node_modules/ol/vec/mat4.js","webpack://@radiantearth/stac-browser/./node_modules/ol/webgl.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/TileLayerBase\n */\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {descending} from '../../array.js';\nimport {getIntersection, getRotatedViewport, isEmpty} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {toSize} from '../../size.js';\nimport LRUCache from '../../structs/LRUCache.js';\nimport {\n  createOrUpdate as createTileCoord,\n  getKey as getTileCoordKey,\n} from '../../tilecoord.js';\nimport {\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {abstract, getUid} from '../../util.js';\nimport {create as createMat4} from '../../vec/mat4.js';\nimport WebGLLayerRenderer from './Layer.js';\n\nexport const Uniforms = {\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n};\n\n/**\n * Transform a zoom level into a depth value; zoom level zero has a depth value of 0.5, and increasing values\n * have a depth trending towards 0\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\nfunction depthForZ(z) {\n  return 1 / (z + 2);\n}\n\n/**\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\n */\n/**\n * @typedef {Object} TileRepresentationLookup\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\n */\n\n/**\n * @return {TileRepresentationLookup} A new tile representation lookup.\n */\nexport function newTileRepresentationLookup() {\n  return {tileIds: new Set(), representationsByZ: {}};\n}\n\n/**\n * Check if a tile is already in the tile representation lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @return {boolean} The tile is already in the lookup.\n */\nfunction lookupHasTile(tileRepresentationLookup, tile) {\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\n}\n\n/**\n * Add a tile representation to the lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\n * @param {number} z The zoom level.\n */\nfunction addTileRepresentationToLookup(\n  tileRepresentationLookup,\n  tileRepresentation,\n  z,\n) {\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\n  if (!(z in representationsByZ)) {\n    representationsByZ[z] = new Set();\n  }\n  representationsByZ[z].add(tileRepresentation);\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(\n      extent,\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\n    );\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\n    layerState.layer.getRenderSource()\n  );\n  if (!source.getWrapX()) {\n    const gridExtent = source\n      .getTileGridForProjection(frameState.viewState.projection)\n      .getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\n/**\n * @param {import(\"../../source/Tile.js\").default} source The source.\n * @param {import('../../tilecoord.js').TileCoord} tileCoord The tile coordinate.\n * @return {string} The cache key.\n */\nexport function getCacheKey(source, tileCoord) {\n  return `${getUid(source)},${source.getKey()},${source.getRevision()},${getTileCoordKey(tileCoord)}`;\n}\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {number} [cacheSize=512] The tile representation cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\n */\n\n/**\n * @classdesc\n * Base WebGL renderer for tile layers.\n * @template {BaseLayerType} LayerType\n * @template {import(\"../../Tile.js\").default} TileType\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\n * @extends {WebGLLayerRenderer<LayerType>}\n */\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      uniforms: options.uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * This transform converts representation coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.tileTransform_ = createTransform();\n\n    /**\n     * @type {Array<number>}\n     * @protected\n     */\n    this.tempMat4 = createMat4();\n\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n    this.tempSize_ = [0, 0];\n\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\n     * @protected\n     */\n    this.tileRepresentationCache = new LRUCache(cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection_ = undefined;\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset({\n      uniforms: options.uniforms,\n    });\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.renderedProjection_) {\n      this.renderedProjection_ = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.renderedProjection_) {\n      this.clearCache();\n      this.renderedProjection_ = frameState.viewState.projection;\n    }\n\n    const layer = this.getLayer();\n    const source = layer.getRenderSource();\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n    return source.getState() === 'ready';\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\n   * @return {TileRepresentation} A new tile representation\n   * @protected\n   */\n  createTileRepresentation(options) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(\n    frameState,\n    extent,\n    initialZ,\n    tileRepresentationLookup,\n    preload,\n  ) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileRepresentationCache = this.tileRepresentationCache;\n\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(\n      initialZ - preload,\n      tileGrid.getMinZoom(),\n      tileGrid.getZForResolution(\n        Math.min(\n          tileLayer.getMaxResolution(),\n          map\n            ? map\n                .getView()\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\n            : tileGrid.getResolution(0),\n        ),\n        tileSource.zDirection,\n      ),\n    );\n    const rotation = viewState.rotation;\n    const viewport = rotation\n      ? getRotatedViewport(\n          viewState.center,\n          viewState.resolution,\n          rotation,\n          frameState.size,\n        )\n      : undefined;\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        extent,\n        z,\n        this.tempTileRange_,\n      );\n\n      const tileResolution = tileGrid.getResolution(z);\n\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          const cacheKey = getCacheKey(tileSource, tileCoord);\n\n          /** @type {TileRepresentation} */\n          let tileRepresentation;\n\n          /** @type {TileType} */\n          let tile;\n\n          if (tileRepresentationCache.containsKey(cacheKey)) {\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\n            tile = tileRepresentation.tile;\n          }\n          if (\n            !tileRepresentation ||\n            tileRepresentation.tile.key !== tileSource.getKey()\n          ) {\n            tile = tileSource.getTile(\n              z,\n              x,\n              y,\n              frameState.pixelRatio,\n              viewState.projection,\n            );\n            if (!tile) {\n              continue;\n            }\n          }\n\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\n            continue;\n          }\n\n          if (!tileRepresentation) {\n            tileRepresentation = this.createTileRepresentation({\n              tile: tile,\n              grid: tileGrid,\n              helper: this.helper,\n              gutter: gutter,\n            });\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\n          } else {\n            tileRepresentation.setTile(tile);\n          }\n\n          addTileRepresentationToLookup(\n            tileRepresentationLookup,\n            tileRepresentation,\n            z,\n          );\n\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([\n                tile,\n                tileSourceKey,\n                tileGrid.getTileCoordCenter(tileCoord),\n                tileResolution,\n              ]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\n   * @protected\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} If returns false, tile mask rendering will be skipped\n   * @protected\n   */\n  beforeTilesMaskRender(frameState) {\n    return false;\n  }\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\n   * @param {number} tileResolution Tile resolution\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\n   * @param {number} depth Depth\n   * @param {number} gutter Gutter\n   * @param {number} alpha Alpha\n   * @protected\n   */\n  renderTile(\n    tileRepresentation,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {}\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {number} tileZ Tile Z\n   * @param {import(\"../../extent.js\").Extent} extent Render extent\n   * @param {number} depth Depth\n   * @protected\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {}\n\n  drawTile_(\n    frameState,\n    tileRepresentation,\n    tileZ,\n    gutter,\n    extent,\n    alphaLookup,\n    tileGrid,\n  ) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    const tile = tileRepresentation.tile;\n    const tileCoord = tile.tileCoord;\n    const tileCoordKey = getTileCoordKey(tileCoord);\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n    const tileResolution = tileGrid.getResolution(tileZ);\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n    const tileOrigin = tileGrid.getOrigin(tileZ);\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n    // tiles with alpha are rendered last to allow blending\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\n    if (alpha < 1) {\n      frameState.animate = true;\n    }\n\n    const viewState = frameState.viewState;\n    const centerX = viewState.center[0];\n    const centerY = viewState.center[1];\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\n\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n\n    const tileScale = viewState.resolution / tileResolution;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    resetTransform(this.tileTransform_);\n    scaleTransform(\n      this.tileTransform_,\n      2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\n      -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter),\n    );\n    rotateTransform(this.tileTransform_, viewState.rotation);\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\n    translateTransform(\n      this.tileTransform_,\n      (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter,\n      (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter,\n    );\n\n    this.renderTile(\n      /** @type {TileRepresentation} */ (tileRepresentation),\n      this.tileTransform_,\n      frameState,\n      extent,\n      tileResolution,\n      tileSize,\n      tileOrigin,\n      tileExtent,\n      depth,\n      gutter,\n      alpha,\n    );\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    this.frameState = frameState;\n    this.renderComplete = true;\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const extent = getRenderExtent(frameState, frameState.extent);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection,\n    );\n\n    /**\n     * @type {TileRepresentationLookup}\n     */\n    const tileRepresentationLookup = newTileRepresentationLookup();\n\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(\n        viewState.nextResolution,\n        tileSource.zDirection,\n      );\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(\n        frameState,\n        nextExtent,\n        targetZ,\n        tileRepresentationLookup,\n        preload,\n      );\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(\n          frameState,\n          extent,\n          z - 1,\n          tileRepresentationLookup,\n          preload - 1,\n        );\n      }, 0);\n    }\n\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n    const alphaLookup = {};\n\n    let blend = false;\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\n\n    // look for cached tiles to use if a target tile is not ready\n    if (z in representationsByZ) {\n      const uid = getUid(this);\n      const time = frameState.time;\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tile = tileRepresentation.tile;\n        if (tile.getState() === TileState.EMPTY) {\n          continue;\n        }\n        const tileCoord = tile.tileCoord;\n\n        if (tileRepresentation.ready) {\n          const alpha = tile.getAlpha(uid, time);\n          if (alpha === 1) {\n            // no need to look for alt tiles\n            tile.endTransition(uid);\n            continue;\n          }\n          blend = true;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          alphaLookup[tileCoordKey] = alpha;\n        }\n        this.renderComplete = false;\n\n        // first look for child tiles (at z + 1)\n        const coveredByChildren = this.findAltTiles_(\n          tileGrid,\n          tileCoord,\n          z + 1,\n          tileRepresentationLookup,\n        );\n\n        if (coveredByChildren) {\n          continue;\n        }\n\n        // next look for parent tiles\n        const minZoom = tileGrid.getMinZoom();\n        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n          const coveredByParent = this.findAltTiles_(\n            tileGrid,\n            tileCoord,\n            parentZ,\n            tileRepresentationLookup,\n          );\n\n          if (coveredByParent) {\n            break;\n          }\n        }\n      }\n    }\n\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\n\n    const renderTileMask = this.beforeTilesMaskRender(frameState);\n\n    if (renderTileMask) {\n      for (let j = 0, jj = zs.length; j < jj; ++j) {\n        const tileZ = zs[j];\n        for (const tileRepresentation of representationsByZ[tileZ]) {\n          const tileCoord = tileRepresentation.tile.tileCoord;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          // do not render the tile mask if alpha < 1\n          if (tileCoordKey in alphaLookup) {\n            continue;\n          }\n          const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n          this.renderTileMask(\n            /** @type {TileRepresentation} */ (tileRepresentation),\n            tileZ,\n            tileExtent,\n            depthForZ(tileZ),\n          );\n        }\n      }\n    }\n\n    this.beforeTilesRender(frameState, blend);\n\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\n      const tileZ = zs[j];\n      for (const tileRepresentation of representationsByZ[tileZ]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          continue;\n        }\n\n        this.drawTile_(\n          frameState,\n          tileRepresentation,\n          tileZ,\n          gutter,\n          extent,\n          alphaLookup,\n          tileGrid,\n        );\n      }\n    }\n\n    if (z in representationsByZ) {\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          this.drawTile_(\n            frameState,\n            tileRepresentation,\n            z,\n            gutter,\n            extent,\n            alphaLookup,\n            tileGrid,\n          );\n        }\n      }\n    }\n\n    this.beforeFinalize(frameState);\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent,\n    );\n\n    const canvas = this.helper.getCanvas();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    while (tileRepresentationCache.canExpireCache()) {\n      const tileRepresentation = tileRepresentationCache.pop();\n      tileRepresentation.dispose();\n    }\n\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  beforeFinalize(frameState) {\n    return;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\n   * tile representations by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\n      tileCoord,\n      altZ,\n      this.tempTileRange_,\n    );\n\n    if (!tileRange) {\n      return false;\n    }\n\n    let covered = true;\n    const tileRepresentationCache = this.tileRepresentationCache;\n    const source = this.getLayer().getRenderSource();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\n        let loaded = false;\n        if (tileRepresentationCache.containsKey(cacheKey)) {\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\n          if (\n            tileRepresentation.ready &&\n            !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)\n          ) {\n            addTileRepresentationToLookup(\n              tileRepresentationLookup,\n              tileRepresentation,\n              altZ,\n            );\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @override\n   */\n  clearCache() {\n    super.clearCache();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.dispose(),\n    );\n    tileRepresentationCache.clear();\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    this.tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.setHelper(this.helper),\n    );\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n    delete this.frameState;\n  }\n}\n\nexport default WebGLBaseTileLayerRenderer;\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  deleteOldest() {\n    const entry = this.pop();\n    if (entry instanceof Disposable) {\n      entry.dispose();\n    }\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    while (this.oldest_) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already',\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/webgl/Buffer\n */\nimport {assert} from '../asserts.js';\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * A size using `#ofSize(buffer)`\n * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `STATIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @param {Float32Array|Uint32Array} array Array.\n   */\n  setArray(array) {\n    const ArrayType = getArrayClassForType(this.type_);\n    if (!(array instanceof ArrayType)) {\n      throw new Error(`Expected ${ArrayType}`);\n    }\n    this.array_ = array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n","/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data,\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\n\nexport default PaletteTexture;\n","/**\n * @module ol/expr/gpu\n */\nimport {asArray} from '../color.js';\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\nimport {toSize} from '../size.js';\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport {\n  BooleanType,\n  CallExpression,\n  ColorType,\n  NumberArrayType,\n  NumberType,\n  Ops,\n  SizeType,\n  StringType,\n  parse,\n  typeName,\n} from './expression.js';\n\n/**\n * @param {string} operator Operator\n * @param {CompilationContext} context Compilation context\n * @return {string} A function name based on the operator, unique in the given context\n */\nfunction computeOperatorFunctionName(operator, context) {\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\n}\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\nexport function numberToGlsl(v) {\n  const s = v.toString();\n  return s.includes('.') ? s : s + '.0';\n}\n\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error(\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.',\n    );\n  }\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\n}\n\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function colorToGlsl(color) {\n  const array = asArray(color);\n  const alpha = array.length > 3 ? array[3] : 1;\n  return arrayToGlsl([array[0] / 255, array[1] / 255, array[2] / 255, alpha]);\n}\n\n/**\n * Normalizes and converts a number or array toa `vec2` array compatible with GLSL.\n * @param {number|import('../size.js').Size} size Size.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function sizeToGlsl(size) {\n  const array = toSize(size);\n  return arrayToGlsl(array);\n}\n\n/** @type {Object<string, number>} */\nconst stringToFloatMap = {};\nlet stringToFloatCounter = 0;\n\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\nexport function getStringNumberEquivalent(string) {\n  if (!(string in stringToFloatMap)) {\n    stringToFloatMap[string] = stringToFloatCounter++;\n  }\n  return stringToFloatMap[string];\n}\n\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\nexport function stringToGlsl(string) {\n  return numberToGlsl(getStringNumberEquivalent(string));\n}\n\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\n\n/**\n * @typedef {import('./expression.js').ParsingContext} ParsingContext\n */\n/**\n *\n * @typedef {import(\"./expression.js\").Expression} Expression\n */\n/**\n *\n * @typedef {import(\"./expression.js\").LiteralExpression} LiteralExpression\n */\n\n/**\n * @typedef {Object} CompilationContextProperty\n * @property {string} name Name\n * @property {number} type Resolved property type\n */\n\n/**\n * @typedef {Object} CompilationContextVariable\n * @property {string} name Name\n * @property {number} type Resolved variable type\n */\n\n/**\n * @typedef {Object} CompilationContext\n * @property {Object<string, CompilationContextProperty>} properties The values for properties used in 'get' expressions.\n * @property {Object<string, CompilationContextVariable>} variables The values for variables used in 'var' expressions.\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n * @property {boolean} featureId Whether the feature ID is used in the expression\n * @property {boolean} geometryType Whether the geometry type is used in the expression\n */\n\n/**\n * @return {CompilationContext} A new compilation context.\n */\nexport function newCompilationContext() {\n  return {\n    variables: {},\n    properties: {},\n    functions: {},\n    bandCount: 0,\n    featureId: false,\n    geometryType: false,\n  };\n}\n\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\n\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\n\nexport const FEATURE_ID_PROPERTY_NAME = 'featureId';\nexport const GEOMETRY_TYPE_PROPERTY_NAME = 'geometryType';\n\n/**\n * The value `-9999999` will be used to indicate that a property on a feature is not defined, similar to a \"no data\" value.\n */\nexport const UNDEFINED_PROP_VALUE = -9999999;\n\n/**\n * @typedef {string} CompiledExpression\n */\n\n/**\n * @typedef {function(CompilationContext, CallExpression, number): string} Compiler\n * Third argument is the expected value types\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} parsingContext The parsing context.\n * @param {CompilationContext} compilationContext An existing compilation context\n * @return {CompiledExpression} The compiled expression.\n */\nexport function buildExpression(\n  encoded,\n  type,\n  parsingContext,\n  compilationContext,\n) {\n  const expression = parse(encoded, type, parsingContext);\n  return compile(expression, type, compilationContext);\n}\n\n/**\n * @param {function(Array<CompiledExpression>, CompilationContext): string} output Function that takes in parsed arguments and returns a string\n * @return {function(CompilationContext, import(\"./expression.js\").CallExpression, number): string} Compiler for the call expression\n */\nfunction createCompiler(output) {\n  return (context, expression, type) => {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      args[i] = compile(expression.args[i], type, context);\n    }\n    return output(args, context);\n  };\n}\n\n/**\n * @type {Object<string, Compiler>}\n */\nconst compilers = {\n  [Ops.Get]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const propName = /** @type {string} */ (firstArg.value);\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: expression.type,\n      };\n    }\n    return 'a_prop_' + propName;\n  },\n  [Ops.Id]: (context) => {\n    context.featureId = true;\n    return 'a_' + FEATURE_ID_PROPERTY_NAME;\n  },\n  [Ops.GeometryType]: (context) => {\n    context.geometryType = true;\n    return 'a_' + GEOMETRY_TYPE_PROPERTY_NAME;\n  },\n  [Ops.LineMetric]: () => 'currentLineMetric', // this variable is assumed to always be present in shaders, default is 0.\n  [Ops.Var]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const varName = /** @type {string} */ (firstArg.value);\n    const isExisting = varName in context.variables;\n    if (!isExisting) {\n      context.variables[varName] = {\n        name: varName,\n        type: expression.type,\n      };\n    }\n    return uniformNameForVariable(varName);\n  },\n  [Ops.Has]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const propName = /** @type {string} */ (firstArg.value);\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: expression.type,\n      };\n    }\n    return `(a_prop_${propName} != ${numberToGlsl(UNDEFINED_PROP_VALUE)})`;\n  },\n  [Ops.Resolution]: () => 'u_resolution',\n  [Ops.Zoom]: () => 'u_zoom',\n  [Ops.Time]: () => 'u_time',\n  [Ops.Any]: createCompiler((compiledArgs) => `(${compiledArgs.join(` || `)})`),\n  [Ops.All]: createCompiler((compiledArgs) => `(${compiledArgs.join(` && `)})`),\n  [Ops.Not]: createCompiler(([value]) => `(!${value})`),\n  [Ops.Equal]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} == ${secondValue})`,\n  ),\n  [Ops.NotEqual]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} != ${secondValue})`,\n  ),\n  [Ops.GreaterThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} > ${secondValue})`,\n  ),\n  [Ops.GreaterThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} >= ${secondValue})`,\n  ),\n  [Ops.LessThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} < ${secondValue})`,\n  ),\n  [Ops.LessThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} <= ${secondValue})`,\n  ),\n  [Ops.Multiply]: createCompiler(\n    (compiledArgs) => `(${compiledArgs.join(' * ')})`,\n  ),\n  [Ops.Divide]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} / ${secondValue})`,\n  ),\n  [Ops.Add]: createCompiler((compiledArgs) => `(${compiledArgs.join(' + ')})`),\n  [Ops.Subtract]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} - ${secondValue})`,\n  ),\n  [Ops.Clamp]: createCompiler(\n    ([value, min, max]) => `clamp(${value}, ${min}, ${max})`,\n  ),\n  [Ops.Mod]: createCompiler(([value, modulo]) => `mod(${value}, ${modulo})`),\n  [Ops.Pow]: createCompiler(([value, power]) => `pow(${value}, ${power})`),\n  [Ops.Abs]: createCompiler(([value]) => `abs(${value})`),\n  [Ops.Floor]: createCompiler(([value]) => `floor(${value})`),\n  [Ops.Ceil]: createCompiler(([value]) => `ceil(${value})`),\n  [Ops.Round]: createCompiler(([value]) => `floor(${value} + 0.5)`),\n  [Ops.Sin]: createCompiler(([value]) => `sin(${value})`),\n  [Ops.Cos]: createCompiler(([value]) => `cos(${value})`),\n  [Ops.Atan]: createCompiler(([firstValue, secondValue]) => {\n    return secondValue !== undefined\n      ? `atan(${firstValue}, ${secondValue})`\n      : `atan(${firstValue})`;\n  }),\n  [Ops.Sqrt]: createCompiler(([value]) => `sqrt(${value})`),\n  [Ops.Match]: createCompiler((compiledArgs) => {\n    const input = compiledArgs[0];\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 1; i -= 2) {\n      const match = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.Between]: createCompiler(\n    ([value, min, max]) => `(${value} >= ${min} && ${value} <= ${max})`,\n  ),\n  [Ops.Interpolate]: createCompiler(([exponent, input, ...compiledArgs]) => {\n    let result = '';\n    for (let i = 0; i < compiledArgs.length - 2; i += 2) {\n      const stop1 = compiledArgs[i];\n      const output1 = result || compiledArgs[i + 1];\n      const stop2 = compiledArgs[i + 2];\n      const output2 = compiledArgs[i + 3];\n      let ratio;\n      if (exponent === numberToGlsl(1)) {\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\n      } else {\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\n      }\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\n    }\n    return result;\n  }),\n  [Ops.Case]: createCompiler((compiledArgs) => {\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 0; i -= 2) {\n      const condition = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${condition} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.In]: createCompiler(([needle, ...haystack], context) => {\n    const funcName = computeOperatorFunctionName('in', context);\n    const tests = [];\n    for (let i = 0; i < haystack.length; i += 1) {\n      tests.push(`  if (inputValue == ${haystack[i]}) { return true; }`);\n    }\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\n${tests.join('\\n')}\n  return false;\n}`;\n    return `${funcName}(${needle})`;\n  }),\n  [Ops.Array]: createCompiler(\n    (args) => `vec${args.length}(${args.join(', ')})`,\n  ),\n  [Ops.Color]: createCompiler((compiledArgs) => {\n    if (compiledArgs.length === 1) {\n      //grayscale\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), 1.0)`;\n    }\n    if (compiledArgs.length === 2) {\n      //grayscale with alpha\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), ${compiledArgs[1]})`;\n    }\n    const rgb = compiledArgs.slice(0, 3).map((color) => `${color} / 255.0`);\n    if (compiledArgs.length === 3) {\n      return `vec4(${rgb.join(', ')}, 1.0)`;\n    }\n    const alpha = compiledArgs[3];\n    return `vec4(${rgb.join(', ')}, ${alpha})`;\n  }),\n  [Ops.Band]: createCompiler(([band, xOffset, yOffset], context) => {\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      let ifBlocks = '';\n      const bandCount = context.bandCount || 1;\n      for (let i = 0; i < bandCount; i++) {\n        const colorIndex = Math.floor(i / 4);\n        let bandIndex = i % 4;\n        if (i === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\n        ifBlocks += `  if (band == ${i + 1}.0) {\n    return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\n  }\n`;\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] =\n        `float getBandValue(float band, float xOffset, float yOffset) {\n  float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\n  float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n${ifBlocks}\n}`;\n    }\n\n    return `${GET_BAND_VALUE_FUNC}(${band}, ${xOffset ?? '0.0'}, ${\n      yOffset ?? '0.0'\n    })`;\n  }),\n  [Ops.Palette]: (context, expression) => {\n    const [index, ...colors] = expression.args;\n    const numColors = colors.length;\n    const palette = new Uint8Array(numColors * 4);\n    for (let i = 0; i < colors.length; i++) {\n      const parsedValue = /** @type {string | Array<number>} */ (\n        /** @type {LiteralExpression} */ (colors[i]).value\n      );\n      const color = asArray(parsedValue);\n      const offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\n    const paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    const compiledIndex = compile(index, NumberType, context);\n    return `texture2D(${paletteName}, vec2((${compiledIndex} + 0.5) / ${numColors}.0, 0.5))`;\n  },\n  // TODO: unimplemented\n  // Ops.Number\n  // Ops.String\n  // Ops.Coalesce\n  // Ops.Concat\n  // Ops.ToString\n};\n\n/**\n * @param {Expression} expression The expression.\n * @param {number} returnType The expected return type.\n * @param {CompilationContext} context The compilation context.\n * @return {CompiledExpression} The compiled expression\n */\nfunction compile(expression, returnType, context) {\n  // operator\n  if (expression instanceof CallExpression) {\n    const compiler = compilers[expression.operator];\n    if (compiler === undefined) {\n      throw new Error(\n        `No compiler defined for this operator: ${JSON.stringify(\n          expression.operator,\n        )}`,\n      );\n    }\n    return compiler(context, expression, returnType);\n  }\n\n  if ((expression.type & NumberType) > 0) {\n    return numberToGlsl(/** @type {number} */ (expression.value));\n  }\n\n  if ((expression.type & BooleanType) > 0) {\n    return expression.value.toString();\n  }\n\n  if ((expression.type & StringType) > 0) {\n    return stringToGlsl(expression.value.toString());\n  }\n\n  if ((expression.type & ColorType) > 0) {\n    return colorToGlsl(\n      /** @type {Array<number> | string} */ (expression.value),\n    );\n  }\n\n  if ((expression.type & NumberArrayType) > 0) {\n    return arrayToGlsl(/** @type {Array<number>} */ (expression.value));\n  }\n\n  if ((expression.type & SizeType) > 0) {\n    return sizeToGlsl(\n      /** @type {number|import('../size.js').Size} */ (expression.value),\n    );\n  }\n\n  throw new Error(\n    `Unexpected expression ${expression.value} (expected type ${typeName(\n      returnType,\n    )})`,\n  );\n}\n","/**\n * @module ol/DataTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike\n */\n\n/**\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\n */\n\n/**\n * Data that can be used with a DataTile.\n * @typedef {ArrayLike|ImageLike} Data\n */\n\n/**\n * @param {Data} data Tile data.\n * @return {ImageLike|null} The image-like data.\n */\nexport function asImageLike(data) {\n  return data instanceof Image ||\n    data instanceof HTMLCanvasElement ||\n    data instanceof HTMLVideoElement ||\n    data instanceof ImageBitmap\n    ? data\n    : null;\n}\n\n/**\n * @param {Data} data Tile data.\n * @return {ArrayLike|null} The array-like data.\n */\nexport function asArrayLike(data) {\n  return data instanceof Uint8Array ||\n    data instanceof Uint8ClampedArray ||\n    data instanceof Float32Array ||\n    data instanceof DataView\n    ? data\n    : null;\n}\n\n/**\n * This is set as the cancellation reason when a tile is disposed.\n */\nexport const disposedError = new Error('disposed');\n\n/**\n * @type {CanvasRenderingContext2D|null}\n */\nlet sharedContext = null;\n\n/**\n * @param {ImageLike} image The image.\n * @return {Uint8ClampedArray} The data.\n */\nexport function toArray(image) {\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(\n      image.width,\n      image.height,\n      undefined,\n      {willReadFrequently: true},\n    );\n  }\n  const canvas = sharedContext.canvas;\n  const width = image.width;\n  if (canvas.width !== width) {\n    canvas.width = width;\n  }\n  const height = image.height;\n  if (canvas.height !== height) {\n    canvas.height = height;\n  }\n  sharedContext.clearRect(0, 0, width, height);\n  sharedContext.drawImage(image, 0, 0);\n  return sharedContext.getImageData(0, 0, width, height).data;\n}\n\n/**\n * @type {import('./size.js').Size}\n */\nconst defaultSize = [256, 256];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @property {AbortController} [controller] An abort controller.\n * @api\n */\n\nclass DataTile extends Tile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    const state = TileState.IDLE;\n\n    super(options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @type {Data}\n     * @private\n     */\n    this.data_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */\n    this.size_ = options.size || null;\n\n    /**\n     * @type {AbortController|null}\n     * @private\n     */\n    this.controller_ = options.controller || null;\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */\n  getSize() {\n    if (this.size_) {\n      return this.size_;\n    }\n    const imageData = asImageLike(this.data_);\n    if (imageData) {\n      return [imageData.width, imageData.height];\n    }\n    return defaultSize;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n  getData() {\n    return this.data_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Load the tile data.\n   * @api\n   * @override\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    const self = this;\n    this.loader_()\n      .then(function (data) {\n        self.data_ = data;\n        self.state = TileState.LOADED;\n        self.changed();\n      })\n      .catch(function (error) {\n        self.error_ = error;\n        self.state = TileState.ERROR;\n        self.changed();\n      });\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.controller_) {\n      this.controller_.abort(disposedError);\n      this.controller_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default DataTile;\n","/**\n * @module ol/webgl/TileTexture\n */\n\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport {toSize} from '../size.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport WebGLArrayBuffer from './Buffer.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n\n    super.setHelper(helper);\n\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter,\n      sourceTileSize[1] + 2 * this.gutter,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n","/**\n * @module ol/renderer/webgl/TileLayer\n */\nimport TileState from '../../TileState.js';\nimport {\n  boundingExtent,\n  containsCoordinate,\n  getIntersection,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {toSize} from '../../size.js';\nimport {apply as applyTransform} from '../../transform.js';\nimport {fromTransform as mat4FromTransform} from '../../vec/mat4.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport WebGLBaseTileLayerRenderer, {\n  Uniforms as BaseUniforms,\n  getCacheKey,\n} from './TileLayerBase.js';\n\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\n};\n\nexport const Attributes = {\n  TEXTURE_COORD: 'a_textureCoord',\n};\n\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\nconst attributeDescriptions = [\n  {\n    name: Attributes.TEXTURE_COORD,\n    size: 2,\n    type: AttributeType.FLOAT,\n  },\n];\n\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @template {import(\"../../layer/WebGLTile.js\").default|import(\"../../layer/Flow.js\").default} LayerType\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\n * @api\n */\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, options);\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n    this.paletteTextures_ = options.paletteTextures || [];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(\n        this.fragmentShader_,\n        this.vertexShader_,\n      );\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        // upload the texture data\n        paletteTexture.getTexture(gl);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    const gl = this.helper.getGL();\n    for (const paletteTexture of this.paletteTextures_) {\n      // upload the texture data\n      paletteTexture.getTexture(gl);\n    }\n\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_,\n    );\n    this.helper.flushBufferData(this.indices_);\n  }\n\n  /**\n   * @override\n   */\n  removeHelper() {\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    super.removeHelper();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    return new TileTexture(options);\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, tilesWithAlpha);\n    this.helper.useProgram(this.program_, frameState);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(\n    tileTexture,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {\n    const gl = this.helper.getGL();\n    this.helper.bindBuffer(tileTexture.coords);\n    this.helper.bindBuffer(this.indices_);\n    this.helper.enableAttributes(attributeDescriptions);\n\n    let textureSlot = 0;\n    while (textureSlot < tileTexture.textures.length) {\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\n      this.helper.bindTexture(\n        tileTexture.textures[textureSlot],\n        textureSlot,\n        uniformName,\n      );\n      ++textureSlot;\n    }\n\n    for (\n      let paletteIndex = 0;\n      paletteIndex < this.paletteTextures_.length;\n      ++paletteIndex\n    ) {\n      const paletteTexture = this.paletteTextures_[paletteIndex];\n      const texture = paletteTexture.getTexture(gl);\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\n      ++textureSlot;\n    }\n\n    const viewState = frameState.viewState;\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const tile = tileTexture.tile;\n    const tileCoord = tile.tileCoord;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    this.helper.setUniformMatrixValue(\n      Uniforms.TILE_TRANSFORM,\n      mat4FromTransform(this.tempMat4, tileTransform),\n    );\n\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n\n    let gutterExtent = renderExtent;\n    if (gutter > 0) {\n      gutterExtent = tileExtent;\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\n    }\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\n\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_WIDTH,\n      tileWidthWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_HEIGHT,\n      tileHeightWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_RESOLUTION,\n      tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_X,\n      tileOrigin[0] +\n        tileCenterI * tileSize[0] * tileResolution -\n        gutter * tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_Y,\n      tileOrigin[1] -\n        tileCenterJ * tileSize[1] * tileResolution +\n        gutter * tileResolution,\n    );\n\n    this.helper.drawElements(0, this.indices_.getSize());\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const gl = this.helper.getGL();\n    if (!gl) {\n      return null;\n    }\n\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const viewState = frameState.viewState;\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (\n        !containsCoordinate(\n          fromUserExtent(layerExtent, viewState.projection),\n          coordinate,\n        )\n      ) {\n        return null;\n      }\n    }\n\n    // determine last source suitable for rendering at coordinate\n    const sources = layer.getSources(\n      boundingExtent([coordinate]),\n      viewState.resolution,\n    );\n    let i, source, tileGrid;\n    for (i = sources.length - 1; i >= 0; --i) {\n      source = sources[i];\n      if (source.getState() === 'ready') {\n        tileGrid = source.getTileGridForProjection(viewState.projection);\n        if (source.getWrapX()) {\n          break;\n        }\n        const gridExtent = tileGrid.getExtent();\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\n          break;\n        }\n      }\n    }\n    if (i < 0) {\n      return null;\n    }\n\n    const tileTextureCache = this.tileRepresentationCache;\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const cacheKey = getCacheKey(source, tileCoord);\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n      const tileTexture = tileTextureCache.get(cacheKey);\n      const tile = tileTexture.tile;\n      if (tile.getState() === TileState.EMPTY) {\n        return null;\n      }\n      if (!tileTexture.loaded) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col =\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\n        tileCoord[1] * tileSize[0];\n\n      const row =\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\n        tileCoord[2] * tileSize[1];\n\n      return tileTexture.getPixelData(col, row);\n    }\n    return null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const helper = this.helper;\n    if (helper) {\n      const gl = helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n      this.paletteTextures_.length = 0;\n\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n      helper.deleteBuffer(this.indices_);\n    }\n    super.disposeInternal();\n    delete this.indices_;\n  }\n}\n\nexport default WebGLTileLayerRenderer;\n","/**\n * Utilities for compiling expressions and turning them into WebGL concepts\n * @module ol/render/webgl/compileUtil\n */\n\nimport {asArray} from '../../color.js';\nimport {\n  ColorType,\n  NumberArrayType,\n  SizeType,\n  newParsingContext,\n} from '../../expr/expression.js';\nimport {\n  buildExpression,\n  getStringNumberEquivalent,\n  uniformNameForVariable,\n} from '../../expr/gpu.js';\n\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a compilation context that\n * will be read and modified during the parsing operation.\n * @param {import(\"../../expr/gpu.js\").CompilationContext} compilationContext Compilation context\n * @param {import(\"../../expr/expression.js\").EncodedExpression} value Value\n * @param {number} [expectedType] Expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\nexport function expressionToGlsl(compilationContext, value, expectedType) {\n  const parsingContext = newParsingContext();\n  return buildExpression(\n    value,\n    expectedType,\n    parsingContext,\n    compilationContext,\n  );\n}\n\n/**\n * Packs all components of a color into a two-floats array\n * @param {import(\"../../color.js\").Color|string} color Color as array of numbers or string\n * @return {Array<number>} Vec2 array containing the color in compressed form\n */\nexport function packColor(color) {\n  const array = asArray(color);\n  const r = array[0] * 256;\n  const g = array[1];\n  const b = array[2] * 256;\n  const a = Math.round(array[3] * 255);\n  return [r + g, b + a];\n}\n\nexport const UNPACK_COLOR_FN = `vec4 unpackColor(vec2 packedColor) {\n  return vec4(\n    fract(floor(packedColor[0] / 256.0) / 256.0),\n    fract(packedColor[0] / 256.0),\n    fract(floor(packedColor[1] / 256.0) / 256.0),\n    fract(packedColor[1] / 256.0)\n  );\n}`;\n\n/**\n * @param {number} type Value type\n * @return {1|2|3|4} The amount of components for this value\n */\nexport function getGlslSizeFromType(type) {\n  if (type === ColorType || type === SizeType) {\n    return 2;\n  }\n  if (type === NumberArrayType) {\n    return 4;\n  }\n  return 1;\n}\n\n/**\n * @param {number} type Value type\n * @return {'float'|'vec2'|'vec3'|'vec4'} The corresponding GLSL type for this value\n */\nexport function getGlslTypeFromType(type) {\n  const size = getGlslSizeFromType(type);\n  if (size > 1) {\n    return /** @type {'vec2'|'vec3'|'vec4'} */ (`vec${size}`);\n  }\n  return 'float';\n}\n\n/**\n * Applies the properties and variables collected in a compilation context to a ShaderBuilder instance:\n * properties will show up as attributes in shaders, and variables will show up as uniforms.\n * @param {import(\"./ShaderBuilder.js\").ShaderBuilder} builder Shader builder\n * @param {import(\"../../expr/gpu.js\").CompilationContext} context Compilation context\n */\nexport function applyContextToBuilder(builder, context) {\n  // define one uniform per variable\n  for (const varName in context.variables) {\n    const variable = context.variables[varName];\n    const uniformName = uniformNameForVariable(variable.name);\n    let glslType = getGlslTypeFromType(variable.type);\n    if (variable.type === ColorType) {\n      // we're not packing colors when they're passed as uniforms\n      glslType = 'vec4';\n    }\n    builder.addUniform(uniformName, glslType);\n  }\n\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\n  for (const propName in context.properties) {\n    const property = context.properties[propName];\n    const glslType = getGlslTypeFromType(property.type);\n    const attributeName = `a_prop_${property.name}`;\n    if (property.type === ColorType) {\n      builder.addAttribute(\n        attributeName,\n        glslType,\n        `unpackColor(${attributeName})`,\n        'vec4',\n      );\n      builder.addVertexShaderFunction(UNPACK_COLOR_FN);\n    } else {\n      builder.addAttribute(attributeName, glslType);\n    }\n  }\n\n  // add functions that were collected in the compilation contexts\n  for (const functionName in context.functions) {\n    builder.addVertexShaderFunction(context.functions[functionName]);\n    builder.addFragmentShaderFunction(context.functions[functionName]);\n  }\n}\n\n/**\n * Generates a set of uniforms from variables collected in a compilation context,\n * to be fed to a WebGLHelper instance\n * @param {import(\"../../expr/gpu.js\").CompilationContext} context Compilation context\n * @param {import('../../style/flat.js').StyleVariables} [variables] Style variables.\n * @return {Object<string,import(\"../../webgl/Helper\").UniformValue>} Uniforms\n */\nexport function generateUniformsFromContext(context, variables) {\n  /** @type {Object<string,import(\"../../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  // define one uniform per variable\n  for (const varName in context.variables) {\n    const variable = context.variables[varName];\n    const uniformName = uniformNameForVariable(variable.name);\n\n    uniforms[uniformName] = () => {\n      const value = variables[variable.name];\n      if (typeof value === 'number') {\n        return value;\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      if (variable.type === ColorType) {\n        const color = [...asArray(value || '#eee')];\n        color[0] /= 255;\n        color[1] /= 255;\n        color[2] /= 255;\n        color[3] ??= 1;\n        return color;\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      return value;\n    };\n  }\n\n  return uniforms;\n}\n\n/**\n * Generates a set of attributes from properties collected in a compilation context,\n * to be fed to a WebGLHelper instance\n * @param {import(\"../../expr/gpu.js\").CompilationContext} context Compilation context\n * @return {import('./VectorStyleRenderer.js').AttributeDefinitions} Attributes\n */\nexport function generateAttributesFromContext(context) {\n  /**\n   * @type {import('./VectorStyleRenderer.js').AttributeDefinitions}\n   */\n  const attributes = {};\n\n  // Define attributes with their callback for each property used in the vertex shader\n  for (const propName in context.properties) {\n    const property = context.properties[propName];\n    const callback = (feature) => {\n      const value = feature.get(property.name);\n      if (property.type === ColorType) {\n        return packColor([...asArray(value || '#eee')]);\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      return value;\n    };\n\n    attributes[`prop_${property.name}`] = {\n      size: getGlslSizeFromType(property.type),\n      callback,\n    };\n  }\n  return attributes;\n}\n","/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport LayerRenderer from '../Layer.js';\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass WebGLLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(layer, options) {\n    super(layer);\n\n    options = options || {};\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.postProcesses_ = options.postProcesses;\n\n    /**\n     * @private\n     */\n    this.uniforms_ = options.uniforms;\n\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n    this.helper;\n\n    this.onMapChanged_ = () => {\n      this.clearCache();\n      this.removeHelper();\n    };\n\n    layer.addChangeListener(LayerProperty.MAP, this.onMapChanged_);\n\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPreComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.PRECOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPostComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.POSTCOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    this.uniforms_ = options.uniforms;\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  removeHelper() {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    if (this.getLayer().getRenderSource()) {\n      let incrementGroup = true;\n      let groupNumber = -1;\n      let className;\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        const layer = frameState.layerStatesArray[i].layer;\n        const renderer = layer.getRenderer();\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n        const layerClassName = layer.getClassName();\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n        className = layerClassName;\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      const canvasCacheKey =\n        'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (\n        !this.helper ||\n        !this.helper.canvasCacheKeyMatches(canvasCacheKey) ||\n        this.helper.needsToBeRecreated()\n      ) {\n        this.removeHelper();\n\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey,\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  }\n\n  /**\n   * @protected\n   */\n  afterHelperCreated() {}\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n  prepareFrameInternal(frameState) {\n    return true;\n  }\n\n  /**\n   * @protected\n   */\n  clearCache() {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearCache();\n    this.removeHelper();\n    this.getLayer()?.removeChangeListener(\n      LayerProperty.MAP,\n      this.onMapChanged_,\n    );\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      composeTransform(\n        this.inversePixelTransform_,\n        0,\n        0,\n        frameState.pixelRatio,\n        -frameState.pixelRatio,\n        0,\n        0,\n        -frameState.size[1],\n      );\n\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform_,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n}\n\nexport default WebGLLayerRenderer;\n","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n","/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n","/**\n * @module ol/webgl/Helper\n */\nimport Disposable from '../Disposable.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {getUid} from '../util.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   `gl_Position`: position of the vertex in screen space\n *\n *   Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.needsToBeRecreated_ = false;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            }),\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxAttributeCount_ = this.gl_.getParameter(\n      this.gl_.MAX_VERTEX_ATTRIBS,\n    );\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const bufferKey = getUid(buf);\n    // Note: gl.deleteBuffer is not called here since we let WebGL garbage collect it automatically\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * @param {WebGLFramebuffer|null} frameBuffer The frame buffer.\n   * @param {WebGLTexture} [texture] The texture.\n   */\n  bindFrameBuffer(frameBuffer, texture) {\n    const gl = this.getGL();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    if (texture) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0,\n      );\n    }\n  }\n\n  /**\n   * Bind the frame buffer from the initial render.\n   */\n  bindInitialFrameBuffer() {\n    const gl = this.getGL();\n    const frameBuffer = this.postProcessPasses_[0].getFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    const texture = this.postProcessPasses_[0].getRenderTargetTexture();\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0,\n    );\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Set up an attribute array buffer for use in the vertex shader.\n   * @param {import(\"./Buffer\").default} buffer The buffer.\n   * @param {string} attributeName The attribute name.\n   * @param {number} size The number of components per attribute vertex.\n   */\n  bindAttribute(buffer, attributeName, size) {\n    const gl = this.getGL();\n    this.bindBuffer(buffer);\n    const index = this.getAttributeLocation(attributeName);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth,\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose,\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1],\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001,\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution,\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData ||\n        value instanceof WebGLTexture\n      ) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (\n          !(value instanceof WebGLTexture) &&\n          imageReady &&\n          uniform.prevValue !== value\n        ) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value),\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   */\n  useProgram(program, frameState) {\n    this.disableAllAttributes_();\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    if (frameState) {\n      this.applyFrameState(frameState);\n      this.applyUniforms(frameState);\n    }\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER,\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER,\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program,\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1],\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Disable all vertex attributes.\n   * @private\n   */\n  disableAllAttributes_() {\n    for (let i = 0; i < this.maxAttributeCount_; i++) {\n      this.gl_.disableVertexAttribArray(i);\n    }\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset,\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.  If a Uint8Array is provided for data, a size must also be provided.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|Uint8Array|null} data Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @param {boolean} [nearest] Use gl.NEAREST for min/mag filter.\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture, nearest) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n    const filter = nearest ? gl.NEAREST : gl.LINEAR;\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n\n    if (data instanceof Uint8Array) {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        data,\n      );\n    } else if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null,\n      );\n    }\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n","/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport EventTarget from '../events/Target.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    this.helper = helper;\n    if (this.helper && this.loaded) {\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.setHelper(null);\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n","/**\n * @module ol/vec/mat4\n */\n\n/** @typedef {Array<number>} Mat4 */\n\n/**\n * @return {Mat4} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Mat4} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Mat4} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @param {Mat4} [out] mat4 frustum matrix will be written into\n * @return {Mat4} out\n */\nexport function orthographic(left, right, bottom, top, near, far, out) {\n  out = out ?? create();\n  const lr = 1 / (left - right),\n    bt = 1 / (bottom - top),\n    nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {Mat4} m The matrix to scale.\n * @param {number} x How much to scale in the x direction.\n * @param {number} y How much to scale in the y direction.\n * @param {number} z How much to scale in the z direction.\n * @param {Mat4} [out] The matrix to write to.\n * @return {Mat4} out\n */\nexport function scale(m, x, y, z, out) {\n  out = out ?? create();\n  out[0] = m[0] * x;\n  out[1] = m[1] * x;\n  out[2] = m[2] * x;\n  out[3] = m[3] * x;\n  out[4] = m[4] * y;\n  out[5] = m[5] * y;\n  out[6] = m[6] * y;\n  out[7] = m[7] * y;\n  out[8] = m[8] * z;\n  out[9] = m[9] * z;\n  out[10] = m[10] * z;\n  out[11] = m[11] * z;\n  out[12] = m[12];\n  out[13] = m[13];\n  out[14] = m[14];\n  out[15] = m[15];\n  return out;\n}\n\n/**\n * Translate a matrix.\n *\n * @param {Mat4} m the matrix to translate\n * @param {number} x How much to translate in the x direction.\n * @param {number} y How much to translate in the y direction.\n * @param {number} z How much to translate in the z direction.\n * @param {Mat4} [out] the receiving matrix\n * @return {Mat4} out\n */\nexport function translate(m, x, y, z, out) {\n  out = out ?? create();\n  let a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n\n  if (m === out) {\n    out[12] = m[0] * x + m[4] * y + m[8] * z + m[12];\n    out[13] = m[1] * x + m[5] * y + m[9] * z + m[13];\n    out[14] = m[2] * x + m[6] * y + m[10] * z + m[14];\n    out[15] = m[3] * x + m[7] * y + m[11] * z + m[15];\n  } else {\n    a00 = m[0];\n    a01 = m[1];\n    a02 = m[2];\n    a03 = m[3];\n    a10 = m[4];\n    a11 = m[5];\n    a12 = m[6];\n    a13 = m[7];\n    a20 = m[8];\n    a21 = m[9];\n    a22 = m[10];\n    a23 = m[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + m[12];\n    out[13] = a01 * x + a11 * y + a21 * z + m[13];\n    out[14] = a02 * x + a12 * y + a22 * z + m[14];\n    out[15] = a03 * x + a13 * y + a23 * z + m[15];\n  }\n\n  return out;\n}\n\n/**\n * @param {number} x x translation.\n * @param {number} y y translation.\n * @param {number} z z translation.\n * @param {Mat4} [out] optional matrix to store result\n * @return {Mat4} out\n */\nexport function translation(x, y, z, out) {\n  out = out ?? create();\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = x;\n  out[13] = y;\n  out[14] = z;\n  out[15] = 1;\n\n  return out;\n}\n","/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/**\n  end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes,\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n"],"names":["Uniforms","TILE_TRANSFORM","TRANSITION_ALPHA","DEPTH","RENDER_EXTENT","PATTERN_ORIGIN","RESOLUTION","ZOOM","GLOBAL_ALPHA","PROJECTION_MATRIX","SCREEN_TO_WORLD_MATRIX","depthForZ","z","newTileRepresentationLookup","tileIds","Set","representationsByZ","lookupHasTile","tileRepresentationLookup","tile","has","addTileRepresentationToLookup","tileRepresentation","add","getRenderExtent","frameState","extent","layerState","layerStatesArray","layerIndex","viewState","projection","source","layer","getRenderSource","getWrapX","gridExtent","getTileGridForProjection","getExtent","getCacheKey","tileCoord","getKey","getRevision","WebGLBaseTileLayerRenderer","constructor","tileLayer","options","super","uniforms","postProcesses","this","renderComplete","tileTransform_","tempMat4","tempTileRange_","tempTileCoord_","tempSize_","cacheSize","undefined","tileRepresentationCache","renderedProjection_","reset","prepareFrameInternal","clearCache","getLayer","getState","createTileRepresentation","enqueueTiles","initialZ","preload","tileSource","tileGrid","gutter","getGutterForProjection","tileSourceKey","wantedTiles","map","getMapInternal","minZ","Math","max","getMinZoom","getZForResolution","min","getMaxResolution","getView","getResolutionForZoom","getResolution","zDirection","rotation","viewport","center","resolution","size","tileRange","getTileRangeForExtentAndZ","tileResolution","x","minX","maxX","y","minY","maxY","tileCoordIntersectsViewport","cacheKey","containsKey","get","key","getTile","pixelRatio","setTile","grid","helper","set","tileQueueKey","IDLE","tileQueue","isKeyQueued","enqueue","getTileCoordCenter","beforeTilesRender","tilesWithAlpha","prepareDraw","beforeTilesMaskRender","renderTile","tileTransform","renderExtent","tileSize","tileOrigin","tileExtent","depth","alpha","renderTileMask","tileZ","drawTile_","alphaLookup","ready","tileCoordKey","getTileSize","getOrigin","getTileCoordExtent","animate","centerX","centerY","tileWidthWithGutter","tileHeightWithGutter","aspectRatio","centerI","centerJ","tileScale","tileCenterI","tileCenterJ","renderFrame","gl","getGL","preRender","getPreload","nextExtent","targetZ","nextResolution","setTimeout","blend","uid","time","EMPTY","getAlpha","endTransition","coveredByChildren","findAltTiles_","minZoom","parentZ","coveredByParent","zs","Object","keys","Number","sort","j","jj","length","beforeFinalize","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","canvas","getCanvas","canExpireCache","pop","dispose","postRender","altZ","getTileRangeForTileCoordAndZ","covered","loaded","forEach","clear","afterHelperCreated","setHelper","disposeInternal","LRUCache","highWaterMark","count_","entries_","oldest_","newest_","deleteOldest","entry","getCount","expireCache","keep","hasOwnProperty","f","value_","key_","newer","older","remove","getKeys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","setSize","BufferUsage","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","WebGLArrayBuffer","type","usage","array_","type_","usage_","ofSize","getArrayClassForType","fromArray","array","from","fromArrayBuffer","buffer","getType","getArray","setArray","ArrayType","Error","getUsage","getSize","Float32Array","Uint32Array","PaletteTexture","name","data","texture_","getTexture","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","deleteTexture","computeOperatorFunctionName","operator","context","functions","numberToGlsl","v","s","toString","includes","arrayToGlsl","join","colorToGlsl","color","sizeToGlsl","stringToFloatMap","stringToFloatCounter","getStringNumberEquivalent","string","stringToGlsl","uniformNameForVariable","variableName","newCompilationContext","variables","properties","bandCount","featureId","geometryType","GET_BAND_VALUE_FUNC","PALETTE_TEXTURE_ARRAY","FEATURE_ID_PROPERTY_NAME","GEOMETRY_TYPE_PROPERTY_NAME","UNDEFINED_PROP_VALUE","buildExpression","encoded","parsingContext","compilationContext","expression","compile","createCompiler","output","args","compilers","Get","firstArg","propName","isExisting","Id","GeometryType","LineMetric","Var","varName","Has","Resolution","Zoom","Time","Any","compiledArgs","All","Not","Equal","firstValue","secondValue","NotEqual","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Multiply","Divide","Add","Subtract","Clamp","Mod","modulo","Pow","power","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","Match","input","fallback","result","match","Between","Interpolate","exponent","stop1","output1","stop2","output2","ratio","Case","condition","In","needle","haystack","funcName","tests","push","Color","rgb","slice","Band","band","xOffset","yOffset","ifBlocks","colorIndex","floor","bandIndex","textureName","TILE_TEXTURE_ARRAY","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","Palette","index","colors","numColors","palette","Uint8Array","parsedValue","offset","paletteTextures","paletteName","paletteTexture","compiledIndex","returnType","compiler","JSON","stringify","asImageLike","Image","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","asArrayLike","Uint8ClampedArray","DataView","disposedError","sharedContext","toArray","image","width","height","willReadFrequently","clearRect","drawImage","getImageData","defaultSize","DataTile","state","transition","interpolate","loader_","loader","data_","error_","size_","controller_","controller","imageData","getData","getError","load","ERROR","LOADING","changed","self","then","LOADED","catch","error","abort","bindAndConfigure","resampleFilter","LINEAR","uploadImageTexture","uploadDataTexture","textureType","canInterpolate","FLOAT","getExtension","extension","bytesPerRow","byteLength","format","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","TileTexture","BaseTileRepresentation","textures","renderSize_","NaN","coords","flushBufferData","deleteBuffer","uploadTile","ImageTile","getImage","setReady","sourceTileSize","pixelSize","isFloat","pixelCount","DataType","bytesPerElement","BYTES_PER_ELEMENT","textureCount","ceil","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","textureData","textureBandIndex","getImagePixelData_","renderCol","renderRow","renderWidth","renderHeight","sourceWidth","sourceHeight","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceCol","sourceRow","getArrayPixelData_","sourceSize","bytesPerPixel","getPixelData","arrayData","TEXTURE_RESOLUTION","TEXTURE_ORIGIN_X","TEXTURE_ORIGIN_Y","Attributes","TEXTURE_COORD","attributeDescriptions","WebGLTileLayerRenderer","program_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","indices_","paletteTextures_","delete","getProgram","removeHelper","useProgram","tileTexture","bindBuffer","enableAttributes","textureSlot","uniformName","paletteIndex","setUniformMatrixValue","mat4","setUniformFloatValue","gutterExtent","setUniformFloatVec4","zoom","drawElements","pixel","coordinate","pixelToCoordinateTransform","layerExtent","sources","getSources","tileTextureCache","getTileCoordForCoordAndZ","TileState","col","row","deleteProgram","expressionToGlsl","expectedType","packColor","r","g","b","a","round","UNPACK_COLOR_FN","getGlslSizeFromType","getGlslTypeFromType","applyContextToBuilder","builder","variable","glslType","addUniform","property","attributeName","addAttribute","addVertexShaderFunction","functionName","addFragmentShaderFunction","generateUniformsFromContext","generateAttributesFromContext","attributes","callback","feature","WebGLLayerRenderer","inversePixelTransform_","postProcesses_","uniforms_","onMapChanged_","addChangeListener","MAP","bind","hasListener","PRECOMPOSE","event","dispatchEvent","POSTCOMPOSE","setUniforms","prepareFrame","className","incrementGroup","groupNumber","ii","renderer","getRenderer","layerClassName","getClassName","canvasCacheKey","mapId","canvasCacheKeyMatches","needsToBeRecreated","removeChangeListener","dispatchRenderEvent_","PRERENDER","POSTRENDER","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","ARRAY_BUFFER","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","location","getRenderTargetTexture","init","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","level","internalFormat","border","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","getContextAttributes","preserveDrawingBuffer","clearColor","clearDepth","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","uniform1f","applyUniforms","drawArrays","TRIANGLES","uniform","ImageData","isArray","uniform3f","uniform4f","DefaultUniform","TIME","ROTATION","VIEWPORT_SIZE_PX","PIXEL_RATIO","HIT_DETECTION","AttributeType","UNSIGNED_SHORT","UNSIGNED_INT","canvasCache","getSharedCanvasCacheKey","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getOrCreateContext","cacheItem","document","createElement","style","position","left","users","releaseCanvas","loseContext","WebGLHelper","Disposable","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","bufferCache_","extensionCache_","currentProgram_","needsToBeRecreated_","addEventListener","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocationsByProgram_","attribLocationsByProgram_","postProcessPasses_","shaderCompileErrors_","startTime_","Date","now","maxAttributeCount_","MAX_VERTEX_ATTRIBS","addUniforms","bufferKey","bufferCache","webGlBuffer","buf","removeEventListener","disableAlphaBlend","enableDepth","depthRange","ZERO","depthFunc","LEQUAL","bindFrameBuffer","frameBuffer","bindInitialFrameBuffer","slot","bindAttribute","getAttributeLocation","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getDepthbuffer","start","end","elementType","elementSize","numItems","offsetInBytes","applyFrameState","setUniformFloatVec2","applyHitDetectionUniform","enabled","loc","HTMLImageElement","WebGLTexture","prevValue","imageReady","complete","program","disableAllAttributes_","shader","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","programUid","makeProjectionTransform","transform","uniform2fv","uniform4fv","uniformMatrix4fv","disableVertexAttribArray","enableAttributeArray_","attribName","stride","computeAttributesStride","attr","getByteSizeFromType","preventDefault","nearest","filter","Uint16Array","handleTileChange_","CHANGE","crossOrigin","create","fromTransform","orthographic","right","bottom","top","near","far","out","lr","bt","nf","scale","m","translate","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","translation","ELEMENT_ARRAY_BUFFER","CONTEXT_IDS","getContext","assign","antialias"],"sourceRoot":""}