{"version":3,"file":"js/4447.68bf2562.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/uri.js","webpack://@radiantearth/stac-browser/./node_modules/ol/tilecoord.js","webpack://@radiantearth/stac-browser/./node_modules/ol/source/ImageWMS.js"],"sourcesContent":["/**\n * @module ol/uri\n */\n\nimport {modulo} from './math.js';\nimport {hashZXY} from './tilecoord.js';\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {number} [maxY] The maximum y coordinate at the given z level.\n * @return {string} The URL.\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template\n    .replace(zRegEx, z.toString())\n    .replace(xRegEx, x.toString())\n    .replace(yRegEx, y.toString())\n    .replace(dashYRegEx, function () {\n      if (maxY === undefined) {\n        throw new Error(\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\n        );\n      }\n      return (maxY - y).toString();\n    });\n}\n\n/**\n * @param {Array<string>} urls List of URLs.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {string} The chosen URL.\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/source/ImageWMS\n */\n\nimport {decode} from '../Image.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader, getFeatureInfoUrl, getLegendUrl} from './wms.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution,\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const options = {\n      url: this.url_,\n      params: {\n        ...this.params_,\n        ...params,\n      },\n      projection: sourceProjectionObj || projectionObj,\n    };\n    return getFeatureInfoUrl(options, coordinate, resolution);\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    return getLegendUrl(\n      {\n        url: this.url_,\n        params: {\n          ...this.params_,\n          ...params,\n        },\n      },\n      resolution,\n    );\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        serverType: this.serverType_,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  setParams(params) {\n    this.params_ = Object.assign({}, params);\n    this.changed();\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageWMS;\n"],"names":["appendParams","uri","params","keyParams","Object","keys","forEach","k","undefined","push","encodeURIComponent","qs","join","replace","includes","zRegEx","xRegEx","yRegEx","dashYRegEx","renderXYZTemplate","template","z","x","y","maxY","toString","Error","pickUrl","urls","hash","index","length","expandUrl","url","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","String","fromCharCode","stop","parseInt","i","createOrUpdate","tileCoord","getKeyZXY","getKey","hashZXY","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY","ImageWMS","constructor","options","super","attributions","interpolate","projection","resolutions","this","crossOrigin_","crossOrigin","url_","imageLoadFunction_","imageLoadFunction","defaultImageLoadFunction","params_","assign","serverType_","serverType","hidpi_","hidpi","renderedRevision_","ratio_","ratio","loaderProjection_","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getProjection","getLegendUrl","getParams","getImageInternal","extent","pixelRatio","loader","createLoader","load","image","src","setImage","getImageLoadFunction","getUrl","setImageLoadFunction","changed","setUrl","setParams","updateParams"],"sourceRoot":""}