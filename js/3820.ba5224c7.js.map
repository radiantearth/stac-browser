{"version":3,"file":"js/3820.ba5224c7.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/ol/layer/Image.js","webpack://@radiantearth/stac-browser/./node_modules/ol/renderer/canvas/ImageLayer.js","webpack://@radiantearth/stac-browser/./node_modules/ol/layer/BaseImage.js"],"sourcesContent":["/**\n * @module ol/layer/Image\n */\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\nimport BaseImageLayer from './BaseImage.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport CanvasLayerRenderer from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image ? null : this.image.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection,\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image = null;\n          }\n        }\n      } else {\n        this.image = null;\n      }\n    }\n\n    return !!this.image;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image.getExtent();\n    const img = this.image.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth),\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight),\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const image = this.image;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const context = this.getRenderContext(frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection,\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY,\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      if (opacity !== 1) {\n        context.save();\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.restore();\n      }\n    }\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n"],"names":["ImageLayer","constructor","options","super","createRenderer","this","getData","pixel","CanvasImageLayerRenderer","imageLayer","image","getImage","prepareFrame","frameState","layerState","layerStatesArray","layerIndex","pixelRatio","viewState","viewResolution","resolution","imageSource","getLayer","getSource","hints","viewHints","renderedExtent","extent","undefined","projection","ANIMATING","INTERACTING","loadImage","getState","EMPTY","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","imageExtent","img","imageMapWidth","col","Math","floor","width","imageMapHeight","row","height","getImageData","renderFrame","target","imageResolution","getResolution","imageResolutionX","imageResolutionY","Array","isArray","imagePixelRatio","getPixelRatio","viewCenter","center","scaleX","scaleY","prepareContainer","context","canvas","getRenderContext","clipped","render","clipUnrotated","transform","tempTransform","renderedResolution","dw","dh","getInterpolate","imageSmoothingEnabled","preRender","dx","dy","opacity","save","globalAlpha","drawImage","restore","postRender","container","BaseImageLayer"],"sourceRoot":""}